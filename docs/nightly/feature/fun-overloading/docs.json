{
  "skriptVersion": "2.11.2-nightly-cbec463",
  "version": {
    "major": 1,
    "minor": 1
  },
  "conditions": [
    {
      "id": "CondAlphanumeric",
      "name": "Alphanumeric",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Checks if the given string is alphanumeric."
      ],
      "patterns": [
        "%texts% (is|are) alphanumeric",
        "%texts% (isn't|is not|aren't|are not) alphanumeric"
      ],
      "examples": [
        "if the argument is not alphanumeric:",
        "\tsend \"Invalid name!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondAnchorWorks",
      "name": "Do Respawn Anchors Work",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Checks whether or not respawn anchors work in a world."
      ],
      "patterns": [
        "respawn anchors [do[(n't| not)]] work in %worlds%"
      ],
      "examples": [
        "respawn anchors work in world \"world_nether\""
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.16+"
      ],
      "keywords": null
    },
    {
      "id": "CondCancelled",
      "name": "Event Cancelled",
      "since": [
        "2.2-dev36"
      ],
      "deprecated": false,
      "description": [
        "Checks whether or not the event is cancelled."
      ],
      "patterns": [
        "[the] event is cancel[l]ed",
        "[the] event (is not|isn't) cancel[l]ed"
      ],
      "examples": [
        "on click:",
        "\tif event is cancelled:",
        "\t\tbroadcast \"no clicks allowed!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondCanHold",
      "name": "Can Hold",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Tests whether a player or a chest can hold the given item."
      ],
      "patterns": [
        "%inventories% (can hold|ha(s|ve) [enough] space (for|to hold)) %item types%",
        "%inventories% (can(no|')t hold|(ha(s|ve) not|ha(s|ve)n't|do[es]n't have) [enough] space (for|to hold)) %item types%"
      ],
      "examples": [
        "block can hold 200 cobblestone",
        "player has enough space for 64 feathers"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondCanSee",
      "name": "Can See",
      "since": [
        "2.3, 2.10 (entities)"
      ],
      "deprecated": false,
      "description": [
        "Checks whether the given players can see the provided entities."
      ],
      "patterns": [
        "%entities% (is|are) [visible|invisible] for %players%",
        "%players% can see %entities%",
        "%entities% (is|are)(n't| not) [visible|invisible] for %players%",
        "%players% can('t| not) see %entities%"
      ],
      "examples": [
        "if sender can't see the player-argument:",
        "\tmessage \"who dat?\"",
        "",
        "if the player can see the last spawned entity:",
        "\tmessage \"hello there!\""
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.19+ (entities)"
      ],
      "keywords": null
    },
    {
      "id": "CondChance",
      "name": "Chance",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "A condition that randomly succeeds or fails.",
        "Valid values are between 0% and 100%, or if the percent sign is omitted between 0 and 1."
      ],
      "patterns": [
        "chance of %number%[(\\%)]"
      ],
      "examples": [
        "chance of 50%:",
        "\tdrop a diamond",
        "chance of {chance}% # {chance} between 0 and 100",
        "chance of {chance} # {chance} between 0 and 1"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondChatVisibility",
      "name": "Can See Messages",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player can see specific message types in chat."
      ],
      "patterns": [
        "%player% can see all messages [in chat]",
        "%player% can only see (commands|system messages) [in chat]",
        "%player% can('t|[ ]not) see any (command[s]|message[s]) [in chat]",
        "%player% can('t|[ ]not) see all messages [in chat]",
        "%player% can('t|[ ]not) only see (commands|system messages) [in chat]"
      ],
      "examples": [
        "if player can see all messages:",
        "\tsend \"You can see all messages.\"",
        "if player can only see commands:",
        "\tsend \"This game doesn't work with commands-only chat.\"",
        "if player can't see any messages:",
        "\tsend action bar \"Server shutting down in 5 minutes!\""
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "CondContains",
      "name": "Contains",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an inventory contains an item, a text contains another piece of text, a container contains something, or a list (e.g. {list variable::*} or 'drops') contains another object."
      ],
      "patterns": [
        "%inventories% (has|have) %item types% [in [(the[ir]|his|her|its)] inventory]",
        "%inventories% (doesn't|does not|do not|don't) have %item types% [in [(the[ir]|his|her|its)] inventory]",
        "%inventories/texts/objects% contain[s] %item types/texts/objects%",
        "%inventories/texts/objects% (doesn't|does not|do not|don't) contain %item types/texts/objects%"
      ],
      "examples": [
        "block contains 20 cobblestone",
        "player has 4 flint and 2 iron ingots",
        "{list::*} contains 5"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondDamageCause",
      "name": "Damage Cause",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "Tests what kind of damage caused a <a href='events.html#damage'>damage event</a>. Refer to the <a href='classes.html#damagecause'>Damage Cause</a> type for a list of all possible causes."
      ],
      "patterns": [
        "[the] damage (was|is|has)[n('|o)t] [been] (caused|done|made) by %damage cause%"
      ],
      "examples": [
        "# make players use their potions of fire resistance whenever they take any kind of fire damage",
        "on damage:",
        "\tdamage was caused by lava, fire or burning",
        "\tvictim is a player",
        "\tvictim has a potion of fire resistance",
        "\tcancel event",
        "\tapply fire resistance to the victim for 30 seconds",
        "\tremove 1 potion of fire resistance from the victim",
        "# prevent mobs from dropping items under certain circumstances",
        "on death:",
        "\tentity is not a player",
        "\tdamage wasn't caused by a block explosion, an attack, a projectile, a potion, fire, burning, thorns or poison",
        "\tclear drops"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondDate",
      "name": "Time",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "Tests whether a given <a href='classes.html#date'>real time</a> was more or less than some <a href='classes.html#timespan'>time span</a> ago."
      ],
      "patterns": [
        "%date% (was|were)( more|(n't| not) less) than %time span% [ago]",
        "%date% (was|were)((n't| not) more| less) than %time span% [ago]"
      ],
      "examples": [
        "command /command-with-cooldown:",
        "\ttrigger:",
        "\t\t{command::%player's uuid%::last-usage} was less than a minute ago:",
        "\t\t\tmessage \"Please wait a minute between uses of this command.\"",
        "\t\t\tstop",
        "\t\tset {command::%player's uuid%::last-usage} to now",
        "\t\t# ... actual command trigger here ..."
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondElytraBoostConsume",
      "name": "Will Consume Boosting Firework",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks to see if the firework used in an 'elytra boost' event will be consumed."
      ],
      "patterns": [
        "[the] (boosting|used) firework will be consumed",
        "[the] (boosting|used) firework (will not|won't) be consumed"
      ],
      "examples": [
        "on elytra boost:",
        "\tif the used firework will be consumed:",
        "\t\tprevent the used firework from being consume"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "CondFromMobSpawner",
      "name": "Is From A Mob Spawner",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks if an entity was spawned from a mob spawner."
      ],
      "patterns": [
        "%entities% (is|are) from a [mob] spawner",
        "%entities% (isn't|aren't|is not|are not) from a [mob] spawner",
        "%entities% (was|were) spawned (from|by) a [mob] spawner",
        "%entities% (wasn't|weren't|was not|were not) spawned (from|by) a [mob] spawner"
      ],
      "examples": [
        "send whether target is from a mob spawner"
      ],
      "events": null,
      "requirements": [
        "PaperMC"
      ],
      "keywords": null
    },
    {
      "id": "CondHasItemCooldown",
      "name": "Has Item Cooldown",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Check whether a cooldown is active on the specified material for a specific player."
      ],
      "patterns": [
        "%players% (has|have) [([an] item|a)] cooldown (on|for) %item types%",
        "%players% (has|have) %item types% on [(item|a)] cooldown",
        "%players% (doesn't|does not|do not|don't) have [([an] item|a)] cooldown (on|for) %item types%",
        "%players% (doesn't|does not|do not|don't) have %item types% on [(item|a)] cooldown"
      ],
      "examples": [
        "if player has player's tool on cooldown:",
        "\tsend \"You can't use this item right now. Wait %item cooldown of player's tool for player%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondHasLineOfSight",
      "name": "Has Line of Sight",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Checks whether living entities have an unobstructed line of sight to other entities or locations."
      ],
      "patterns": [
        "%living entities% (has|have) [a] [direct] line of sight to %entities/locations%",
        "%living entities% does(n't| not) have [a] [direct] line of sight to %entities/locations%",
        "%living entities% (has|have) no [direct] line of sight to %entities/locations%"
      ],
      "examples": [
        "player has direct line of sight to location 5 blocks to the right of player",
        "victim has line of sight to attacker",
        "player has no line of sight to location 100 blocks in front of player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondHasMetadata",
      "name": "Has Metadata",
      "since": [
        "2.2-dev36"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a metadata holder has a metadata tag."
      ],
      "patterns": [
        "%metadata holders% (has|have) metadata [(value|tag)[s]] %texts%",
        "%metadata holders% (doesn't|does not|do not|don't) have metadata [(value|tag)[s]] %texts%"
      ],
      "examples": [
        "if player has metadata value \"healer\":"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondHasPotion",
      "name": "Has Potion",
      "since": [
        "2.6.1"
      ],
      "deprecated": false,
      "description": [
        "Checks whether the given living entities have specific potion effects."
      ],
      "patterns": [
        "%living entities% (has|have) potion[s] [effect[s]] %potion effect types%",
        "%living entities% (doesn't|does not|do not|don't) have potion[s] [effect[s]] %potion effect types%"
      ],
      "examples": [
        "if player has potion speed:",
        "\tsend \"You are sonic!\"",
        "",
        "if all players have potion effects speed and haste:",
        "\tbroadcast \"You are ready to MINE!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIgnitionProcess",
      "name": "Ignition Process",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Checks if a creeper is going to explode."
      ],
      "patterns": [
        "[creeper[s]] %living entities% ((is|are)|(isn't|is not|aren't|are not)) going to explode",
        "[creeper[s]] %living entities% ((is|are)|(isn't|is not|aren't|are not)) in the (ignition|explosion) process",
        "creeper[s] %living entities% ((is|are)|(isn't|is not|aren't|are not)) ignited"
      ],
      "examples": [
        "if the last spawned creeper is going to explode:",
        "\tloop all players in radius 3 of the last spawned creeper",
        "\t\tsend \"RUN!!!\" to the loop-player"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "CondIncendiary",
      "name": "Is Incendiary",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Checks if an entity will create fire when it explodes. This condition is also usable in an explosion prime event."
      ],
      "patterns": [
        "%entities% ((is|are) incendiary|cause[s] a[n] (incendiary|fiery) explosion)",
        "%entities% ((is not|are not|isn't|aren't) incendiary|(does not|do not|doesn't|don't) cause[s] a[n] (incendiary|fiery) explosion)",
        "the [event(-| )]explosion (is|(is not|isn't)) (incendiary|fiery)"
      ],
      "examples": [
        "on explosion prime:",
        "\tif the explosion is fiery:",
        "\t\tbroadcast \"A fiery explosive has been ignited!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsBanned",
      "name": "Is Banned",
      "since": [
        "1.4"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player or IP is banned."
      ],
      "patterns": [
        "%offline players/texts% (is|are) banned",
        "%players/texts% (is|are) IP[(-| )]banned",
        "%offline players/texts% (isn't|is not|aren't|are not) banned",
        "%players/texts% (isn't|is not|aren't|are not) IP[(-| )]banned"
      ],
      "examples": [
        "player is banned",
        "victim is not IP-banned",
        "\"127.0.0.1\" is banned"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsBlockRedstonePowered",
      "name": "Is Block Redstone Powered",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Checks if a block is indirectly or directly powered by redstone"
      ],
      "patterns": [
        "%blocks% (is|are) redstone powered",
        "%blocks% (is|are) indirectly redstone powered",
        "%blocks% (is|are)(n't| not) redstone powered",
        "%blocks% (is|are)(n't| not) indirectly redstone powered"
      ],
      "examples": [
        "if clicked block is redstone powered:",
        "\tsend \"This block is well-powered by redstone!\"",
        "if clicked block is indirectly redstone powered:",
        "\tsend \"This block is indirectly redstone powered.\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsCustomNameVisible",
      "name": "Is Custom Name Visible",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks if an entity's custom name is visible."
      ],
      "patterns": [
        "%entities%'[s] custom name[s] (is|are) visible",
        "%entities%'[s] custom name[s] (isn't|is not|are not|aren't) visible",
        "custom name of %entities% (is|are) visible",
        "custom name of %entities% (isn't|is not|are not|aren't) visible"
      ],
      "examples": [
        "send true if target's custom name is visible"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsDivisibleBy",
      "name": "Is Evenly Divisible By",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Check if a number is evenly divisible by another number."
      ],
      "patterns": [
        "%numbers% (is|are) evenly divisible by %number%",
        "%numbers% (isn't|is not|aren't|are not) evenly divisible by %number%",
        "%numbers% can be evenly divided by %number%",
        "%numbers% (can't|can[ ]not) be evenly divided by %number%"
      ],
      "examples": [
        "if 5 is evenly divisible by 5:",
        "if 11 cannot be evenly divided by 10:"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsHandRaised",
      "name": "Is Hand Raised",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity has one or both of their hands raised.",
        "Hands are raised when an entity is using an item (eg: blocking, drawing a bow, eating)."
      ],
      "patterns": [
        "%living entities%'[s] [main] hand[s] (is|are) raised",
        "%living entities%'[s] [main] hand[s] (isn't|is not|aren't|are not) raised",
        "[main] hand[s] of %living entities% (is|are) raised",
        "[main] hand[s] of %living entities% (isn't|is not|aren't|are not) raised",
        "%living entities%'[s] off[ |-]hand[s] (is|are) raised",
        "%living entities%'[s] off[ |-]hand[s] (isn't|is not|aren't|are not) raised",
        "off[ |-]hand[s] of %living entities% (is|are) raised",
        "off[ |-]hand[s] of %living entities% (isn't|is not|aren't|are not) raised"
      ],
      "examples": [
        "on damage of player:",
        "\tif victim's main hand is raised:",
        "\t\tdrop player's tool at player",
        "\t\tset player's tool to air"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "CondIsLoaded",
      "name": "Is Loaded",
      "since": [
        "2.3, 2.5 (revamp with chunk at location/coords), 2.10 (Scripts)"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a world, chunk or script is loaded.",
        "'chunk at 1, 1' uses chunk coordinates, which are location coords divided by 16."
      ],
      "patterns": [
        "chunk[s] %directions% [%locations%] (is|are)[((n't| not))] loaded",
        "chunk [at] %number%, %number% (in|of) [world] %world% is[((n't| not))] loaded",
        "%scripts/worlds% (is|are)[(n't| not)] loaded",
        "script[s] %scripts% (is|are)[(n't| not)] loaded",
        "world[s] %worlds% (is|are)[(n't| not)] loaded"
      ],
      "examples": [
        "if chunk at {home::%player's uuid%} is loaded:",
        "if chunk 1, 10 in world \"world\" is loaded:",
        "if world(\"lobby\") is loaded:",
        "if script named \"MyScript.sk\" is loaded:"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsPluginEnabled",
      "name": "Is Plugin Enabled",
      "since": [
        "2.6"
      ],
      "deprecated": false,
      "description": [
        "Check if a plugin is enabled/disabled on the server.",
        "Plugin names can be found in the plugin's 'plugin.yml' file or by using the '/plugins' command, they are NOT the name of the plugin's jar file.",
        "When checking if a plugin is not enabled, this will return true if the plugin is either disabled or not on the server. ",
        "When checking if a plugin is disabled, this will return true if the plugin is on the server and is disabled."
      ],
      "patterns": [
        "plugin[s] %texts% (is|are) enabled",
        "plugin[s] %texts% (is|are)(n't| not) enabled",
        "plugin[s] %texts% (is|are) disabled"
      ],
      "examples": [
        "if plugin \"Vault\" is enabled:",
        "if plugin \"WorldGuard\" is not enabled:",
        "if plugins \"Essentials\" and \"Vault\" are enabled:",
        "if plugin \"MyBrokenPlugin\" is disabled:"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsPreferredTool",
      "name": "Is Preferred Tool",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item is the preferred tool for a block. A preferred tool is one that will drop the block's item when used. For example, a wooden pickaxe is a preferred tool for grass and stone blocks, but not for iron ore."
      ],
      "patterns": [
        "%item types% (is|are) %blocks/block datas%'s preferred tool[s]",
        "%item types% (is|are) [the|a] preferred tool[s] (for|of) %blocks/block datas%",
        "%item types% (is|are)(n't| not) %blocks/block datas%'s preferred tool[s]",
        "%item types% (is|are)(n't| not) [the|a] preferred tool[s] (for|of) %blocks/block datas%"
      ],
      "examples": [
        "on left click:",
        "\tevent-block is set",
        "\tif player's tool is the preferred tool for event-block:",
        "\t\tbreak event-block naturally using player's tool",
        "\telse:",
        "\t\tcancel event"
      ],
      "events": null,
      "requirements": [
        "1.16.5+, Paper 1.19.2+ (blockdata)"
      ],
      "keywords": null
    },
    {
      "id": "CondIsSet",
      "name": "Exists/Is Set",
      "since": [
        "1.2"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a given expression or variable is set."
      ],
      "patterns": [
        "%~objects% (exist[s]|(is|are) set)",
        "%~objects% (do[es](n't| not) exist|(is|are)(n't| not) set)"
      ],
      "examples": [
        "{teams::%player's uuid%::preferred-team} is not set",
        "on damage:",
        "\tprojectile exists",
        "\tbroadcast \"%attacker% used a %projectile% to attack %victim%!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsUsingFeature",
      "name": "Is Using Experimental Feature",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a script is using an experimental feature by name."
      ],
      "patterns": [
        "%script% is using %texts%",
        "%scripts% are using %texts%",
        "%script% is(n't| not) using %texts%",
        "%scripts% are(n't| not) using %texts%"
      ],
      "examples": [
        "the script is using \"example feature\"",
        "on load:",
        "\tif the script is using \"example feature\":",
        "\t\tbroadcast \"You're using an experimental feature!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsWhitelisted",
      "name": "Is Whitelisted",
      "since": [
        "2.5.2, 2.9.0 (enforce, offline players)"
      ],
      "deprecated": false,
      "description": [
        "Whether or not the server or a player is whitelisted, or the server is whitelist enforced."
      ],
      "patterns": [
        "[the] server (is|(isn't|is not)) (in white[ ]list mode|white[ ]listed)",
        "%offline players% (is|are|(isn't|is not|aren't|are not)) white[ ]listed",
        "[the] server white[ ]list (is|(isn't|is not)) enforced"
      ],
      "examples": [
        "if the player is whitelisted:",
        "if the server is whitelisted:",
        "if the server whitelist is enforced:"
      ],
      "events": null,
      "requirements": [
        "MC 1.17+ (enforce)"
      ],
      "keywords": null
    },
    {
      "id": "CondIsWithin",
      "name": "Is Within",
      "since": [
        "2.7, 2.11 (world borders)"
      ],
      "deprecated": false,
      "description": [
        "Whether a location is within something else. The \"something\" can be a block, an entity, a chunk, a world, or a cuboid formed by two other locations.",
        "Note that using the <a href='conditions.html#CondCompare'>is between</a> condition will refer to a straight line between locations, while this condition will refer to the cuboid between locations."
      ],
      "patterns": [
        "%locations% (is|are) within %location% and %location%",
        "%locations% (isn't|is not|aren't|are not) within %location% and %location%",
        "%locations% (is|are) (within|in[side [of]]) %entities/chunks/worlds/worldborders/blocks%",
        "%locations% (isn't|is not|aren't|are not) (within|in[side [of]]) %entities/chunks/worlds/worldborders/blocks%"
      ],
      "examples": [
        "if player's location is within {_loc1} and {_loc2}:",
        "\tsend \"You are in a PvP zone!\" to player",
        "",
        "if player is in world(\"world\"):",
        "\tsend \"You are in the overworld!\" to player",
        "",
        "if attacker's location is inside of victim:",
        "\tcancel event",
        "\tsend \"Back up!\" to attacker and victim",
        "",
        "if player is in world \"world1\" or world \"world2\":",
        "\tkill player",
        "",
        "if player is in world \"world\" and chunk at location(0, 0, 0):",
        "\tgive player 1 diamond"
      ],
      "events": null,
      "requirements": [
        "MC 1.17+ (within block)"
      ],
      "keywords": null
    },
    {
      "id": "CondItemInHand",
      "name": "Is Holding",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player is holding a specific item. Cannot be used with endermen, use 'entity is [not] an enderman holding &lt;item type&gt;' instead."
      ],
      "patterns": [
        "[%living entities%] ha(s|ve) %item types% in [main] hand",
        "[%living entities%] (is|are) holding %item types% [in main hand]",
        "[%living entities%] ha(s|ve) %item types% in off[(-| )]hand",
        "[%living entities%] (is|are) holding %item types% in off[(-| )]hand",
        "[%living entities%] (ha(s|ve) not|do[es]n't have) %item types% in [main] hand",
        "[%living entities%] (is not|isn't) holding %item types% [in main hand]",
        "[%living entities%] (ha(s|ve) not|do[es]n't have) %item types% in off[(-| )]hand",
        "[%living entities%] (is not|isn't) holding %item types% in off[(-| )]hand"
      ],
      "examples": [
        "player is holding a stick",
        "victim isn't holding a diamond sword of sharpness"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondLeashWillDrop",
      "name": "Leash Will Drop",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether the leash item will drop during the leash detaching in an unleash event."
      ],
      "patterns": [
        "[the] (lead|leash) [item] (will|(won't|will not)) (drop|be dropped)"
      ],
      "examples": [
        "on unleash:",
        "\tif the leash will drop:",
        "\t\tprevent the leash from dropping",
        "\telse:",
        "\t\tallow the leash to drop"
      ],
      "events": [
        "Unleash"
      ],
      "requirements": [
        "Paper 1.16+"
      ],
      "keywords": [
        "lead"
      ]
    },
    {
      "id": "CondMatches",
      "name": "Matches",
      "since": [
        "2.5.2"
      ],
      "deprecated": false,
      "description": [
        "Checks whether the defined strings match the input regexes (Regular expressions)."
      ],
      "patterns": [
        "%texts% (match[es]|do[es](n't| not) match) %texts%",
        "%texts% (partially match[es]|do[es](n't| not) partially match) %texts%"
      ],
      "examples": [
        "on chat:",
        "\tif message partially matches \"\\d\":",
        "\t\tsend \"Message contains a digit!\"",
        "\tif message doesn't match \"[A-Za-z]+\":",
        "\t\tsend \"Message doesn't only contain letters!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondMinecraftVersion",
      "name": "Running Minecraft",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Checks if current Minecraft version is given version or newer."
      ],
      "patterns": [
        "running [below] minecraft %text%"
      ],
      "examples": [
        "running minecraft \"1.14\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondPastFuture",
      "name": "In The Past/Future",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a date is in the past or future.",
        "Note that using the 'now' expression will not be in the past or future when used directly in the condition."
      ],
      "patterns": [
        "%dates% (is|are)[(n't| not)] in the (past|future)",
        "%dates% ha(s|ve)[(n't| not)] passed"
      ],
      "examples": [
        "set {_date} to now",
        "wait 5 seconds",
        "if {_date} is in the past:",
        "\t# this will be true",
        "",
        "if now is in the future:",
        "\t# this will be false",
        "",
        "set {_dates::*} to 1 day from now, 12 days from now, and 1 year from now",
        "if {_dates::*} are in the future:",
        "\t# this will be true",
        "if {_dates::*} have passed:",
        "\t# this will be false"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondPermission",
      "name": "Has Permission",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Test whether a player has a certain permission."
      ],
      "patterns": [
        "%command senders% (has|have) [the] permission[s] %texts%",
        "%command senders% (doesn't|does not|do not|don't) have [the] permission[s] %texts%"
      ],
      "examples": [
        "player has permission \"skript.tree\"",
        "victim has the permission \"admin\":",
        "\tsend \"You're attacking an admin!\" to attacker"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondPlayedBefore",
      "name": "Has Played Before",
      "since": [
        "1.4, 2.7 (multiple players)"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player has played on this server before. You can also use <a href='events.html#first_join'>on first join</a> if you want to make triggers for new players."
      ],
      "patterns": [
        "%offline players% [(has|have|did)] [already] play[ed] [on (this|the) server] (before|already)",
        "%offline players% (has not|hasn't|have not|haven't|did not|didn't) [(already|yet)] play[ed] [on (this|the) server] (before|already|yet)"
      ],
      "examples": [
        "player has played on this server before",
        "player hasn't played before"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondPvP",
      "name": "PvP",
      "since": [
        "1.3.4"
      ],
      "deprecated": false,
      "description": [
        "Checks the PvP state of a world."
      ],
      "patterns": [
        "(is PvP|PvP is) enabled [in %worlds%]",
        "(is PvP|PvP is) disabled [in %worlds%]"
      ],
      "examples": [
        "PvP is enabled",
        "PvP is disabled in \"world\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondResourcePack",
      "name": "Resource Pack",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Checks state of the resource pack in a <a href='events.html#resource_pack_request_action'>resource pack request response</a> event."
      ],
      "patterns": [
        "[the] resource pack (was|is|has) [been] %resource pack state%",
        "[the] resource pack (was|is|has)(n't| not) [been] %resource pack state%"
      ],
      "examples": [
        "on resource pack response:",
        "\tif the resource pack wasn't accepted:",
        "\t\tkick the player due to \"You have to install the resource pack to play in this server!\""
      ],
      "events": [
        "resource pack request response"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondRespawnLocation",
      "name": "Is Bed/Anchor Spawn",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Checks what the respawn location of a player in the respawn event is."
      ],
      "patterns": [
        "[the] respawn location (was|is)[(n'| no)t] [a] (bed|respawn anchor)"
      ],
      "examples": [
        "on respawn:",
        "\tthe respawn location is a bed",
        "\tbroadcast \"%player% is respawning in their bed! So cozy!\""
      ],
      "events": [
        "respawn"
      ],
      "requirements": [
        "Minecraft 1.16+"
      ],
      "keywords": null
    },
    {
      "id": "CondScriptLoaded",
      "name": "Is Script Loaded",
      "since": [
        "2.2-dev31"
      ],
      "deprecated": false,
      "description": [
        "Check if the current script, or another script, is currently loaded."
      ],
      "patterns": [
        "script[s] [%texts%] (is|are) loaded",
        "script[s] [%texts%] (isn't|is not|aren't|are not) loaded"
      ],
      "examples": [
        "script is loaded",
        "script \"example.sk\" is loaded"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondStartsEndsWith",
      "name": "Starts/Ends With",
      "since": [
        "2.2-dev36, 2.5.1 (multiple strings support)"
      ],
      "deprecated": false,
      "description": [
        "Checks if a text starts or ends with another."
      ],
      "patterns": [
        "%texts% (start|end)[s] with %texts%",
        "%texts% (doesn't|does not|do not|don't) (start|end) with %texts%"
      ],
      "examples": [
        "if the argument starts with \"test\" or \"debug\":",
        "\tsend \"Stop!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondTooltip",
      "name": "Has Item Tooltips",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Whether the entire or additional tooltip of an item is shown or hidden.",
        "The 'entire tooltip' is what shows to the player when they hover an item (i.e. name, lore, etc.).",
        "The 'additional tooltip' hides certain information from certain items (potions, maps, books, fireworks, and banners)."
      ],
      "patterns": [
        "[the] [entire|additional] tool[ ]tip[s] of %item types% (is|are) (shown|hidden)",
        "[the] [entire|additional] tool[ ]tip[s] of %item types% (isn't|is not|aren't|are not) (shown|hidden)",
        "%item types%'[s] [entire|additional] tool[ ]tip[s] (is|are) (shown|hidden)",
        "%item types%'[s] [entire|additional] tool[ ]tip[s] (isn't|is not|aren't|are not) (shown|hidden)"
      ],
      "examples": [
        "send true if entire tooltip of player's tool is shown",
        "if additional tooltip of {_item} is hidden:"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.20.5+"
      ],
      "keywords": null
    },
    {
      "id": "CondWillHatch",
      "name": "Egg Will Hatch",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Whether the egg will hatch in a Player Egg Throw event."
      ],
      "patterns": [
        "[the] egg (will|will not|won't) hatch"
      ],
      "examples": [
        "on player egg throw:",
        "\tif an entity won't hatch:",
        "\t\tsend \"Better luck next time!\" to the player"
      ],
      "events": [
        "Egg Throw"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondFishingLure",
      "name": "Fishing Lure Applied",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks if the lure enchantment is applied to the current fishing event."
      ],
      "patterns": [
        "lure enchantment bonus is (applied|active)",
        "lure enchantment bonus is(n't| not) (applied|active)"
      ],
      "examples": [
        "on fishing line cast:",
        "\tif lure enchantment bonus is applied:",
        "\t\tcancel event"
      ],
      "events": [
        "Fishing"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondTextDisplayHasDropShadow",
      "name": "Text Display Has Drop Shadow",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns whether the text of a display has drop shadow applied."
      ],
      "patterns": [
        "[[the] text of] %displays% (has|have) [a] (drop|text) shadow",
        "%displays%'[s] text (has|have) [a] (drop|text) shadow",
        "[[the] text of] %displays% (doesn't|does not|do not|don't) have [a] (drop|text) shadow",
        "%displays%'[s] text (doesn't|does not|do not|don't) have [a] (drop|text) shadow"
      ],
      "examples": [
        "if {_display} has drop shadow:",
        "\tremove drop shadow from the text of {_display}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsPressingKey",
      "name": "Is Pressing Key",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks if a player is pressing a certain input key."
      ],
      "patterns": [
        "%players% (is|are) pressing %input keys%",
        "%players% (isn't|is not|aren't|are not) pressing %input keys%",
        "%players% (was|were) pressing %input keys%",
        "%players% (wasn't|was not|weren't|were not) pressing %input keys%"
      ],
      "examples": [
        "on player input:",
        "\tif player is pressing forward movement key:",
        "\t\tsend \"You are moving forward!\""
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.21.2+"
      ],
      "keywords": [
        "press",
        "input"
      ]
    },
    {
      "id": "CondCanBuild",
      "name": "Can Build",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "Tests whether a player is allowed to build at a certain location.",
        "This condition requires a supported <a href='./classes.html#region'>regions</a> plugin to be installed."
      ],
      "patterns": [
        "%players% (can|(is|are) allowed to) build %directions% %locations%",
        "%players% (can('t|not)|(is|are)(n't| not) allowed to) build %directions% %locations%"
      ],
      "examples": [
        "command /setblock &lt;material&gt;:",
        "\tdescription: set the block at your crosshair to a different type",
        "\ttrigger:",
        "\t\tplayer cannot build at the targeted block:",
        "\t\t\tmessage \"You do not have permission to change blocks there!\"",
        "\t\t\tstop",
        "\t\tset the targeted block to argument"
      ],
      "events": null,
      "requirements": [
        "Supported regions plugin"
      ],
      "keywords": null
    },
    {
      "id": "CondIsMember",
      "name": "Is Member/Owner of Region",
      "since": [
        "2.1"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player is a member or owner of a particular region.",
        "This condition requires a supported regions plugin to be installed."
      ],
      "patterns": [
        "%offline players% (is|are) ([a] member|[(the|an)] owner) of [[the] region] %regions%",
        "%offline players% (is|are)(n't| not) ([a] member|[(the|an)] owner) of [[the] region] %regions%"
      ],
      "examples": [
        "on region enter:",
        "\tplayer is the owner of the region",
        "\tmessage \"Welcome back to %region%!\"",
        "\tsend \"%player% just entered %region%!\" to all members of the region"
      ],
      "events": null,
      "requirements": [
        "Supported regions plugin"
      ],
      "keywords": null
    },
    {
      "id": "CondRegionContains",
      "name": "Region Contains",
      "since": [
        "2.1"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a location is contained in a particular <a href='./classes.html#region'>region</a>.",
        "This condition requires a supported regions plugin to be installed."
      ],
      "patterns": [
        "[[the] region] %regions% contain[s] %directions% %locations%",
        "%locations% (is|are) ([contained] in|part of) [[the] region] %regions%",
        "[[the] region] %regions% (do|does)(n't| not) contain %directions% %locations%",
        "%locations% (is|are)(n't| not) (contained in|part of) [[the] region] %regions%"
      ],
      "examples": [
        "player is in the region {regions::3}",
        "",
        "on region enter:",
        "\tregion contains {flags.%world%.red}",
        "\tmessage \"The red flag is near!\""
      ],
      "events": null,
      "requirements": [
        "Supported regions plugin"
      ],
      "keywords": null
    },
    {
      "id": "CondAI",
      "name": "Has AI",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity has AI."
      ],
      "patterns": [
        "%living entities% (has|have) (ai|artificial intelligence)",
        "%living entities% (doesn't|does not|do not|don't) have (ai|artificial intelligence)"
      ],
      "examples": [
        "target entity has ai"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondAllayCanDuplicate",
      "name": "Allay Can Duplicate",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Checks to see if an allay is able to duplicate naturally."
      ],
      "patterns": [
        "%living entities% can (duplicate|clone)",
        "%living entities% (can't|cannot|can not) (duplicate|clone)"
      ],
      "examples": [
        "if last spawned allay can duplicate:",
        "\tdisallow last spawned to duplicate"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondCanFly",
      "name": "Can Fly",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Whether a player is allowed to fly."
      ],
      "patterns": [
        "%players% can fly",
        "%players% (can't|cannot|can not) fly"
      ],
      "examples": [
        "player can fly"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondCanPickUpItems",
      "name": "Can Pick Up Items",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Whether living entities are able to pick up items off the ground or not."
      ],
      "patterns": [
        "%living entities% can pick([ ]up items| items up)",
        "%living entities% (can't|cannot|can not) pick([ ]up items| items up)"
      ],
      "examples": [
        "if player can pick items up:",
        "\tsend \"You can pick up items!\" to player",
        "",
        "on drop:",
        "\tif player can't pick\tup items:",
        "\t\tsend \"Be careful, you won't be able to pick that up!\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondChatColors",
      "name": "Can See Chat Colors",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player can see chat colors."
      ],
      "patterns": [
        "%players% can see chat colo[u]r[s|ing]",
        "%players% (can't|cannot|can not) see chat colo[u]r[s|ing]"
      ],
      "examples": [
        "if player can see chat colors:",
        "\tsend \"Find the red word in <red>this<reset> message.\"",
        "else:",
        "\tsend \"You cannot partake in finding the colored word.\""
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "CondChatFiltering",
      "name": "Has Chat Filtering",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player has chat filtering enabled."
      ],
      "patterns": [
        "%players% (has|have) (chat|text) filtering (on|enabled)",
        "%players% (doesn't|does not|do not|don't) have (chat|text) filtering (on|enabled)"
      ],
      "examples": [
        "if player doesn't have chat filtering enabled:",
        "send \"<gray>This server may contain mature chat messages. You have been warned!\" to player"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "CondEndermanStaredAt",
      "name": "Enderman Has Been Stared At",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Checks to see if an enderman has been stared at.",
        "This will return true as long as the entity that stared at the enderman is still alive."
      ],
      "patterns": [
        "%living entities% (has|have) been stared at",
        "%living entities% (doesn't|does not|do not|don't) have been stared at"
      ],
      "examples": [
        "if last spawned enderman has been stared at:"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "CondEntityIsInLiquid",
      "name": "Entity is in Liquid",
      "since": [
        "2.6.1"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity is in rain, lava, water or a bubble column."
      ],
      "patterns": [
        "%entities% (is|are) in (water|lava|[a] bubble[ ]column|rain)",
        "%entities% (isn't|is not|aren't|are not) in (water|lava|[a] bubble[ ]column|rain)"
      ],
      "examples": [
        "if player is in rain:",
        "if player is in water:",
        "player is in lava:",
        "player is in bubble column"
      ],
      "events": null,
      "requirements": [
        "Paper (in rain, lava and bubble column)"
      ],
      "keywords": null
    },
    {
      "id": "CondEntityIsWet",
      "name": "Entity is Wet",
      "since": [
        "2.6.1"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity is wet or not (in water, rain or a bubble column)."
      ],
      "patterns": [
        "%entities% (is|are) wet",
        "%entities% (isn't|is not|aren't|are not) wet"
      ],
      "examples": [
        "if player is wet:"
      ],
      "events": null,
      "requirements": [
        "Paper 1.16+"
      ],
      "keywords": null
    },
    {
      "id": "CondEntityStorageIsFull",
      "name": "Entity Storage Is Full",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Checks to see if the an entity block storage (i.e beehive) is full."
      ],
      "patterns": [
        "[the] entity storage of %blocks% (is|are) full",
        "%blocks%'[s] entity storage (is|are) full",
        "[the] entity storage of %blocks% (isn't|is not|aren't|are not) full",
        "%blocks%'[s] entity storage (isn't|is not|aren't|are not) full"
      ],
      "examples": [
        "if the entity storage of {_beehive} is full:",
        "\trelease the entity storage of {_beehive}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondEntityUnload",
      "name": "Can Despawn",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Check if an entity can despawn when the chunk they're located at is unloaded.",
        "More information on what and when entities despawn can be found at <a href=\"https://minecraft.wiki/w/Mob_spawning#Despawning\">reference</a>."
      ],
      "patterns": [
        "%living entities% can despawn (on chunk unload|when far away)",
        "%living entities% (can't|cannot|can not) despawn (on chunk unload|when far away)"
      ],
      "examples": [
        "if last spawned entity can despawn on chunk unload:",
        "\tmake last spawned entity not despawn on chunk unload"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondGlowingText",
      "name": "Has Glowing Text",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a sign (either a block or an item) has glowing text"
      ],
      "patterns": [
        "%blocks/item types% (has|have) glowing text",
        "%blocks/item types% (doesn't|does not|do not|don't) have glowing text"
      ],
      "examples": [
        "if target block has glowing text"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondGoatHasHorns",
      "name": "Goat Has Horns",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Checks to see if a goat has or does not have a left, right, or both horns."
      ],
      "patterns": [
        "%living entities% (has|have) ((any|a) horn|[a] left horn[s]|[a] right horn[s]|both horns)",
        "%living entities% (doesn't|does not|do not|don't) have ((any|a) horn|[a] left horn[s]|[a] right horn[s]|both horns)"
      ],
      "examples": [
        "\tif last spawned goat does not have both horns:\n\t\tmake last spawned goat have both horns\n",
        "\tif {_goat} has a right horn:\n\t\tforce {_goat} to not have a right horn\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondHasClientWeather",
      "name": "Has Client Weather",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Checks whether the given players have a custom client weather"
      ],
      "patterns": [
        "%players% (has|have) [a] (client|custom) weather [set]",
        "%players% (doesn't|does not|do not|don't) have [a] (client|custom) weather [set]"
      ],
      "examples": [
        "if the player has custom weather:",
        "\tmessage \"Your custom weather is %player's weather%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondHasCustomModelData",
      "name": "Has Custom Model Data",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Check if an item has a custom model data tag"
      ],
      "patterns": [
        "%item types% (has|have) [custom] model data",
        "%item types% (doesn't|does not|do not|don't) have [custom] model data"
      ],
      "examples": [
        "player's tool has custom model data"
      ],
      "events": null,
      "requirements": [
        "1.14+"
      ],
      "keywords": null
    },
    {
      "id": "CondHasResourcePack",
      "name": "Has Resource Pack",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Checks whether the given players have a server resource pack loaded. Please note that this can't detect player's own resource pack, only the resource pack that sent by the server."
      ],
      "patterns": [
        "%players% (has|have) [a] resource pack [(loaded|installed)]",
        "%players% (doesn't|does not|do not|don't) have [a] resource pack [(loaded|installed)]"
      ],
      "examples": [
        "if the player has a resource pack loaded:"
      ],
      "events": null,
      "requirements": [
        "Paper 1.9 or newer"
      ],
      "keywords": null
    },
    {
      "id": "CondHasScoreboardTag",
      "name": "Has Scoreboard Tag",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Checks whether the given entities has the given <a href='expressions.html#ExprScoreboardTags'>scoreboard tags</a>."
      ],
      "patterns": [
        "%entities% (has|have) [the] score[ ]board tag[s] %texts%",
        "%entities% (doesn't|does not|do not|don't) have [the] score[ ]board tag[s] %texts%"
      ],
      "examples": [
        "if the targeted armor stand has the scoreboard tag \"test tag\":"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsAlive",
      "name": "Is Alive",
      "since": [
        "2.0, 2.4-alpha4 (non-living entity support)"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity is alive. Works for non-living entities too."
      ],
      "patterns": [
        "%entities% (is|are) (alive|dead)",
        "%entities% (isn't|is not|aren't|are not) (alive|dead)"
      ],
      "examples": [
        "if {villager-buddy::%player's uuid%} is not dead:",
        "",
        "on shoot:",
        "\twhile the projectile is alive:"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsBlock",
      "name": "Is Block",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item is a block."
      ],
      "patterns": [
        "%item types% (is|are) ([a] block|blocks)",
        "%item types% (isn't|is not|aren't|are not) ([a] block|blocks)"
      ],
      "examples": [
        "player's held item is a block",
        "{list::*} are blocks"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsBlocking",
      "name": "Is Blocking",
      "since": [
        "<i>unknown</i> (before 2.1)"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player is blocking with their shield."
      ],
      "patterns": [
        "%players% (is|are) (blocking|defending) [with [a] shield]",
        "%players% (isn't|is not|aren't|are not) (blocking|defending) [with [a] shield]"
      ],
      "examples": [
        "on damage of player:",
        "\tvictim is blocking",
        "\tdamage attacker by 0.5 hearts"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsBurning",
      "name": "Is Burning",
      "since": [
        "1.4.4"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity is on fire, e.g. a zombie due to being in sunlight, or any entity after falling into lava."
      ],
      "patterns": [
        "%entities% (is|are) (burning|ignited|on fire)",
        "%entities% (isn't|is not|aren't|are not) (burning|ignited|on fire)"
      ],
      "examples": [
        "# increased attack against burning targets",
        "victim is burning:",
        "\tincrease damage by 2"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsCharged",
      "name": "Is Charged",
      "since": [
        "2.5, 2.10 (withers, wither skulls)"
      ],
      "deprecated": false,
      "description": [
        "Checks if a creeper, wither, or wither skull is charged (powered)."
      ],
      "patterns": [
        "%entities% (is|are) (charged|powered)",
        "%entities% (isn't|is not|aren't|are not) (charged|powered)"
      ],
      "examples": [
        "if the last spawned creeper is charged:",
        "\tbroadcast \"A charged creeper is at %location of last spawned creeper%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsChargingFireball",
      "name": "Is Charging Fireball",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Check whether a ghast is charging a fireball."
      ],
      "patterns": [
        "%living entities% (is|are) charging [a] fireball",
        "%living entities% (isn't|is not|aren't|are not) charging [a] fireball"
      ],
      "examples": [
        "if last spawned ghast is charging fireball:",
        "\tkill last spawned ghast"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsClimbing",
      "name": "Is Climbing",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Whether a living entity is climbing, such as a spider up a wall or a player on a ladder."
      ],
      "patterns": [
        "%living entities% (is|are) climbing",
        "%living entities% (isn't|is not|aren't|are not) climbing"
      ],
      "examples": [
        "spawn a spider at location of spawn",
        "wait a second",
        "if the last spawned spider is climbing:",
        "\tmessage\"The spider is now climbing!\""
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.17+"
      ],
      "keywords": null
    },
    {
      "id": "CondIsCommandBlockConditional",
      "name": "Is Conditional",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a command block is conditional or not."
      ],
      "patterns": [
        "%blocks% (is|are) [un]conditional",
        "%blocks% (isn't|is not|aren't|are not) [un]conditional"
      ],
      "examples": [
        "if {_block} is conditional:",
        "\tmake {_block} unconditional"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsDancing",
      "name": "Is Dancing",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Checks to see if an entity is dancing, such as allays, parrots, or piglins."
      ],
      "patterns": [
        "%living entities% (is|are) dancing",
        "%living entities% (isn't|is not|aren't|are not) dancing"
      ],
      "examples": [
        "if last spawned allay is dancing:",
        "\tbroadcast \"Dance Party!\""
      ],
      "events": null,
      "requirements": [
        "Paper 1.20.1+ (piglins)"
      ],
      "keywords": null
    },
    {
      "id": "CondIsDashing",
      "name": "Camel Is Dashing",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a camel is currently using its dash ability."
      ],
      "patterns": [
        "%living entities% (is|are) dashing",
        "%living entities% (isn't|is not|aren't|are not) dashing"
      ],
      "examples": [
        "if last spawned camel is dashing:",
        "\tkill last spawned camel"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsEating",
      "name": "Is Eating",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Whether a panda or horse type (horse, camel, donkey, llama, mule) is eating."
      ],
      "patterns": [
        "%living entities% (is|are) eating",
        "%living entities% (isn't|is not|aren't|are not) eating"
      ],
      "examples": [
        "if last spawned panda is eating:\n\tforce last spawned panda to stop eating\n"
      ],
      "events": null,
      "requirements": [
        "Paper (horse type)"
      ],
      "keywords": null
    },
    {
      "id": "CondIsEdible",
      "name": "Is Edible",
      "since": [
        "2.2-dev36"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item is edible."
      ],
      "patterns": [
        "%item types% (is|are) edible",
        "%item types% (isn't|is not|aren't|are not) edible"
      ],
      "examples": [
        "cooked beef is edible",
        "player's tool is edible"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsEmpty",
      "name": "Is Empty",
      "since": [
        "<i>unknown</i> (before 2.1)"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an inventory, an inventory slot, a queue, or a text is empty."
      ],
      "patterns": [
        "%inventories/slots/texts/numbered thing% (is|are) empty",
        "%inventories/slots/texts/numbered thing% (isn't|is not|aren't|are not) empty"
      ],
      "examples": [
        "player's inventory is empty"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsEnchanted",
      "name": "Is Enchanted",
      "since": [
        "1.4.6"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item is enchanted."
      ],
      "patterns": [
        "%item types% (is|are) enchanted [with %enchantment type%]",
        "%item types% (isn't|is not|aren't|are not) enchanted [with %enchantment type%]"
      ],
      "examples": [
        "tool of the player is enchanted with efficiency 2",
        "helm, chestplate, leggings or boots are enchanted"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsFireResistant",
      "name": "Is Fire Resistant",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item is fire resistant."
      ],
      "patterns": [
        "%item types% (is|are) (fire resistant|resistant to fire)",
        "%item types% (isn't|is not|aren't|are not) (fire resistant|resistant to fire)"
      ],
      "examples": [
        "if player's tool is fire resistant:",
        "if {_items::*} aren't resistant to fire:"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.20.5+"
      ],
      "keywords": null
    },
    {
      "id": "CondIsFlammable",
      "name": "Is Flammable",
      "since": [
        "2.2-dev36"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item is flammable."
      ],
      "patterns": [
        "%item types% (is|are) flammable",
        "%item types% (isn't|is not|aren't|are not) flammable"
      ],
      "examples": [
        "send whether the tag contents of minecraft tag \"planks\" are flammable",
        "player's tool is flammable"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsFlying",
      "name": "Is Flying",
      "since": [
        "1.4.4"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player is flying."
      ],
      "patterns": [
        "%players% (is|are) flying",
        "%players% (isn't|is not|aren't|are not) flying"
      ],
      "examples": [
        "player is not flying"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsFrozen",
      "name": "Is Frozen",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity is frozen."
      ],
      "patterns": [
        "%entities% (is|are) frozen",
        "%entities% (isn't|is not|aren't|are not) frozen"
      ],
      "examples": [
        "if player is frozen:",
        "\tkill player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsFuel",
      "name": "Is Fuel",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item can be used as fuel in a furnace."
      ],
      "patterns": [
        "%item types% (is|are) [furnace] fuel",
        "%item types% (isn't|is not|aren't|are not) [furnace] fuel"
      ],
      "examples": [
        "on right click on furnace:",
        "\tif player's tool is not fuel:",
        "\t\tsend \"Please hold a valid fuel item in your hand\"",
        "\t\tcancel event"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsGliding",
      "name": "Is Gliding",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a living entity is gliding."
      ],
      "patterns": [
        "%living entities% (is|are) gliding",
        "%living entities% (isn't|is not|aren't|are not) gliding"
      ],
      "examples": [
        "if player is gliding"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsInfinite",
      "name": "Is Infinite",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Checks whether potion effects are infinite."
      ],
      "patterns": [
        "%potion effects% (is|are) infinite",
        "%potion effects% (isn't|is not|aren't|are not) infinite"
      ],
      "examples": [
        "all of the active potion effects of the player are infinite"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsInteractable",
      "name": "Is Interactable",
      "since": [
        "2.5.2"
      ],
      "deprecated": false,
      "description": [
        "Checks wether or not a block is interactable."
      ],
      "patterns": [
        "%item types% (is|are) interactable",
        "%item types% (isn't|is not|aren't|are not) interactable"
      ],
      "examples": [
        "on block break:",
        "\tif event-block is interactable:",
        "\t\tcancel event",
        "\t\tsend \"You cannot break interactable blocks!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsInvisible",
      "name": "Is Invisible",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a living entity is invisible."
      ],
      "patterns": [
        "%living entities% (is|are) (invisible|visible)",
        "%living entities% (isn't|is not|aren't|are not) (invisible|visible)"
      ],
      "examples": [
        "target entity is invisible"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsInvulnerable",
      "name": "Is Invulnerable",
      "since": [
        "2.5, 2.10 (gamemode)"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity or a gamemode is invulnerable.\nFor gamemodes, Paper and Minecraft 1.20.6 are required"
      ],
      "patterns": [
        "%entities/gamemodes% (is|are) (invulnerable|invincible)",
        "%entities/gamemodes% (isn't|is not|aren't|are not) (invulnerable|invincible)"
      ],
      "examples": [
        "target entity is invulnerable",
        "",
        "loop all gamemodes:",
        "\tif loop-value is not invulnerable:",
        "\t\tbroadcast \"the gamemode %loop-value% is vulnerable!\""
      ],
      "events": null,
      "requirements": [
        "Paper 1.20.6+ (gamemodes)"
      ],
      "keywords": null
    },
    {
      "id": "CondIsJumping",
      "name": "Is Jumping",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a living entity is jumping. This condition does not work on players."
      ],
      "patterns": [
        "%living entities% (is|are) jumping",
        "%living entities% (isn't|is not|aren't|are not) jumping"
      ],
      "examples": [
        "on spawn of zombie:",
        "\twhile event-entity is not jumping:",
        "\t\twait 5 ticks",
        "\tpush event-entity upwards"
      ],
      "events": null,
      "requirements": [
        "Paper 1.15+"
      ],
      "keywords": null
    },
    {
      "id": "CondIsLeftHanded",
      "name": "Left Handed",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Checks if living entities or players are left or right-handed. Armor stands are neither right nor left-handed.",
        "Paper 1.17.1+ is required for non-player entities."
      ],
      "patterns": [
        "%living entities% (is|are) (left|right)( |-)handed",
        "%living entities% (isn't|is not|aren't|are not) (left|right)( |-)handed"
      ],
      "examples": [
        "on damage of player:",
        "\tif victim is left handed:",
        "\t\tcancel event"
      ],
      "events": null,
      "requirements": [
        "Paper 1.17.1+ (entities)"
      ],
      "keywords": null
    },
    {
      "id": "CondIsOccluding",
      "name": "Is Occluding",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item is a block and completely blocks vision."
      ],
      "patterns": [
        "%item types% (is|are) occluding",
        "%item types% (isn't|is not|aren't|are not) occluding"
      ],
      "examples": [
        "player's tool is occluding"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsOfType",
      "name": "Is of Type",
      "since": [
        "1.4"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item or an entity is of the given type. This is mostly useful for variables, as you can use the general 'is' condition otherwise (e.g. 'victim is a creeper')."
      ],
      "patterns": [
        "%item stacks/entities% (is|are) of type[s] %item types/entity types%",
        "%item stacks/entities% (isn't|is not|aren't|are not) of type[s] %item types/entity types%"
      ],
      "examples": [
        "tool is of type {selected type}",
        "victim is of type {villager type}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsOnGround",
      "name": "Is on Ground",
      "since": [
        "2.2-dev26"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity is on ground."
      ],
      "patterns": [
        "%entities% (is|are) on [the] ground",
        "%entities% (isn't|is not|aren't|are not) on [the] ground"
      ],
      "examples": [
        "player is not on ground"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsOnline",
      "name": "Is Online",
      "since": [
        "1.4"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player is online. The 'connected' pattern will return false once this player leaves the server, even if they rejoin. Be aware that using the 'connected' pattern with a variable will not have this special behavior. Use the direct event-player or other non-variable expression for best results."
      ],
      "patterns": [
        "%offline players% (is|are) (online|offline|connected)",
        "%offline players% (isn't|is not|aren't|are not) (online|offline|connected)"
      ],
      "examples": [
        "player is online",
        "player-argument is offline",
        "while player is connected:",
        "\twait 60 seconds",
        "\tsend \"hello!\" to player",
        "",
        "# The following will act like `{_player} is online`.",
        "# Using variables with `is connected` will not behave the same as with non-variables.",
        "while {_player} is connected:",
        "\tbroadcast \"online!\"",
        "\twait 1 tick"
      ],
      "events": null,
      "requirements": [
        "Paper 1.20+ (Connected)"
      ],
      "keywords": null
    },
    {
      "id": "CondIsOp",
      "name": "Is Operator",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player is a server operator."
      ],
      "patterns": [
        "%offline players% (is|are) [[a] server|an] op[erator][s]",
        "%offline players% (isn't|is not|aren't|are not) [[a] server|an] op[erator][s]"
      ],
      "examples": [
        "player is an operator"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsPassable",
      "name": "Is Passable",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a block is passable.",
        "A block is passable if it has no colliding parts that would prevent players from moving through it.",
        "Blocks like tall grass, flowers, signs, etc. are passable, but open doors, fence gates, trap doors, etc. are not because they still have parts that can be collided with."
      ],
      "patterns": [
        "%blocks% (is|are) passable",
        "%blocks% (isn't|is not|aren't|are not) passable"
      ],
      "examples": [
        "if player's targeted block is passable"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsPathfinding",
      "name": "Is Pathfinding",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Checks whether living entities are pathfinding.",
        "Can only be a living entity that is a Mob."
      ],
      "patterns": [
        "%living entities% (is|are) pathfinding [to[wards] %living entity/location%]",
        "%living entities% (isn't|is not|aren't|are not) pathfinding [to[wards] %living entity/location%]"
      ],
      "examples": [
        "make {_entity} pathfind to {_location} at speed 2",
        "while {_entity} is pathfinding",
        "\twait a second",
        "launch flickering trailing burst firework colored red at location of {_entity}",
        "subtract 10 from {defence::tower::health}",
        "clear entity within {_entity}"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "CondIsPersistent",
      "name": "Is Persistent",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Whether entities, players, or leaves are persistent.",
        "Persistence of entities is whether they are retained through server restarts.",
        "Persistence of leaves is whether they should decay when not connected to a log block within 6 meters.",
        "Persistence of players is if the player's playerdata should be saved when they leave the server. Players' persistence is reset back to 'true' when they join the server.",
        "Passengers inherit the persistence of their vehicle, meaning a persistent zombie put on a non-persistent chicken will become non-persistent. This does not apply to players.",
        "By default, all entities are persistent."
      ],
      "patterns": [
        "%entities/blocks% (is|are) persistent",
        "%entities/blocks% (isn't|is not|aren't|are not) persistent"
      ],
      "examples": [
        "on spawn:",
        "\tif event-entity is persistent:",
        "\t\tmake event-entity not persistent"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsPlayingDead",
      "name": "Is Playing Dead",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Checks to see if an axolotl is playing dead."
      ],
      "patterns": [
        "%living entities% (is|are) playing dead",
        "%living entities% (isn't|is not|aren't|are not) playing dead"
      ],
      "examples": [
        "if last spawned axolotl is playing dead:",
        "\tmake last spawned axolotl stop playing dead"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsPoisoned",
      "name": "Is Poisoned",
      "since": [
        "1.4.4"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity is poisoned."
      ],
      "patterns": [
        "%living entities% (is|are) poisoned",
        "%living entities% (isn't|is not|aren't|are not) poisoned"
      ],
      "examples": [
        "player is poisoned:",
        "\tcure the player from poison",
        "\tmessage \"You have been cured!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsResonating",
      "name": "Bell Is Resonating",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Checks to see if a bell is currently resonating.",
        "A bell will start resonating five game ticks after being rung, and will continue to resonate for 40 game ticks."
      ],
      "patterns": [
        "%blocks% (is|are) resonating",
        "%blocks% (isn't|is not|aren't|are not) resonating"
      ],
      "examples": [
        "target block is resonating"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.19.4+"
      ],
      "keywords": null
    },
    {
      "id": "CondIsRiding",
      "name": "Is Riding",
      "since": [
        "2.0, 2.11 (entities)"
      ],
      "deprecated": false,
      "description": [
        "Tests whether an entity is riding any entity, a specific entity type, or a specific entity."
      ],
      "patterns": [
        "%entities% (is|are) riding [%entity types/entities%]",
        "%entities% (isn't|is not|aren't|are not) riding [%entity types/entities%]"
      ],
      "examples": [
        "if player is riding:",
        "if player is riding an entity:",
        "if player is riding a saddled pig:",
        "if player is riding last spawned horse:"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsRinging",
      "name": "Bell Is Ringing",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Checks to see if a bell is currently ringing. A bell typically rings for 50 game ticks."
      ],
      "patterns": [
        "%blocks% (is|are) ringing",
        "%blocks% (isn't|is not|aren't|are not) ringing"
      ],
      "examples": [
        "target block is ringing"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.19.4+"
      ],
      "keywords": null
    },
    {
      "id": "CondIsRiptiding",
      "name": "Is Riptiding",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Checks to see if an entity is currently using the Riptide enchantment."
      ],
      "patterns": [
        "%living entities% (is|are) riptiding",
        "%living entities% (isn't|is not|aren't|are not) riptiding"
      ],
      "examples": [
        "target entity is riptiding"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsSaddled",
      "name": "Is Saddled",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a given entity (horse or steerable) is saddled.",
        "If 'properly' is used, this will only return true if the entity is wearing specifically a saddle item."
      ],
      "patterns": [
        "%living entities% (is|are) [properly] saddled",
        "%living entities% (isn't|is not|aren't|are not) [properly] saddled"
      ],
      "examples": [
        "send whether {_horse} is saddled"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsScreaming",
      "name": "Is Screaming",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Check whether a goat or enderman is screaming."
      ],
      "patterns": [
        "%living entities% (is|are) screaming",
        "%living entities% (isn't|is not|aren't|are not) screaming"
      ],
      "examples": [
        "\tif last spawned goat is not screaming:\n\t\tmake last spawned goat scream\n",
        "\tif {_enderman} is screaming:\n\t\tforce {_enderman} to stop screaming\n"
      ],
      "events": null,
      "requirements": [
        "Paper (endermen)"
      ],
      "keywords": null
    },
    {
      "id": "CondIsSedated",
      "name": "Beehive Is Sedated",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Checks if a beehive is sedated from a nearby campfire."
      ],
      "patterns": [
        "%blocks% (is|are) sedated",
        "%blocks% (isn't|is not|aren't|are not) sedated"
      ],
      "examples": [
        "if {_beehive} is sedated:"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsSheared",
      "name": "Entity Is Sheared",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Checks whether entities are sheared. This condition only works on cows, sheep and snowmen for versions below 1.19.4."
      ],
      "patterns": [
        "%living entities% (is|are) (sheared|shorn)",
        "%living entities% (isn't|is not|aren't|are not) (sheared|shorn)"
      ],
      "examples": [
        "if targeted entity of player is sheared:",
        "\tsend \"This entity has nothing left to shear!\" to player"
      ],
      "events": null,
      "requirements": [
        "MC 1.13+ (cows, sheep & snowmen), Paper 1.19.4+ (all shearable entities)"
      ],
      "keywords": null
    },
    {
      "id": "CondIsSilent",
      "name": "Is Silent",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity is silent i.e. its sounds are disabled."
      ],
      "patterns": [
        "%entities% (is|are) silent",
        "%entities% (isn't|is not|aren't|are not) silent"
      ],
      "examples": [
        "target entity is silent"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsSkriptCommand",
      "name": "Is a Skript command",
      "since": [
        "2.6"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a command/string is a custom Skript command."
      ],
      "patterns": [
        "%text% (is|are) [a] s(k|c)ript (command|cmd)",
        "%text% (isn't|is not|aren't|are not) [a] s(k|c)ript (command|cmd)"
      ],
      "examples": [
        "# Example 1",
        "on command:",
        "\tcommand is a skript command",
        "",
        "# Example 2",
        "\"sometext\" is a skript command"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsSleeping",
      "name": "Is Sleeping",
      "since": [
        "1.4.4, 2.11 (living entities)"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity is sleeping."
      ],
      "patterns": [
        "%living entities% (is|are) sleeping",
        "%living entities% (isn't|is not|aren't|are not) sleeping"
      ],
      "examples": [
        "if player is sleeping:",
        "\tmake player wake up without spawn location update",
        "",
        "if last spawned fox is sleeping:",
        "\tmake last spawned fox stop sleeping"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsSlimeChunk",
      "name": "Is Slime Chunk",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Tests whether a chunk is a so-called slime chunk.",
        "Slimes can generally spawn in the swamp biome and in slime chunks.",
        "For more info, see <a href='https://minecraft.wiki/w/Slime#.22Slime_chunks.22'>the Minecraft wiki</a>."
      ],
      "patterns": [
        "%chunk% (is|are) ([a] slime chunk|slime chunks|slimey)",
        "%chunk% (isn't|is not|aren't|are not) ([a] slime chunk|slime chunks|slimey)"
      ],
      "examples": [
        "command /slimey:",
        "\ttrigger:",
        "\t\tif chunk at player is a slime chunk:",
        "\t\t\tsend \"Yeah, it is!\"",
        "\t\telse:",
        "\t\t\tsend \"Nope, it isn't\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsSneaking",
      "name": "Is Sneaking",
      "since": [
        "1.4.4"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player is sneaking."
      ],
      "patterns": [
        "%players% (is|are) sneaking",
        "%players% (isn't|is not|aren't|are not) sneaking"
      ],
      "examples": [
        "# prevent mobs from seeing sneaking players if they are at least 4 meters apart",
        "on target:",
        "\ttarget is sneaking",
        "\tdistance of target and the entity is bigger than 4",
        "\tcancel the event"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsSolid",
      "name": "Is Solid",
      "since": [
        "2.2-dev36"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item is solid."
      ],
      "patterns": [
        "%item types% (is|are) solid",
        "%item types% (isn't|is not|aren't|are not) solid"
      ],
      "examples": [
        "grass block is solid",
        "player's tool isn't solid"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsSprinting",
      "name": "Is Sprinting",
      "since": [
        "1.4.4"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a player is sprinting."
      ],
      "patterns": [
        "%players% (is|are) sprinting",
        "%players% (isn't|is not|aren't|are not) sprinting"
      ],
      "examples": [
        "player is not sprinting"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsStackable",
      "name": "Is Stackable",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item is stackable."
      ],
      "patterns": [
        "%item stacks% (is|are) stackable",
        "%item stacks% (isn't|is not|aren't|are not) stackable"
      ],
      "examples": [
        "diamond axe is stackable",
        "birch wood is stackable",
        "torch is stackable"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsSwimming",
      "name": "Is Swimming",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a living entity is swimming."
      ],
      "patterns": [
        "%living entities% (is|are) swimming",
        "%living entities% (isn't|is not|aren't|are not) swimming"
      ],
      "examples": [
        "player is swimming"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsTameable",
      "name": "Is Tameable",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Check if an entity is tameable."
      ],
      "patterns": [
        "%living entities% (is|are) tameable",
        "%living entities% (isn't|is not|aren't|are not) tameable"
      ],
      "examples": [
        "on damage:",
        "\tif victim is tameable:",
        "\t\tcancel event"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsTamed",
      "name": "Is Tamed",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Check if a tameable entity is tamed (horse, parrot, cat, etc.)."
      ],
      "patterns": [
        "%entities% (is|are) (tamed|domesticated)",
        "%entities% (isn't|is not|aren't|are not) (tamed|domesticated)"
      ],
      "examples": [
        "send true if {_horse} is tamed",
        "tame {_horse} if {_horse} is untamed"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsTicking",
      "name": "Is Ticking",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks if an entity is ticking."
      ],
      "patterns": [
        "%entities% (is|are) ticking",
        "%entities% (isn't|is not|aren't|are not) ticking"
      ],
      "examples": [
        "send true if target is ticking"
      ],
      "events": null,
      "requirements": [
        "PaperMC"
      ],
      "keywords": null
    },
    {
      "id": "CondIsTransparent",
      "name": "Is Transparent",
      "since": [
        "2.2-dev36"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item is transparent. Note that this condition may not work for all blocks, due to the transparency list used by Spigot not being completely accurate."
      ],
      "patterns": [
        "%item types% (is|are) transparent",
        "%item types% (isn't|is not|aren't|are not) transparent"
      ],
      "examples": [
        "player's tool is transparent."
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsUnbreakable",
      "name": "Is Unbreakable",
      "since": [
        "2.5.1, 2.9.0 (breakable)"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item is unbreakable."
      ],
      "patterns": [
        "%item types% (is|are) [un]breakable",
        "%item types% (isn't|is not|aren't|are not) [un]breakable"
      ],
      "examples": [
        "if event-item is unbreakable:",
        "\tsend \"This item is unbreakable!\" to player",
        "if tool of {_p} is breakable:",
        "\tsend \"Your tool is breakable!\" to {_p}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsValid",
      "name": "Is Valid",
      "since": [
        "2.7, 2.10 (Scripts & Configs)"
      ],
      "deprecated": false,
      "description": [
        "Checks whether something (an entity, a script, a config, etc.) is valid.",
        "An invalid entity may have died or de-spawned for some other reason.",
        "An invalid script reference may have been reloaded, moved or disabled since."
      ],
      "patterns": [
        "%entities/scripts% (is|are) valid",
        "%entities/scripts% (isn't|is not|aren't|are not) valid"
      ],
      "examples": [
        "if event-entity is valid"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsVectorNormalized",
      "name": "Is Normalized",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a vector is normalized i.e. length of 1"
      ],
      "patterns": [
        "%vectors% (is|are) normalized",
        "%vectors% (isn't|is not|aren't|are not) normalized"
      ],
      "examples": [
        "vector of player's location is normalized"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsWearing",
      "name": "Is Wearing",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity is wearing some items (usually armor)."
      ],
      "patterns": [
        "%living entities% (is|are) wearing %item types%",
        "%living entities% (isn't|is not|aren't|are not) wearing %item types%"
      ],
      "examples": [
        "player is wearing an iron chestplate and iron leggings",
        "target is wearing wolf armor"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondItemDespawn",
      "name": "Will Despawn",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Checks if the dropped item will be despawned naturally through Minecraft's timer."
      ],
      "patterns": [
        "%itementities% will (despawn naturally|naturally despawn)",
        "%itementities% (will (not|neither)|won't) (despawn naturally|naturally despawn)"
      ],
      "examples": [
        "if all dropped items can despawn naturally:",
        "\tprevent all dropped items from naturally despawning"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondItemDespawn-2",
      "name": "Will Despawn",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Checks if the dropped item will be despawned naturally through Minecraft's timer."
      ],
      "patterns": [
        "%itementities% can (despawn naturally|naturally despawn)",
        "%itementities% (can't|cannot|can not) (despawn naturally|naturally despawn)"
      ],
      "examples": [
        "if all dropped items can despawn naturally:",
        "\tprevent all dropped items from naturally despawning"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondItemEnchantmentGlint",
      "name": "Item Has Enchantment Glint Override",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item has the enchantment glint overridden, or is forced to glint or not."
      ],
      "patterns": [
        "%item types% (has|have) enchantment glint overrid(den|e)",
        "%item types% (doesn't|does not|do not|don't) have enchantment glint overrid(den|e)"
      ],
      "examples": [
        "if the player's tool has the enchantment glint override",
        "\tsend \"Your tool has the enchantment glint override.\" to player",
        "",
        "if {_item} is forced to glint:",
        "\tsend \"This item is forced to glint.\" to player",
        "else if {_item} is forced to not glint:",
        "\tsend \"This item is forced to not glint.\" to player",
        "else:",
        "\tsend \"This item does not have any glint override.\" to player"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.20.5+"
      ],
      "keywords": null
    },
    {
      "id": "CondItemEnchantmentGlint-2",
      "name": "Item Has Enchantment Glint Override",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item has the enchantment glint overridden, or is forced to glint or not."
      ],
      "patterns": [
        "%item types% (is|are) forced to [not] glint",
        "%item types% (isn't|is not|aren't|are not) forced to [not] glint"
      ],
      "examples": [
        "if the player's tool has the enchantment glint override",
        "\tsend \"Your tool has the enchantment glint override.\" to player",
        "",
        "if {_item} is forced to glint:",
        "\tsend \"This item is forced to glint.\" to player",
        "else if {_item} is forced to not glint:",
        "\tsend \"This item is forced to not glint.\" to player",
        "else:",
        "\tsend \"This item does not have any glint override.\" to player"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.20.5+"
      ],
      "keywords": null
    },
    {
      "id": "CondLeashed",
      "name": "Is Leashed",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Checks to see if an entity is currently leashed."
      ],
      "patterns": [
        "%living entities% (is|are) leashed",
        "%living entities% (isn't|is not|aren't|are not) leashed"
      ],
      "examples": [
        "target entity is leashed"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondLidState",
      "name": "Lid Is Open/Closed",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Check to see whether lidded blocks (chests, shulkers, etc.) are open or closed."
      ],
      "patterns": [
        "[the] lid[s] of %blocks% (is|are) (open[ed]|close[d])",
        "[the] lid[s] of %blocks% (isn't|is not|aren't|are not) (open[ed]|close[d])",
        "%blocks%'[s] lid[s] (is|are) (open[ed]|close[d])",
        "%blocks%'[s] lid[s] (isn't|is not|aren't|are not) (open[ed]|close[d])"
      ],
      "examples": [
        "if the lid of {_chest} is closed:",
        "\topen the lid of {_block}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondPandaIsOnBack",
      "name": "Panda Is On Its Back",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Whether a panda is on its back."
      ],
      "patterns": [
        "%living entities% (is|are) on (its|their) back[s]",
        "%living entities% (isn't|is not|aren't|are not) on (its|their) back[s]"
      ],
      "examples": [
        "if last spawned panda is on its back:\n\tmake last spawned panda get off its back\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondPandaIsRolling",
      "name": "Panda Is Rolling",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Whether a panda is rolling."
      ],
      "patterns": [
        "%living entities% (is|are) rolling",
        "%living entities% (isn't|is not|aren't|are not) rolling"
      ],
      "examples": [
        "if last spawned panda is rolling:\n\tmake last spawned panda stop rolling\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondPandaIsScared",
      "name": "Panda Is Scared",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Whether a panda is scared."
      ],
      "patterns": [
        "%living entities% (is|are) scared",
        "%living entities% (isn't|is not|aren't|are not) scared"
      ],
      "examples": [
        "if last spawned panda is scared:"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondPandaIsSneezing",
      "name": "Panda Is Sneezing",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Whether a panda is sneezing."
      ],
      "patterns": [
        "%living entities% (is|are) sneezing",
        "%living entities% (isn't|is not|aren't|are not) sneezing"
      ],
      "examples": [
        "if last spawned panda is sneezing:\n\tmake last spawned panda stop sneezing\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondStriderIsShivering",
      "name": "Strider Is Shivering",
      "since": [
        "INSERT VERSION"
      ],
      "deprecated": false,
      "description": [
        "Whether a strider is shivering."
      ],
      "patterns": [
        "%living entities% (is|are) shivering",
        "%living entities% (isn't|is not|aren't|are not) shivering"
      ],
      "examples": [
        "if last spawned strider is shivering:\n\tmake last spawned strider stop shivering\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondWithinRadius",
      "name": "Is Within Radius",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Checks whether a location is within a certain radius of another location."
      ],
      "patterns": [
        "%locations% (is|are) within %number% (block|metre|meter)[s] (around|of) %locations%",
        "%locations% (isn't|is not|aren't|are not) within %number% (block|metre|meter)[s] (around|of) %locations%"
      ],
      "examples": [
        "on damage:",
        "\tif attacker's location is within 10 blocks around {_spawn}:",
        "\t\tcancel event",
        "\t\tsend \"You can't PVP in spawn.\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsInOpenWater",
      "name": "Is Fish Hook in Open Water",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether the fish hook is in open water.",
        "Open water is defined by a 5x4x5 area of water, air and lily pads. If in open water, treasure items may be caught."
      ],
      "patterns": [
        "%entities% (is|are) in open water[s]",
        "%entities% (isn't|is not|aren't|are not) in open water[s]"
      ],
      "examples": [
        "on fish catch:",
        "\tif fish hook is in open water:",
        "\t\tsend \"You will catch a shark soon!\""
      ],
      "events": [
        "Fishing"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondCanAge",
      "name": "Can Age",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether or not an entity will be able to age/grow up."
      ],
      "patterns": [
        "%living entities% can (age|grow (up|old[er]))",
        "%living entities% (can't|cannot|can not) (age|grow (up|old[er]))"
      ],
      "examples": [
        "on breeding:",
        "\tentity can't age",
        "\tbroadcast \"An immortal has been born!\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondCanBreed",
      "name": "Can Breed",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether or not a living entity can be bred."
      ],
      "patterns": [
        "%living entities% can (breed|be bred)",
        "%living entities% (can't|cannot|can not) (breed|be bred)"
      ],
      "examples": [
        "on right click on living entity:",
        "\tevent-entity can't breed",
        "\tsend \"Turns out %event-entity% is not breedable. Must be a Skript user!\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsAdult",
      "name": "Is Adult",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether or not a living entity is an adult."
      ],
      "patterns": [
        "%living entities% (is|are) [an] adult",
        "%living entities% (isn't|is not|aren't|are not) [an] adult"
      ],
      "examples": [
        "on drink:",
        "\tevent-entity is not an adult",
        "\tkill event-entity"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsBaby",
      "name": "Is Baby",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether or not a living entity is a baby."
      ],
      "patterns": [
        "%living entities% (is|are) a (child|baby)",
        "%living entities% (isn't|is not|aren't|are not) a (child|baby)"
      ],
      "examples": [
        "on drink:",
        "\tevent-entity is a baby",
        "\tkill event-entity"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsInLove",
      "name": "Is In Love",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether or not a living entity is in love."
      ],
      "patterns": [
        "%living entities% (is|are) in lov(e|ing) [state|mode]",
        "%living entities% (isn't|is not|aren't|are not) in lov(e|ing) [state|mode]"
      ],
      "examples": [
        "on spawn of living entity:",
        "\tif entity is in love:",
        "broadcast \"That was quick!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondTextDisplaySeeThroughBlocks",
      "name": "Text Display Visible Through Blocks",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns whether text displays can be seen through blocks or not."
      ],
      "patterns": [
        "%displays% (is|are) visible through (blocks|walls)",
        "%displays% (isn't|is not|aren't|are not) visible through (blocks|walls)"
      ],
      "examples": [
        "if last spawned text display is visible through walls:",
        "\tprevent last spawned text display from being visible through walls"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsTagged",
      "name": "Is Tagged",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an item, block, entity, or entitydata is tagged with the given tag."
      ],
      "patterns": [
        "%item types/entities/entity types% (is|are) tagged (as|with) %minecraft tags%",
        "%item types/entities/entity types% (isn't|is not|aren't|are not) tagged (as|with) %minecraft tags%"
      ],
      "examples": [
        "if player's tool is tagged with minecraft tag \"enchantable/sharp_weapon\":",
        "\tenchant player's tool with sharpness 1",
        "",
        "if all logs are tagged with tag \"minecraft:logs\""
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "blocks",
        "minecraft tag",
        "type",
        "category"
      ]
    },
    {
      "id": "CondHasLootTable",
      "name": "Has Loot Table",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity or block has a loot table. The loot tables of chests will be deleted when the chest is opened or broken."
      ],
      "patterns": [
        "%blocks/entities% (has|have) [a] loot[ ]table",
        "%blocks/entities% (doesn't|does not|do not|don't) have [a] loot[ ]table"
      ],
      "examples": [
        "set event-block to chest",
        "if event-block has a loot table:",
        "\t# this will never happen, because it doesn't have a loot table.",
        "",
        "set loot table of event-block to \"minecraft:chests/simple_dungeon\"",
        "",
        "if event-block has a loot table:",
        "\t# this will happen, because it now has a loot table."
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondIsLootable",
      "name": "Is Lootable",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Checks whether an entity or block is lootable. Lootables are entities or blocks that can have a loot table."
      ],
      "patterns": [
        "%blocks/entities% (is|are) lootable",
        "%blocks/entities% (isn't|is not|aren't|are not) lootable"
      ],
      "examples": [
        "spawn a pig at event-location",
        "set {_pig} to last spawned entity",
        "if {_pig} is lootable:",
        "\tset loot table of {_pig} to \"minecraft:entities/cow\"",
        "\t# the pig will now drop the loot of a cow when killed, because it is indeed a lootable entity.",
        "set block at event-location to chest",
        "if block at event-location is lootable:",
        "\tset loot table of block at event-location to \"minecraft:chests/simple_dungeon\"",
        "\t# the chest will now generate the loot of a simple dungeon when opened, because it is indeed a lootable block.",
        "set block at event-location to white wool",
        "if block at event-location is lootable:",
        "\t# uh oh, nothing will happen because a wool is not a lootable block."
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "CondCompare",
      "name": "Comparison",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "A very general condition, it simply compares two values. Usually you can only compare for equality (e.g. block is/isn't of &lt;type&gt;), but some values can also be compared using greater than/less than. In that case you can also test for whether an object is between two others.",
        "Note: This is the only element where not all patterns are shown. It has actually another two sets of similar patters, but with <code>(was|were)</code> or <code>will be</code> instead of <code>(is|are)</code> respectively, which check different <a href='expressions.html#ExprTimeState'>time states</a> of the first expression."
      ],
      "patterns": [
        "[(neither)] %objects% ((is|are)[(n't| not| neither)] ((greater|more|higher|bigger|larger) than|above)|>) %objects%",
        "[(neither)] %objects% ((is|are)[(n't| not| neither)] (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as)|>=) %objects%",
        "[(neither)] %objects% ((is|are)[(n't| not| neither)] ((less|smaller|lower) than|below)|<) %objects%",
        "[(neither)] %objects% ((is|are)[(n't| not| neither)] (less|smaller|lower|below) [than] or (equal to|the same as)|<=) %objects%",
        "[(neither)] %objects% ((is|are) (not|neither)|isn't|aren't|!=) [equal to] %objects%",
        "[(neither)] %objects% (is|are|=) [(equal to|the same as)] %objects%",
        "[(neither)] %objects% (is|are) between %objects% and %objects%",
        "[(neither)] %objects% (is not|are not|isn't|aren't) between %objects% and %objects%",
        "[(neither)] %objects% (was|were)[(n't| not| neither)] ((greater|more|higher|bigger|larger) than|above) %objects%",
        "[(neither)] %objects% (was|were)[(n't| not| neither)] (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as) %objects%",
        "[(neither)] %objects% (was|were)[(n't| not| neither)] ((less|smaller|lower) than|below) %objects%",
        "[(neither)] %objects% (was|were)[(n't| not| neither)] (less|smaller|lower|below) [than] or (equal to|the same as) %objects%",
        "[(neither)] %objects% ((was|were) (not|neither)|wasn't|weren't) [equal to] %objects%",
        "[(neither)] %objects% (was|were) [(equal to|the same as)] %objects%",
        "[(neither)] %objects% (was|were) between %objects% and %objects%",
        "[(neither)] %objects% (was not|were not|wasn't|weren't) between %objects% and %objects%",
        "[(neither)] %objects% (will be|(will (not|neither) be|won't be)) ((greater|more|higher|bigger|larger) than|above) %objects%",
        "[(neither)] %objects% (will be|(will (not|neither) be|won't be)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as) %objects%",
        "[(neither)] %objects% (will be|(will (not|neither) be|won't be)) ((less|smaller|lower) than|below) %objects%",
        "[(neither)] %objects% (will be|(will (not|neither) be|won't be)) (less|smaller|lower|below) [than] or (equal to|the same as) %objects%",
        "[(neither)] %objects% ((will (not|neither) be|won't be)|(isn't|aren't|is not|are not) (turning|changing) [in]to) [equal to] %objects%",
        "[(neither)] %objects% (will be [(equal to|the same as)]|(is|are) (turning|changing) [in]to) %objects%",
        "[(neither)] %objects% will be between %objects% and %objects%",
        "[(neither)] %objects% (will not be|won't be) between %objects% and %objects%"
      ],
      "examples": [
        "the clicked block is a stone slab or a double stone slab",
        "time in the player's world is greater than 8:00",
        "the creature is not an enderman or an ender dragon"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    }
  ],
  "effects": [
    {
      "id": "Delay",
      "name": "Delay",
      "since": [
        "1.4"
      ],
      "deprecated": false,
      "description": [
        "Delays the script's execution by a given timespan. Please note that delays are not persistent, e.g. trying to create a tempban script with <code>ban player → wait 7 days → unban player</code> will not work if you restart your server anytime within these 7 days. You also have to be careful even when using small delays!"
      ],
      "patterns": [
        "(wait|halt) [for] %time span%"
      ],
      "examples": [
        "wait 2 minutes",
        "halt for 5 minecraft hours",
        "wait a tick"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffActionBar",
      "name": "Action Bar",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Sends an action bar message to the given player(s)."
      ],
      "patterns": [
        "send [the] action[ ]bar [with text] %text% [to %players%]"
      ],
      "examples": [
        "send action bar \"Hello player!\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffAllayCanDuplicate",
      "name": "Allay Duplicate",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Set whether an allay can or cannot duplicate itself.",
        "This is not the same as breeding allays."
      ],
      "patterns": [
        "allow %living entities% to (duplicate|clone)",
        "prevent %living entities% from (duplicating|cloning)"
      ],
      "examples": [
        "allow all allays to duplicate",
        "prevent all allays from duplicating"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffAllayDuplicate",
      "name": "Make Allay Duplicate",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make an allay duplicate itself.",
        "This effect will always make an allay duplicate regardless of whether the duplicate attribute is disabled."
      ],
      "patterns": [
        "make %living entities% (duplicate|clone)"
      ],
      "examples": [
        "make all allays duplicate"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffApplyBoneMeal",
      "name": "Apply Bone Meal",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Applies bone meal to a crop, sapling, or composter"
      ],
      "patterns": [
        "apply [%number%] bone[ ]meal[s] [to %blocks%]"
      ],
      "examples": [
        "apply 3 bone meal to event-block"
      ],
      "events": null,
      "requirements": [
        "MC 1.16.2+"
      ],
      "keywords": null
    },
    {
      "id": "EffBan",
      "name": "Ban",
      "since": [
        "1.4, 2.1.1 (ban reason), 2.5 (timespan), 2.9.0 (kick)"
      ],
      "deprecated": false,
      "description": [
        "Bans or unbans a player or an IP address.",
        "If a reason is given, it will be shown to the player when they try to join the server while banned.",
        "A length of ban may also be given to apply a temporary ban. If it is absent for any reason, a permanent ban will be used instead.",
        "We recommend that you test your scripts so that no accidental permanent bans are applied.",
        "",
        "Note that banning people does not kick them from the server.",
        "You can optionally use 'and kick' or consider using the <a href='effects.html#EffKick'>kick effect</a> after applying a ban."
      ],
      "patterns": [
        "ban [and kick] %texts/offline players% [(by reason of|because [of]|on account of|due to) %text%] [for %time span%]",
        "unban %texts/offline players%",
        "ban [and kick] %players% by IP [(by reason of|because [of]|on account of|due to) %text%] [for %time span%]",
        "unban %players% by IP",
        "IP(-| )ban [and kick] %players% [(by reason of|because [of]|on account of|due to) %text%] [for %time span%]",
        "(IP(-| )unban|un[-]IP[-]ban) %players%"
      ],
      "examples": [
        "unban player",
        "ban \"127.0.0.1\"",
        "IP-ban the player because \"he is an idiot\"",
        "ban player due to \"inappropriate language\" for 2 days",
        "ban and kick player due to \"inappropriate language\" for 2 days"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffBlockUpdate",
      "name": "Update Block",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Updates the blocks by setting them to a selected block",
        "Using 'without physics' will not send updates to the surrounding blocks of the blocks being set.",
        "Example: Updating a block next to a sand block in the air 'without physics' will not cause the sand block to fall."
      ],
      "patterns": [
        "update %blocks% (as|to be) %block data% [without [neighbo[u]r[ing]|adjacent] [physic[s]] update[s]]"
      ],
      "examples": [
        "update {_blocks::*} as gravel",
        "update {_blocks::*} to be sand without physics updates",
        "update {_blocks::*} as stone without neighbouring updates"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffBreakNaturally",
      "name": "Break Block",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Breaks the block and spawns items as if a player had mined it",
        "\nYou can add a tool, which will spawn items based on how that tool would break the block ",
        "(ie: When using a hand to break stone, it drops nothing, whereas with a pickaxe it drops cobblestone)"
      ],
      "patterns": [
        "break %blocks% [naturally] [using %item type%]"
      ],
      "examples": [
        "on right click:",
        "\tbreak clicked block naturally",
        "loop blocks in radius 10 around player:",
        "\tbreak loop-block using player's tool",
        "loop blocks in radius 10 around player:",
        "\tbreak loop-block naturally using diamond pickaxe"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffBroadcast",
      "name": "Broadcast",
      "since": [
        "1.0, 2.6 (broadcasting objects), 2.6.1 (using advanced formatting)"
      ],
      "deprecated": false,
      "description": [
        "Broadcasts a message to the server."
      ],
      "patterns": [
        "broadcast %objects% [(to|in) %worlds%]"
      ],
      "examples": [
        "broadcast \"Welcome %player% to the server!\"",
        "broadcast \"Woah! It's a message!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffCancelCooldown",
      "name": "Cancel Command Cooldown",
      "since": [
        "2.2-dev34"
      ],
      "deprecated": false,
      "description": [
        "Only usable in commands. Makes it so the current command usage isn't counted towards the cooldown."
      ],
      "patterns": [
        "(cancel|ignore) [the] [current] [command] cooldown",
        "un(cancel|ignore) [the] [current] [command] cooldown"
      ],
      "examples": [
        "command /nick &lt;text&gt;:",
        "\texecutable by: players",
        "\tcooldown: 10 seconds",
        "\ttrigger:",
        "\t\tif length of arg-1 is more than 16:",
        "\t\t\t# Makes it so that invalid arguments don't make you wait for the cooldown again",
        "\t\t\tcancel the cooldown",
        "\t\t\tsend \"Your nickname may be at most 16 characters.\"",
        "\t\t\tstop",
        "\t\tset the player's display name to arg-1"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffCancelDrops",
      "name": "Cancel Drops",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Cancels drops of items or experiences in a death or block break event. Please note that this doesn't keep items or experiences of a dead player. If you want to do that, use the <a href='effects.html#EffKeepInventory'>Keep Inventory / Experience</a> effect."
      ],
      "patterns": [
        "(cancel|clear|delete) [the] drops [of (items|[e]xp[erience][s])]",
        "(cancel|clear|delete) [the] (item|[e]xp[erience]) drops"
      ],
      "examples": [
        "on death of a zombie:",
        "\tif name of the entity is \"&cSpecial\":",
        "\t\tcancel drops of items",
        "",
        "on break of a coal ore:",
        "\tcancel the experience drops"
      ],
      "events": [
        "death",
        "break / mine"
      ],
      "requirements": [
        "1.12.2 or newer (cancelling item drops of blocks)"
      ],
      "keywords": null
    },
    {
      "id": "EffCancelEvent",
      "name": "Cancel Event",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Cancels the event (e.g. prevent blocks from being placed, or damage being taken)."
      ],
      "patterns": [
        "cancel [the] event",
        "uncancel [the] event"
      ],
      "examples": [
        "on damage:",
        "\tvictim is a player",
        "\tvictim has the permission \"skript.god\"",
        "\tcancel the event"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffCancelItemUse",
      "name": "Cancel Active Item",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Interrupts the action entities may be trying to complete.",
        "For example, interrupting eating, or drawing back a bow."
      ],
      "patterns": [
        "(cancel|interrupt) [the] us[ag]e of %living entities%'[s] [active|current] item"
      ],
      "examples": [
        "on damage of player:",
        "\tif the victim's active tool is a bow:",
        "\t\tinterrupt the usage of the player's active item"
      ],
      "events": null,
      "requirements": [
        "Paper 1.16+"
      ],
      "keywords": null
    },
    {
      "id": "EffChange",
      "name": "Change: Set/Add/Remove/Remove All/Delete/Reset",
      "since": [
        "1.0 (set, add, remove, delete), 2.0 (remove all)"
      ],
      "deprecated": false,
      "description": [
        "A general effect that can be used for changing many <a href='./expressions'>expressions</a>.",
        "Some expressions can only be set and/or deleted, while others can also have things added to or removed from them."
      ],
      "patterns": [
        "(add|give) %objects% to %~objects%",
        "increase %~objects% by %objects%",
        "give %~objects% %objects%",
        "set %~objects% to %objects%",
        "remove (all|every) %objects% from %~objects%",
        "(remove|subtract) %objects% from %~objects%",
        "(reduce|decrease) %~objects% by %objects%",
        "(delete|clear) %~objects%",
        "reset %~objects%"
      ],
      "examples": [
        "# Set",
        "Set the player's display name to \"&lt;red&gt;%name of player%\"",
        "set the block above the victim to lava",
        "# Add",
        "add 2 to the player's health # preferably use '<a href='#EffHealth'>heal</a>' for this",
        "add argument to {blacklist::*}",
        "give a diamond pickaxe of efficiency 5 to the player",
        "increase the data value of the clicked block by 1",
        "# Remove",
        "remove 2 pickaxes from the victim",
        "subtract 2.5 from {points::%uuid of player%}",
        "# Remove All",
        "remove every iron tool from the player",
        "remove all minecarts from {entitylist::*}",
        "# Delete",
        "delete the block below the player",
        "clear drops",
        "delete {variable}",
        "# Reset",
        "reset walk speed of player",
        "reset chunk at the targeted block"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffCharge",
      "name": "Charge Entity",
      "since": [
        "2.5, 2.10 (wither skulls)"
      ],
      "deprecated": false,
      "description": [
        "Charges or uncharges a creeper or wither skull. A creeper is charged when it has been struck by lightning."
      ],
      "patterns": [
        "make %entities% [(un|not |non[-| ])](charged|powered)",
        "[un](charge|power) %entities%"
      ],
      "examples": [
        "on spawn of creeper:",
        "\tcharge the event-entity"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffClearEntityStorage",
      "name": "Clear Entity Storage",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Clear the stored entities of an entity block storage (i.e. beehive)."
      ],
      "patterns": [
        "(clear|empty) the (stored entities|entity storage) of %blocks%"
      ],
      "examples": [
        "clear the stored entities of {_beehive}"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "EffColorItems",
      "name": "Color Items",
      "since": [
        "2.0, 2.2-dev26 (maps and potions)"
      ],
      "deprecated": false,
      "description": [
        "Colors items in a given <a href='classes.html#color'>color</a>. You can also use RGB codes if you feel limited with the 16 default colors. RGB codes are three numbers from 0 to 255 in the order <code>(red, green, blue)</code>, where <code>(0,0,0)</code> is black and <code>(255,255,255)</code> is white. Armor is colorable for all Minecraft versions. With Minecraft 1.11 or newer you can also color potions and maps. Note that the colors might not look exactly how you'd expect."
      ],
      "patterns": [
        "(dye|colo[u]r|paint) %item types% %color%",
        "(dye|colo[u]r|paint) %item types% \\(%number%, %number%, %number%\\)"
      ],
      "examples": [
        "dye player's helmet blue",
        "color the player's tool red"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffCommand",
      "name": "Command",
      "since": [
        "1.0, 2.8.0 (bungeecord command)"
      ],
      "deprecated": false,
      "description": [
        "Executes a command. This can be useful to use other plugins in triggers.",
        "If the command is a bungeecord side command, you can use the [bungeecord] option to execute command on the proxy."
      ],
      "patterns": [
        "[execute] [the] [bungee[cord]] command[s] %texts% [by %command senders%]",
        "[execute] [the] %command senders% [bungee[cord]] command[s] %texts%",
        "(let|make) %command senders% execute [[the] [bungee[cord]] command[s]] %texts%"
      ],
      "examples": [
        "make player execute command \"/home\"",
        "execute console command \"/say Hello everyone!\"",
        "execute player bungeecord command \"/alert &6Testing Announcement!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffCommandBlockConditional",
      "name": "Conditional / Unconditional",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Sets whether the provided command blocks are conditional or not."
      ],
      "patterns": [
        "make command block[s] %blocks% [(un|not )]conditional"
      ],
      "examples": [
        "make command block {_block} conditional",
        "make command block {_block} unconditional if {_block} is conditional"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffConnect",
      "name": "Connect",
      "since": [
        "2.3, 2.10 (transfer)"
      ],
      "deprecated": false,
      "description": [
        "Connect a player to a server running on your proxy, or any server supporting transfers. Read below for more information.",
        "If the server is running Minecraft 1.20.5 or above, you may specify an IP and Port to transfer a player over to that server.",
        "When transferring players using an IP, the transfer will not complete if the `accepts-transfers` option isn't enabled in `server.properties` for the server specified.",
        "If the port is not provided, it will default to `25565`."
      ],
      "patterns": [
        "connect %players% to [proxy|bungeecord] [server] %text%",
        "send %players% to [proxy|bungeecord] server %text%",
        "transfer %players% to server %text% [on port %number%]"
      ],
      "examples": [
        "connect all players to proxy server \"hub\"",
        "transfer player to server \"my.server.com\"",
        "transfer player to server \"localhost\" on port 25566"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffContinue",
      "name": "Continue",
      "since": [
        "2.2-dev37, 2.7 (while loops), 2.8.0 (outer loops)"
      ],
      "deprecated": false,
      "description": [
        "Moves the loop to the next iteration. You may also continue an outer loop from an inner one. The loops are labelled from 1 until the current loop, starting with the outermost one."
      ],
      "patterns": [
        "continue [this loop|[the] [current] loop]",
        "continue [the] <-?\\d+(_\\d+)*>(st|nd|rd|th) loop"
      ],
      "examples": [
        "# Broadcast online moderators",
        "loop all players:",
        "\tif loop-value does not have permission \"moderator\":",
        "\t\tcontinue # filter out non moderators",
        "\tbroadcast \"%loop-player% is a moderator!\" # Only moderators get broadcast",
        " ",
        "# Game starting counter",
        "set {_counter} to 11",
        "while {_counter} > 0:",
        "\tremove 1 from {_counter}",
        "\twait a second",
        "\tif {_counter} != 1, 2, 3, 5 or 10:",
        "\t\tcontinue # only print when counter is 1, 2, 3, 5 or 10",
        "\tbroadcast \"Game starting in %{_counter}% second(s)\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffCopy",
      "name": "Copy Into Variable",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Copies objects into a variable. When copying a list over to another list, the source list and its sublists are also copied over.",
        "<strong>Note: Copying a value into a variable/list will overwrite the existing data.</strong>"
      ],
      "patterns": [
        "copy %~objects% [in]to %~objects%"
      ],
      "examples": [
        "set {_foo::bar} to 1",
        "set {_foo::sublist::foobar} to \"hey\"",
        "copy {_foo::*} to {_copy::*}",
        "broadcast indices of {_copy::*} # bar, sublist",
        "broadcast {_copy::bar} # 1",
        "broadcast {_copy::sublist::foobar} # \"hey!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "clone",
        "variable",
        "list"
      ]
    },
    {
      "id": "EffCustomName",
      "name": "Toggle Custom Name Visibility",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Toggles the custom name visibility of an entity."
      ],
      "patterns": [
        "(show|hide) [the] (custom|display)[ ]name of %entities%",
        "(show|hide) %entities%'[s] (custom|display)[ ]name"
      ],
      "examples": [
        "show the custom name of event-entity",
        "hide target's display name"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffDancing",
      "name": "Dance",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make an allay or piglin start or stop dancing.",
        "Providing a location only applies to allays. They will check to see if the the block at the location is a jukebox and playing music. If it isn't, they will stop dancing. If no location is provided, the allay will dance indefinitely.",
        "Providing a timespan only applies for piglins. It determines the length of time they will dance for. If no timespan is provided, they will dance indefinitely."
      ],
      "patterns": [
        "make %living entities% (start dancing|dance) [%direction% %location%] [for %time span%]",
        "make %living entities% (stop dancing|not dance)"
      ],
      "examples": [
        "if last spawned allay is not dancing:",
        "\tmake last spawned allay start dancing",
        "if block at location(0, 0, 0) is a jukebox:",
        "\tmake all allays dance at location(0, 0, 0)",
        "",
        "make last spawned piglin start dancing",
        "make all piglins dance for 5 hours"
      ],
      "events": null,
      "requirements": [
        "Paper 1.20.1+ (piglins)"
      ],
      "keywords": null
    },
    {
      "id": "EffDetonate",
      "name": "Detonate Entities",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Immediately detonates an entity. Accepted entities are fireworks, TNT minecarts, primed TNT, wind charges and creepers."
      ],
      "patterns": [
        "detonate %entities%"
      ],
      "examples": [
        "detonate last launched firework"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffDoIf",
      "name": "Do If",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Execute an effect if a condition is true."
      ],
      "patterns": [
        "<.+> if <.+>"
      ],
      "examples": [
        "on join:",
        "\tgive a diamond to the player if the player has permission \"rank.vip\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffDrop",
      "name": "Drop",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Drops one or more items."
      ],
      "patterns": [
        "drop %item types/experience points% [%directions% %locations%] [without velocity]"
      ],
      "examples": [
        "on death of creeper:",
        "\tdrop 1 TNT"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffDropLeash",
      "name": "Allow / Prevent Leash Drop",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Allows or prevents the leash from being dropped in an unleash event."
      ],
      "patterns": [
        "(force|allow) [the] (lead|leash) [item] to drop",
        "(block|disallow|prevent) [the] (lead|leash) [item] from dropping"
      ],
      "examples": [
        "on unleash:",
        "\tif player is not set:",
        "\t\tprevent the leash from dropping",
        "\telse if player is op:",
        "\t\tallow the leash to drop"
      ],
      "events": [
        "Unleash"
      ],
      "requirements": null,
      "keywords": [
        "lead"
      ]
    },
    {
      "id": "EffEating",
      "name": "Force Eating",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make a panda or horse type (horse, camel, donkey, llama, mule) start/stop eating."
      ],
      "patterns": [
        "make %living entities% (start|stop) eating",
        "force %living entities% to (start|stop) eating"
      ],
      "examples": [
        "if last spawned panda is eating:\n\tmake last spawned panda stop eating\n"
      ],
      "events": null,
      "requirements": [
        "Paper (horse type)"
      ],
      "keywords": null
    },
    {
      "id": "EffElytraBoostConsume",
      "name": "Consume Boosting Firework",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Prevent the firework used in an 'elytra boost' event to be consumed."
      ],
      "patterns": [
        "(prevent|disallow) [the] (boosting|used) firework from being consumed",
        "allow [the] (boosting|used) firework to be consumed"
      ],
      "examples": [
        "on elytra boost:",
        "\tif the used firework will be consumed:",
        "\t\tprevent the used firework from being consume"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "EffEnchant",
      "name": "Enchant/Disenchant",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "Enchant or disenchant an existing item."
      ],
      "patterns": [
        "enchant %~item types% with %enchantment types%",
        "disenchant %~item types%"
      ],
      "examples": [
        "enchant the player's tool with sharpness 5",
        "disenchant the player's tool"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffEndermanTeleport",
      "name": "Enderman Teleport",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make an enderman teleport randomly or towards an entity.",
        "Teleporting towards an entity teleports in the direction to the entity and not to them."
      ],
      "patterns": [
        "make %living entities% (randomly teleport|teleport randomly)",
        "force %living entities% to (randomly teleport|teleport randomly)",
        "make %living entities% teleport [randomly] towards %entity%",
        "force %living entities% to teleport [randomly] towards %entity%"
      ],
      "examples": [
        "make last spawned enderman teleport randomly",
        "loop 10 times:",
        "\tmake all endermen teleport towards player"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.20.1+"
      ],
      "keywords": null
    },
    {
      "id": "EffEnforceWhitelist",
      "name": "Enforce Whitelist",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Enforces or un-enforce a server's whitelist.",
        "All non-whitelisted players will be kicked upon enforcing the whitelist."
      ],
      "patterns": [
        "[un]enforce [the] [server] white[ ]list"
      ],
      "examples": [
        "enforce the whitelist",
        "unenforce the whitelist"
      ],
      "events": null,
      "requirements": [
        "MC 1.17+"
      ],
      "keywords": null
    },
    {
      "id": "EffEntityUnload",
      "name": "Entity Despawn",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make a living entity despawn when the chunk they're located at is unloaded.",
        "Setting a custom name on a living entity automatically makes it not despawnable.",
        "More information on what and when entities despawn can be found at <a href=\"https://minecraft.wiki/w/Mob_spawning#Despawning\">reference</a>."
      ],
      "patterns": [
        "make %living entities% despawn[able] (on chunk unload|when far away)",
        "force %living entities% to despawn (on chunk unload|when far away)",
        "prevent %living entities% from despawning [on chunk unload|when far away]"
      ],
      "examples": [
        "make all entities not despawnable on chunk unload",
        "spawn zombie at location(0, 0, 0):",
        "\tforce event-entity to not despawn when far away"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffEntityVisibility",
      "name": "Entity Visibility",
      "since": [
        "2.3, 2.10 (entities)"
      ],
      "deprecated": false,
      "description": [
        "Change visibility of the given entities for the given players.",
        "If no players are given, will hide the entities from all online players.",
        "",
        "When reveal is used in combination of the <a href='expressions.html#ExprHiddenPlayers'>hidden players</a> expression and the viewers are not specified, this will default it to the given player in the hidden players expression.",
        "",
        "Note: all previously hidden entities (including players) will be visible when a player leaves and rejoins."
      ],
      "patterns": [
        "hide %entities% [(from|for) %players%]",
        "reveal %entities% [(to|for|from) %players%]"
      ],
      "examples": [
        "on spawn:",
        "\tif event-entity is a chicken:",
        "\t\thide event-entity",
        "",
        "reveal hidden players of players"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.19+ (entities)"
      ],
      "keywords": null
    },
    {
      "id": "EffEquip",
      "name": "Equip",
      "since": [
        "1.0, 2.7 (multiple entities, unequip), 2.10 (wolves)"
      ],
      "deprecated": false,
      "description": [
        "Equips or unequips an entity with the given itemtypes (usually armor).",
        "This effect will replace any armor that the entity is already wearing."
      ],
      "patterns": [
        "equip [%living entities%] with %item types%",
        "make %living entities% wear %item types%",
        "unequip %item types% [from %living entities%]",
        "unequip %living entities%'[s] (armo[u]r|equipment)"
      ],
      "examples": [
        "equip player with diamond helmet",
        "equip player with diamond leggings, diamond chestplate, and diamond boots",
        "unequip diamond chestplate from player",
        "unequip player's armor"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffExit",
      "name": "Exit",
      "since": [
        "<i>unknown</i> (before 2.1)"
      ],
      "deprecated": false,
      "description": [
        "Exits a given amount of loops and conditionals, or the entire trigger."
      ],
      "patterns": [
        "(exit|stop) [trigger]",
        "(exit|stop) [1|a|the|this] (section|loop|conditional)",
        "(exit|stop) <-?\\d+(_\\d+)*> (section|loop|conditional)s",
        "(exit|stop) all (section|loop|conditional)s"
      ],
      "examples": [
        "if player has any ore:",
        "\tstop",
        "message \"%player% has no ores!\"",
        "loop blocks above the player:",
        "\tloop-block is not air:",
        "\t\texit 2 sections",
        "\tset loop-block to water"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffExplodeCreeper",
      "name": "Explode Creeper",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Starts the explosion process of a creeper or instantly explodes it."
      ],
      "patterns": [
        "instantly explode [creeper[s]] %living entities%",
        "explode [creeper[s]] %living entities% instantly",
        "ignite creeper[s] %living entities%",
        "start (ignition|explosion) [process] of [creeper[s]] %living entities%",
        "stop (ignition|explosion) [process] of [creeper[s]] %living entities%"
      ],
      "examples": [
        "start explosion of the last spawned creeper",
        "stop ignition of the last spawned creeper"
      ],
      "events": null,
      "requirements": [
        "Paper 1.13 or newer/Spigot 1.14 or newer. Ignition can be stopped on Paper 1.13 or newer."
      ],
      "keywords": null
    },
    {
      "id": "EffExplosion",
      "name": "Explosion",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Creates an explosion of a given force. The Minecraft Wiki has an <a href='https://www.minecraft.wiki/w/Explosion'>article on explosions</a> which lists the explosion forces of TNT, creepers, etc.",
        "Hint: use a force of 0 to create a fake explosion that does no damage whatsoever, or use the explosion effect introduced in Skript 2.0.",
        "Starting with Bukkit 1.4.5 and Skript 2.0 you can use safe explosions which will damage entities but won't destroy any blocks."
      ],
      "patterns": [
        "[(create|make)] [an] explosion (of|with) (force|strength|power) %number% [%directions% %locations%] [with fire]",
        "[(create|make)] [a] safe explosion (of|with) (force|strength|power) %number% [%directions% %locations%]",
        "[(create|make)] [a] fake explosion [%directions% %locations%]",
        "[(create|make)] [an] explosion[ ]effect [%directions% %locations%]"
      ],
      "examples": [
        "create an explosion of force 10 at the player",
        "create an explosion of force 0 at the victim"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffFeed",
      "name": "Feed",
      "since": [
        "2.2-dev34"
      ],
      "deprecated": false,
      "description": [
        "Feeds the specified players."
      ],
      "patterns": [
        "feed [the] %players% [by %number% [beef[s]]]"
      ],
      "examples": [
        "feed all players",
        "feed the player by 5 beefs"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffFireResistant",
      "name": "Make Fire Resistant",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Makes items fire resistant."
      ],
      "patterns": [
        "make %item types% [not] (fire resistant|resistant to fire)"
      ],
      "examples": [
        "make player's tool fire resistant:",
        "make {_items::*} not resistant to fire"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.20.5+"
      ],
      "keywords": null
    },
    {
      "id": "EffFireworkLaunch",
      "name": "Launch firework",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Launch firework effects at the given location(s)."
      ],
      "patterns": [
        "(launch|deploy) [[a] firework [with effect[s]]] %firework effects% at %locations% [([with] (duration|power)|timed) %number%]"
      ],
      "examples": [
        "launch ball large colored red, purple and white fading to light green and black at player's location with duration 1"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffForceAttack",
      "name": "Force Attack",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "Makes a living entity attack an entity with a melee attack."
      ],
      "patterns": [
        "make %living entities% attack %entity%",
        "force %living entities% to attack %entity%"
      ],
      "examples": [
        "spawn a wolf at player's location",
        "make last spawned wolf attack player"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.15.2+"
      ],
      "keywords": null
    },
    {
      "id": "EffForceEnchantmentGlint",
      "name": "Force Enchantment Glint",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Forces the items to glint or not, or removes its existing enchantment glint enforcement."
      ],
      "patterns": [
        "(force|make) %item types% [to] [start] glint[ing]",
        "(force|make) %item types% [to] (not|stop) glint[ing]",
        "(clear|delete|reset) [the] enchantment glint override of %item types%",
        "(clear|delete|reset) %item types%'s enchantment glint override"
      ],
      "examples": [
        "force {_items::*} to glint",
        "force the player's tool to stop glinting"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.20.5+"
      ],
      "keywords": null
    },
    {
      "id": "EffGlowingText",
      "name": "Make Sign Glow",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Makes a sign (either a block or item) have glowing text or normal text"
      ],
      "patterns": [
        "make %blocks/item types% have glowing text",
        "make %blocks/item types% have (normal|non[-| ]glowing) text"
      ],
      "examples": [
        "make target block of player have glowing text"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffGoatHorns",
      "name": "Goat Horns",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make a goat have or not have a left, right, or both horns."
      ],
      "patterns": [
        "remove [the] (left horn[s]|right horn[s]|both horns) of %living entities%",
        "remove %living entities%'[s] (left horn[s]|right horn[s]|horns)",
        "(regrow|replace) [the] (left horn[s]|right horn[s]|both horns) of %living entities%",
        "(regrow|replace) %living entities%'[s] (left horn[s]|right horn[s]|horns)"
      ],
      "examples": [
        "remove the left horn of last spawned goat",
        "regrow {_goat}'s horns",
        "remove both horns of all goats"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffGoatRam",
      "name": "Make Goat Ram",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make a goat ram an entity.",
        "Ramming does have a cooldown and currently no way to change it."
      ],
      "patterns": [
        "make %living entities% ram %living entity%",
        "force %living entities% to ram %living entity%"
      ],
      "examples": [
        "make all goats ram player"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "EffHandedness",
      "name": "Handedness",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Make mobs left or right-handed. This does not affect players."
      ],
      "patterns": [
        "make %living entities% (left|right)( |-)handed"
      ],
      "examples": [
        "spawn skeleton at spawn of world \"world\":",
        "\tmake entity left handed",
        "",
        "make all zombies in radius 10 of player right handed"
      ],
      "events": null,
      "requirements": [
        "Paper 1.17.1+"
      ],
      "keywords": null
    },
    {
      "id": "EffHealth",
      "name": "Damage/Heal/Repair",
      "since": [
        "1.0, 2.10 (damage cause)"
      ],
      "deprecated": false,
      "description": [
        "Damage, heal, or repair an entity or item.",
        "Servers running Spigot 1.20.4+ can optionally choose to specify a fake damage cause."
      ],
      "patterns": [
        "damage %living entities/item types/slots% by %number% [heart[s]] [with [fake] [damage] cause %damage cause%]",
        "heal %living entities% [by %number% [heart[s]]]",
        "repair %item types/slots% [by %number%]"
      ],
      "examples": [
        "damage player by 5 hearts",
        "damage player by 3 hearts with fake cause fall",
        "heal the player",
        "repair tool of player"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.20.4+ (for damage cause)"
      ],
      "keywords": null
    },
    {
      "id": "EffHidePlayerFromServerList",
      "name": "Hide Player from Server List",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Hides a player from the <a href='expressions.html#ExprHoverList'>hover list</a> and decreases the <a href='expressions.html#ExprOnlinePlayersCount'>online players count</a> (only if the player count wasn't changed before)."
      ],
      "patterns": [
        "hide %players% (in|on|from) [the] server list",
        "hide %players%'[s] info[rmation] (in|on|from) [the] server list"
      ],
      "examples": [
        "on server list ping:",
        "\thide {vanished::*} from the server list"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffIgnite",
      "name": "Ignite/Extinguish",
      "since": [
        "1.4"
      ],
      "deprecated": false,
      "description": [
        "Lights entities on fire or extinguishes them."
      ],
      "patterns": [
        "(ignite|set fire to) %entities% [for %time span%]",
        "(set|light) %entities% on fire [for %time span%]",
        "extinguish %entities%"
      ],
      "examples": [
        "ignite the player",
        "extinguish the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffIncendiary",
      "name": "Make Incendiary",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Sets if an entity's explosion will leave behind fire. This effect is also usable in an explosion prime event."
      ],
      "patterns": [
        "make %entities% [not] incendiary",
        "make %entities%'[s] explosion [not] (incendiary|fiery)",
        "make [the] [event(-| )]explosion [not] (incendiary|fiery)"
      ],
      "examples": [
        "on explosion prime:",
        "\tmake the explosion fiery"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffInsertEntityStorage",
      "name": "Insert Entity Storage",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Add an entity into the entity storage of a block (e.g. beehive).",
        "The entity must be of the right type for the block (e.g. bee for beehive).",
        "Due to unstable behavior on older versions, adding entities to an entity storage requires Minecraft version 1.21+."
      ],
      "patterns": [
        "(add|insert) %living entities% [in[ ]]to [the] (stored entities|entity storage) of %block%"
      ],
      "examples": [
        "add last spawned bee into the entity storage of {_beehive}"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.21+"
      ],
      "keywords": null
    },
    {
      "id": "EffInvisible",
      "name": "Make Invisible",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Makes a living entity visible/invisible. This is not a potion and therefore does not have features such as a time limit or particles.",
        "When setting an entity to invisible while using an invisibility potion on it, the potion will be overridden and when it runs out the entity keeps its invisibility."
      ],
      "patterns": [
        "make %living entities% (invisible|not visible)",
        "make %living entities% (visible|not invisible)"
      ],
      "examples": [
        "make target entity invisible"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffInvulnerability",
      "name": "Make Invulnerable",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Makes an entity invulnerable/not invulnerable."
      ],
      "patterns": [
        "make %entities% (invulnerable|invincible)",
        "make %entities% (not (invulnerable|invincible)|vulnerable|vincible)"
      ],
      "examples": [
        "make target entity invulnerable"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffItemDespawn",
      "name": "Item Despawn",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Prevent a dropped item from naturally despawning through Minecraft's timer."
      ],
      "patterns": [
        "(prevent|disallow) %itementities% from (naturally despawning|despawning naturally)",
        "allow natural despawning of %itementities%",
        "allow %itementities% to (naturally despawn|despawn naturally)"
      ],
      "examples": [
        "prevent all dropped items from naturally despawning",
        "allow all dropped items to naturally despawn"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffKeepInventory",
      "name": "Keep Inventory / Experience",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Keeps the inventory or/and experiences of the dead player in a death event."
      ],
      "patterns": [
        "keep [the] (inventory|items) [(and [e]xp[erience][s] [point[s]])]",
        "keep [the] [e]xp[erience][s] [point[s]] [(and (inventory|items))]"
      ],
      "examples": [
        "on death of a player:",
        "\tif the victim is an op:",
        "\t\tkeep the inventory and experiences"
      ],
      "events": [
        "death"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffKick",
      "name": "Kick",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Kicks a player from the server."
      ],
      "patterns": [
        "kick %players% [(by reason of|because [of]|on account of|due to) %text%]"
      ],
      "examples": [
        "on place of TNT, lava, or obsidian:",
        "\tkick the player due to \"You may not place %block%!\"",
        "\tcancel the event"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffKill",
      "name": "Kill",
      "since": [
        "1.0, 2.10 (ignoring totem of undying)"
      ],
      "deprecated": false,
      "description": [
        "Kills an entity."
      ],
      "patterns": [
        "kill %entities%"
      ],
      "examples": [
        "kill the player",
        "kill all creepers in the player's world",
        "kill all endermen, witches and bats"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffKnockback",
      "name": "Knockback",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Apply the same velocity as a knockback to living entities in a direction. Mechanics such as knockback resistance will be factored in."
      ],
      "patterns": [
        "(apply knockback to|knock[back]) %living entities% [%direction%] [with (strength|force) %number%]"
      ],
      "examples": [
        "knockback player north",
        "knock victim (vector from attacker to victim) with strength 10"
      ],
      "events": null,
      "requirements": [
        "Paper 1.19.2+"
      ],
      "keywords": null
    },
    {
      "id": "EffLeash",
      "name": "Leash entities",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Leash living entities to other entities. When trying to leash an Ender Dragon, Wither, Player, or a Bat, this effect will not work.",
        "See <a href=\"https://hub.spigotmc.org/javadocs/spigot/org/bukkit/entity/LivingEntity.html#setLeashHolder(org.bukkit.entity.Entity)\">Spigot's Javadocs for more info</a>."
      ],
      "patterns": [
        "(leash|lead) %living entities% to %entity%",
        "make %entity% (leash|lead) %living entities%",
        "un(leash|lead) [holder of] %living entities%"
      ],
      "examples": [
        "on right click:",
        "\tleash event-entity to player",
        "\tsend \"&aYou leashed &2%event-entity%!\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffLidState",
      "name": "Open/Close Lid",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Open or close the lid of the block(s)."
      ],
      "patterns": [
        "(open|close) [the] lid[s] (of|for) %blocks%",
        "(open|close) %blocks%'[s] lid[s]"
      ],
      "examples": [
        "open the lid of {_chest}",
        "close the lid of {_blocks::*}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffLightning",
      "name": "Lightning",
      "since": [
        "1.4"
      ],
      "deprecated": false,
      "description": [
        "Strike lightning at a given location. Can use 'lightning effect' to create a lightning that does not harm entities or start fires."
      ],
      "patterns": [
        "(create|strike) lightning[([ ]effect)] %directions% %locations%"
      ],
      "examples": [
        "strike lightning at the player",
        "strike lightning effect at the victim"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffLoadServerIcon",
      "name": "Load Server Icon",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Loads server icons from the given files. You can get the loaded icon using the",
        "<a href='expressions.html#ExprLastLoadedServerIcon'>last loaded server icon</a> expression.",
        "Please note that the image must be 64x64 and the file path starts from the server folder."
      ],
      "patterns": [
        "load [the] server icon (from|of) [the] [image] [file] %text%"
      ],
      "examples": [
        "on load:",
        "\tclear {server-icons::*}",
        "\tloop 5 times:",
        "\t\tload server icon from file \"icons/%loop-number%.png\"",
        "\t\tadd the last loaded server icon to {server-icons::*}",
        "",
        "on server list ping:",
        "\tset the icon to a random server icon out of {server-icons::*}"
      ],
      "events": null,
      "requirements": [
        "Paper 1.12.2 or newer"
      ],
      "keywords": null
    },
    {
      "id": "EffLog",
      "name": "Log",
      "since": [
        "2.0, 2.9.0 (severities)"
      ],
      "deprecated": false,
      "description": [
        "Writes text into a .log file. Skript will write these files to /plugins/Skript/logs.",
        "NB: Using 'server.log' as the log file will write to the default server log. Omitting the log file altogether will log the message as '[Skript] [&lt;script&gt;.sk] &lt;message&gt;' in the server log."
      ],
      "patterns": [
        "log %texts% [(to|in) [file[s]] %texts%] [with [the|a] severity [of] (warning|severe)]"
      ],
      "examples": [
        "on join:",
        "\tlog \"%player% has just joined the server!\"",
        "on world change:",
        "\tlog \"Someone just went to %event-world%!\" to file \"worldlog/worlds.log\"",
        "on command:",
        "\tlog \"%player% just executed %full command%!\" to file \"server/commands.log\" with a severity of warning"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffLook",
      "name": "Look At",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Forces the mob(s) or player(s) to look at an entity, vector or location. Vanilla max head pitches range from 10 to 50."
      ],
      "patterns": [
        "(force|make) %living entities% [to] (face [towards]|look [(at|towards)]) (%entity%['s (feet|eyes)]|(feet|eyes) of %entity%) [at [head] [rotation] speed %number%] [[and] max[imum] [head] pitch %number%]",
        "(force|make) %living entities% [to] (face [towards]|look [(at|towards)]) %vector/location% [at [head] [rotation] speed %number%] [[and] max[imum] [head] pitch %number%]"
      ],
      "examples": [
        "force the player to look towards event-entity's feet",
        "",
        "on entity explosion:",
        "\tset {_player} to the nearest player",
        "\t{_player} is set",
        "\tdistance between {_player} and the event-location is less than 15",
        "\tmake {_player} look towards vector from the {_player} to location of the event-entity",
        "",
        "force {_enderman} to face the block 3 meters above {_location} at head rotation speed 100.5 and max head pitch -40"
      ],
      "events": null,
      "requirements": [
        "Paper 1.17+, Paper 1.19.1+ (Players & Look Anchors)"
      ],
      "keywords": null
    },
    {
      "id": "EffMakeEggHatch",
      "name": "Make Egg Hatch",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Makes the egg hatch in a Player Egg Throw event."
      ],
      "patterns": [
        "make [the] egg [not] hatch"
      ],
      "examples": [
        "on player egg throw:",
        "\t# EGGS FOR DAYZ!",
        "\tmake the egg hatch"
      ],
      "events": [
        "Egg Throw"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffMakeFly",
      "name": "Make Fly",
      "since": [
        "2.2-dev34"
      ],
      "deprecated": false,
      "description": [
        "Forces a player to start/stop flying."
      ],
      "patterns": [
        "force %players% to [(start|stop)] fly[ing]",
        "make %players% (start|stop) flying",
        "make %players% fly"
      ],
      "examples": [
        "make player fly",
        "force all players to stop flying"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffMakeSay",
      "name": "Make Say",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Forces a player to send a message to the chat. If the message starts with a slash it will force the player to use command."
      ],
      "patterns": [
        "make %players% (say|send [the] message[s]) %texts%",
        "force %players% to (say|send [the] message[s]) %texts%"
      ],
      "examples": [
        "make the player say \"Hello.\"",
        "force all players to send the message \"I love this server\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffMessage",
      "name": "Message",
      "since": [
        "1.0, 2.2-dev26 (advanced features), 2.5.2 (optional sender), 2.6 (sending objects)"
      ],
      "deprecated": false,
      "description": [
        "Sends a message to the given player. Only styles written",
        "in given string or in <a href=expressions.html#ExprColored>formatted expressions</a> will be parsed.",
        "Adding an optional sender allows the messages to be sent as if a specific player sent them.",
        "This is useful with Minecraft 1.16.4's new chat ignore system, in which players can choose to ignore other players,",
        "but for this to work, the message needs to be sent from a player."
      ],
      "patterns": [
        "(message|send [message[s]]) %objects% [to %command senders%] [from %player%]"
      ],
      "examples": [
        "message \"A wild %player% appeared!\"",
        "message \"This message is a distraction. Mwahaha!\"",
        "send \"Your kill streak is %{kill streak::%uuid of player%}%.\" to player",
        "if the targeted entity exists:",
        "\tmessage \"You're currently looking at a %type of the targeted entity%!\"",
        "on chat:",
        "\tcancel event",
        "\tsend \"[%player%] >> %message%\" to all players from player"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.16.4+ for optional sender"
      ],
      "keywords": null
    },
    {
      "id": "EffOp",
      "name": "op/deop",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Grant/revoke a user operator state."
      ],
      "patterns": [
        "[de[-]]op %offline players%"
      ],
      "examples": [
        "op the player",
        "deop all players"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffOpenBook",
      "name": "Open Book",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "Opens a written book to a player."
      ],
      "patterns": [
        "(open|show) book %item type% (to|for) %players%"
      ],
      "examples": [
        "open book player's tool to player"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.14.2+"
      ],
      "keywords": null
    },
    {
      "id": "EffOpenInventory",
      "name": "Open/Close Inventory",
      "since": [
        "2.0, 2.1.1 (closing), 2.2-Fixes-V10 (anvil), 2.4 (hopper, dropper, dispenser"
      ],
      "deprecated": false,
      "description": [
        "Opens an inventory to a player. The player can then access and modify the inventory as if it was a chest that he just opened.",
        "Please note that currently 'show' and 'open' have the same effect, but 'show' will eventually show an unmodifiable view of the inventory in the future."
      ],
      "patterns": [
        "(open|show) (((crafting [table]|workbench)|chest|anvil|hopper|dropper|dispenser) [(view|window|inventory)]|%inventory/inventory type%) (to|for) %players%",
        "close [the] inventory [view] (to|of|for) %players%",
        "close %players%'[s] inventory [view]"
      ],
      "examples": [
        "show the victim's inventory to the player",
        "open the player's inventory for the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffPandaOnBack",
      "name": "Force Panda On Back",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make a panda get on/off its back."
      ],
      "patterns": [
        "make %living entities% get (on|off) (its|their) back[s]",
        "force %living entities% to get (on|off) (its|their) back[s]"
      ],
      "examples": [
        "if last spawned panda is on its back:\n\tmake last spawned panda get off its back\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffPandaRolling",
      "name": "Make Panda Roll",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make a panda start/stop rolling."
      ],
      "patterns": [
        "make %living entities% ((start rolling|roll)|stop rolling)",
        "force %living entities% to (start|stop) rolling"
      ],
      "examples": [
        "if last spawned panda is not rolling:\n\tmake last spawned panda start rolling\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffPandaSneezing",
      "name": "Make Panda Sneeze",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make a panda start/stop sneezing."
      ],
      "patterns": [
        "make %living entities% ((start sneezing|sneeze)|stop sneezing)",
        "force %living entities% to (start|stop) sneezing"
      ],
      "examples": [
        "if last spawned panda is not sneezing:\n\tmake last spawned panda start sneezing\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffPathfind",
      "name": "Pathfind",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Make an entity pathfind towards a location or another entity. Not all entities can pathfind. If the pathfinding target is another entity, the entities may or may not continuously follow the target."
      ],
      "patterns": [
        "make %living entities% (pathfind|move) to[wards] %living entity/location% [at speed %number%]",
        "make %living entities% stop (pathfinding|moving)"
      ],
      "examples": [
        "make all creepers pathfind towards player",
        "make all cows stop pathfinding",
        "make event-entity pathfind towards player at speed 1"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "EffPersistent",
      "name": "Persistent",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make entities, players, or leaves be persistent.",
        "Persistence of entities is whether they are retained through server restarts.",
        "Persistence of leaves is whether they should decay when not connected to a log block within 6 meters.",
        "Persistence of players is if the player's playerdata should be saved when they leave the server. Players' persistence is reset back to 'true' when they join the server.",
        "Passengers inherit the persistence of their vehicle, meaning a persistent zombie put on a non-persistent chicken will become non-persistent. This does not apply to players.",
        "By default, all entities are persistent."
      ],
      "patterns": [
        "make %entities/blocks% [not] persist[ent]",
        "force %entities/blocks% to [not] persist",
        "prevent %entities/blocks% from persisting"
      ],
      "examples": [
        "prevent all entities from persisting",
        "force {_leaves} to persist",
        "",
        "command /kickcheater <cheater: player>:",
        "\tpermission: op",
        "\ttrigger:",
        "\t\tprevent {_cheater} from persisting",
        "\t\tkick {_cheater}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffPlayerInfoVisibility",
      "name": "Player Info Visibility",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Sets whether all player related information is hidden in the server list.",
        "The Vanilla Minecraft client will display ??? (dark gray) instead of player counts and will not show the",
        "<a href='expressions.html#ExprHoverList'>hover hist</a> when hiding player info.",
        "<a href='expressions.html#ExprVersionString'>The version string</a> can override the ???.",
        "Also the <a href='expressions.html#ExprOnlinePlayersCount'>Online Players Count</a> and",
        "<a href='expressions.html#ExprMaxPlayers'>Max Players</a> expressions will return -1 when hiding player info."
      ],
      "patterns": [
        "hide [all] player [related] info[rmation] [(in|on|from) [the] server list]",
        "(show|reveal) [all] player [related] info[rmation] [(in|to|on|from) [the] server list]"
      ],
      "examples": [
        "hide player info",
        "hide player related information in the server list",
        "reveal all player related info"
      ],
      "events": [
        "server list ping"
      ],
      "requirements": [
        "Paper 1.12.2 or newer"
      ],
      "keywords": null
    },
    {
      "id": "EffPlayingDead",
      "name": "Play Dead",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make an axolotl start or stop playing dead."
      ],
      "patterns": [
        "make %living entities% (start playing|play) dead",
        "force %living entities% to (start playing|play) dead",
        "make %living entities% (stop playing|not play) dead",
        "force %living entities% to (stop playing|not play) dead"
      ],
      "examples": [
        "make last spawned axolotl play dead"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffPlaySound",
      "name": "Play Sound",
      "since": [
        "2.2-dev28, 2.4 (sound categories), 2.9 (sound seed & entity emitter)"
      ],
      "deprecated": false,
      "description": [
        "Plays a sound at given location for everyone or just for given players, or plays a sound to specified players. Both Minecraft sound names and <a href=\"https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Sound.html\">Spigot sound names</a> are supported. Playing resource pack sounds are supported too. The sound category is 'master' by default. ",
        "",
        "When running 1.19+, playing a sound from an entity directly will result in the sound coming from said entity, even while moving.",
        "If the sound is custom, a location emitter will follow the entity. Do note that pitch and volume ",
        "are reflected based on the entity, and Minecraft may not use the values from this syntax.",
        "",
        "If using Paper 1.19.4+ or Adventure API 4.12.0+ you can utilize sound seeds. Minecraft sometimes have a set of sounds under one sound ID ",
        "that will randomly play, to counter this, you can directly state which seed to use.",
        "",
        "Please note that sound names can get changed in any Minecraft or Spigot version, or even removed from Minecraft itself."
      ],
      "patterns": [
        "play sound[s] %texts% [[with] seed %number%] [(in|from) %sound category%] [(at|with) volume %number%] [(and|at|with) pitch %number%] (at|on|from) %locations/entities% [(to|for) %players%]",
        "play sound[s] %texts% [[with] seed %number%] [(in|from) %sound category%] [(at|with) volume %number%] [(and|at|with) pitch %number%] [(to|for) %players%] [(at|on|from) %locations/entities%]"
      ],
      "examples": [
        "play sound \"block.note_block.pling\"",
        "play sound \"entity.experience_orb.pickup\" with volume 0.5 to the player",
        "play sound \"custom.music.1\" in jukebox category at {speakerBlock}",
        "play sound \"BLOCK_AMETHYST_BLOCK_RESONATE\" with seed 1 on target entity for the player #1.20.1+"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.18.1+ (entity emitters), Paper 1.19.4+ or Adventure API 4.12.0+ (sound seed)"
      ],
      "keywords": null
    },
    {
      "id": "EffPoison",
      "name": "Poison/Cure",
      "since": [
        "1.3.2"
      ],
      "deprecated": false,
      "description": [
        "Poison or cure a creature."
      ],
      "patterns": [
        "poison %living entities% [for %time span%]",
        "(cure|unpoison) %living entities% [(from|of) poison]"
      ],
      "examples": [
        "poison the player",
        "poison the victim for 20 seconds",
        "cure the player from poison"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffPotion",
      "name": "Potion Effects",
      "since": [
        "2.0, 2.2-dev27 (ambient and particle-less potion effects), 2.5 (replacing existing effect), 2.5.2 (potion effects), 2.7 (icon and infinite)"
      ],
      "deprecated": false,
      "description": [
        "Apply or remove potion effects to/from entities."
      ],
      "patterns": [
        "apply %potion effects% to %living entities%",
        "apply infinite [ambient] [potion of] %potion effect types% [potion] [[[of] tier] %number%] [without [any] particles] [(whilst hiding [the]|without (the|a)) [potion] icon] to %living entities% [replacing [the] existing effect]",
        "apply [ambient] [potion of] %potion effect types% [potion] [[[of] tier] %number%] [without [any] particles] [(whilst hiding [the]|without (the|a)) [potion] icon] to %living entities% [for %time span%] [replacing [the] existing effect]"
      ],
      "examples": [
        "apply ambient swiftness 2 to the player",
        "remove haste from the victim",
        "",
        "on join:",
        "\tapply infinite potion of strength of tier {strength::%uuid of player%} to the player",
        "\tapply potion of strength of tier {strength::%uuid of player%} to the player for 999 days # Before 1.19.4",
        "",
        "apply potion effects of player's tool to player",
        "apply haste potion of tier 3 without any particles whilst hiding the potion icon to the player # Hide potions"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffPush",
      "name": "Push",
      "since": [
        "1.4.6"
      ],
      "deprecated": false,
      "description": [
        "Push entities around."
      ],
      "patterns": [
        "(push|thrust) %entities% [along] %direction% [(at|with) (speed|velocity|force) %number%]"
      ],
      "examples": [
        "push the player upwards",
        "push the victim downwards at speed 0.5",
        "push player along vector from player to player's target at speed 2"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffPvP",
      "name": "PvP",
      "since": [
        "1.3.4"
      ],
      "deprecated": false,
      "description": [
        "Set the PvP state for a given world."
      ],
      "patterns": [
        "enable PvP [in %worlds%]",
        "disable PVP [in %worlds%]"
      ],
      "examples": [
        "enable PvP #(current world only)",
        "disable PvP in all worlds"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffReleaseEntityStorage",
      "name": "Release From Entity Storage",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Releases the stored entities in an entity block storage (i.e. beehive).",
        "When using beehives, providing a timespan will prevent the released bees from re-entering the beehive for that amount of time.",
        "Due to unstable behaviour on older versions, this effect requires Minecraft version 1.21+."
      ],
      "patterns": [
        "(release|evict) [the] (stored entities|entity storage) of %blocks% [for %time span%]"
      ],
      "examples": [
        "release the stored entities of {_beehive}",
        "release the entity storage of {_hive} for 5 seconds"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.21"
      ],
      "keywords": null
    },
    {
      "id": "EffReplace",
      "name": "Replace",
      "since": [
        "2.0, 2.2-dev24 (multiple strings, items in inventory), 2.5 (replace first, case sensitivity), 2.10 (regex)"
      ],
      "deprecated": false,
      "description": [
        "Replaces all occurrences of a given text or regex with another text. Please note that you can only change variables and a few expressions, e.g. a <a href='/expressions.html#ExprMessage'>message</a> or a line of a sign."
      ],
      "patterns": [
        "replace [(all|every)|[the] first] %texts% in %texts% with %text% [with case sensitivity]",
        "replace [(all|every)|[the] first] %texts% with %text% in %texts% [with case sensitivity]",
        "(replace [with|using] regex|regex replace) %texts% in %texts% with %text%",
        "(replace [with|using] regex|regex replace) %texts% with %text% in %texts%",
        "replace [all|every] %item types% in %inventories% with %item type%",
        "replace [all|every] %item types% with %item type% in %inventories%"
      ],
      "examples": [
        "replace \"<item>\" in {_msg} with \"[%name of player's tool%]\"",
        "replace every \"&\" with \"§\" in line 1 of targeted block",
        "",
        "# Very simple chat censor",
        "on chat:",
        "\treplace all \"idiot\" and \"noob\" with \"****\" in the message",
        "\tregex replace \"\\b(idiot|noob)\\b\" with \"****\" in the message # Regex version using word boundaries for better results",
        "",
        "replace all stone and dirt in player's inventory and player's top inventory with diamond"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffResetTitle",
      "name": "Title - Reset",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Resets the title of the player to the default values."
      ],
      "patterns": [
        "reset [the] title[s] [of %players%]",
        "reset [the] %players%'[s] title[s]"
      ],
      "examples": [
        "reset the titles of all players",
        "reset the title"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffRespawn",
      "name": "Force Respawn",
      "since": [
        "2.2-dev21"
      ],
      "deprecated": false,
      "description": [
        "Forces player(s) to respawn if they are dead. If this is called without delay from death event, one tick is waited before respawn attempt."
      ],
      "patterns": [
        "force %players% to respawn"
      ],
      "examples": [
        "on death of player:",
        "\tforce event-player to respawn"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffReturn",
      "name": "Return",
      "since": [
        "2.2, 2.8.0 (returns aliases)"
      ],
      "deprecated": false,
      "description": [
        "Makes a trigger or a section (e.g. a function) return a value"
      ],
      "patterns": [
        "return %objects%"
      ],
      "examples": [
        "function double(i: number) :: number:",
        "\treturn 2 * {_i}",
        "",
        "function divide(i: number) returns number:",
        "\treturn {_i} / 2"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffRing",
      "name": "Ring Bell",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Causes a bell to ring.",
        "Optionally, the entity that rang the bell and the direction the bell should ring can be specified.",
        "A bell can only ring in two directions, and the direction is determined by which way the bell is facing.",
        "By default, the bell will ring in the direction it is facing."
      ],
      "patterns": [
        "ring %blocks% [from [the]] [%direction%]",
        "(make|let) %entity% ring %blocks% [from [the]] [%direction%]"
      ],
      "examples": [
        "make player ring target-block"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.19.4+"
      ],
      "keywords": null
    },
    {
      "id": "EffRun",
      "name": "Run (Experimental)",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Executes a task (a function). Any returned result is discarded."
      ],
      "patterns": [
        "run %executable% [with arg[ument]s %objects%]",
        "execute %executable% [with arg[ument]s %objects%]"
      ],
      "examples": [
        "set {_function} to the function named \"myFunction\"",
        "run {_function}",
        "run {_function} with arguments {_things::*}"
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "run",
        "execute",
        "reflection",
        "function"
      ]
    },
    {
      "id": "EffScreaming",
      "name": "Make Entity Scream",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make a goat or enderman start or stop screaming."
      ],
      "patterns": [
        "make %living entities% (start screaming|scream)",
        "force %living entities% to (start screaming|scream)",
        "make %living entities% stop screaming",
        "force %living entities% to stop screaming"
      ],
      "examples": [
        "\tmake last spawned goat start screaming\n\tforce last spawned goat to stop screaming\n",
        "\tmake {_enderman} scream\n\tforce {_enderman} to stop screaming\n"
      ],
      "events": null,
      "requirements": [
        "Paper (endermen)"
      ],
      "keywords": null
    },
    {
      "id": "EffScriptFile",
      "name": "Enable/Disable/Unload/Reload Script",
      "since": [
        "2.4, 2.10 (unloading)"
      ],
      "deprecated": false,
      "description": [
        "Enables, disables, unloads, or reloads a script.\n\nDisabling a script unloads it and prepends - to its name so it will not be loaded the next time the server restarts.\nIf the script reflection experiment is enabled: unloading a script terminates it and removes it from memory, but does not alter the file."
      ],
      "patterns": [
        "((enable|load)|reload|disable|unload) script [file|named] %text% [with errors]",
        "((enable|load)|reload|disable|unload) skript file %text% [with errors]",
        "((enable|load)|reload|disable|unload) %scripts% [with errors]"
      ],
      "examples": [
        "reload script \"test\"",
        "enable script file \"testing\"",
        "unload script file \"script.sk\"",
        "set {_script} to the script \"MyScript.sk\"",
        "reload {_script}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffSendBlockChange",
      "name": "Send Block Change",
      "since": [
        "2.2-dev37c, 2.5.1 (block data support)"
      ],
      "deprecated": false,
      "description": [
        "Makes a player see a block as something it really isn't. BlockData support is only for MC 1.13+"
      ],
      "patterns": [
        "make %players% see %blocks% as %item type/block data%"
      ],
      "examples": [
        "make player see block at player as dirt",
        "make player see target block as campfire[facing=south]"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffSendResourcePack",
      "name": "Send Resource Pack",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Request that the player's client download and switch resource packs. The client will download ",
        "the resource pack in the background, and will automatically switch to it once the download is complete. ",
        "The URL must be a direct download link.",
        "",
        "The hash is used for caching, the player won't have to re-download the resource pack that way. ",
        "The hash must be SHA-1, you can get SHA-1 hash of your resource pack using ",
        "<a href=\"https://emn178.github.io/online-tools/sha1_checksum.html\">this online tool</a>.",
        "",
        "The <a href='events.html#resource_pack_request_action'>resource pack request action</a> can be used to check ",
        "status of the sent resource pack request."
      ],
      "patterns": [
        "send [the] resource pack [from [[the] URL]] %text% to %players%",
        "send [the] resource pack [from [[the] URL]] %text% with hash %text% to %players%"
      ],
      "examples": [
        "on join:",
        "\tsend the resource pack from \"URL\" with hash \"hash\" to the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffSendTitle",
      "name": "Title - Send",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Sends a title/subtitle to the given player(s) with optional fadein/stay/fadeout times for Minecraft versions 1.11 and above. ",
        "",
        "If you're sending only the subtitle, it will be shown only if there's a title displayed at the moment, otherwise it will be sent with the next title. To show only the subtitle, use: <code>send title \" \" with subtitle \"yourtexthere\" to player</code>.",
        "",
        "Note: if no input is given for the times, it will keep the ones from the last title sent, use the <a href='effects.html#EffResetTitle'>reset title</a> effect to restore the default values."
      ],
      "patterns": [
        "send title %text% [with subtitle %text%] [to %players%] [for %time span%] [with fade[(-| )]in %time span%] [[and] [with] fade[(-| )]out %time span%]",
        "send subtitle %text% [to %players%] [for %time span%] [with fade[(-| )]in %time span%] [[and] [with] fade[(-| )]out %time span%]"
      ],
      "examples": [
        "send title \"Competition Started\" with subtitle \"Have fun, Stay safe!\" to player for 5 seconds",
        "send title \"Hi %player%\" to player",
        "send title \"Loot Drop\" with subtitle \"starts in 3 minutes\" to all players",
        "send title \"Hello %player%!\" with subtitle \"Welcome to our server\" to player for 5 seconds with fadein 1 second and fade out 1 second",
        "send subtitle \"Party!\" to all players"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffShear",
      "name": "Shear",
      "since": [
        "2.0 (cows, sheep & snowmen), 2.8.0 (all shearable entities)"
      ],
      "deprecated": false,
      "description": [
        "Shears or un-shears a shearable entity with drops by shearing and a 'sheared' sound. Using with 'force' will force this effect despite the entity's 'shear state'.",
        "\nPlease note that..:",
        "\n- If your server is not running with Paper 1.19.4 or higher, this effect will only change its 'shear state', and the 'force' effect is unavailable",
        "\n- Force-shearing or un-shearing on a sheared mushroom cow is not possible"
      ],
      "patterns": [
        "[force] shear %living entities%",
        "un[-]shear %living entities%"
      ],
      "examples": [
        "on rightclick on a sheep holding a sword:",
        "\tshear the clicked sheep",
        "\tchance of 10%",
        "\tforce shear the clicked sheep"
      ],
      "events": null,
      "requirements": [
        "Paper 1.19.4+ (all shearable entities)"
      ],
      "keywords": null
    },
    {
      "id": "EffSilence",
      "name": "Silence Entity",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Controls whether or not an entity is silent."
      ],
      "patterns": [
        "silence %entities%",
        "unsilence %entities%",
        "make %entities% silent",
        "make %entities% not silent"
      ],
      "examples": [
        "make target entity silent"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffSort",
      "name": "Sort",
      "since": [
        "2.9.0, 2.10 (sort order)"
      ],
      "deprecated": false,
      "description": [
        "Sorts a list variable using either the natural ordering of the contents or the results of the given expression.\nBe warned, this will overwrite the indices of the list variable.\n\nWhen using the full <code>sort %~objects% (by|based on) &lt;expression&gt;</code> pattern,\nthe input expression can be used to refer to the current item being sorted.\n(See input expression for more information.)"
      ],
      "patterns": [
        "sort %~objects% [in (descending|ascending) order] [(by|based on) <.+>]"
      ],
      "examples": [
        "set {_words::*} to \"pineapple\", \"banana\", \"yoghurt\", and \"apple\"",
        "sort {_words::*} # alphabetical sort",
        "sort {_words::*} by length of input # shortest to longest",
        "sort {_words::*} in descending order by length of input # longest to shortest",
        "sort {_words::*} based on {tastiness::%input%} # sort based on custom value"
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "input"
      ]
    },
    {
      "id": "EffSprinting",
      "name": "Sprinting",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make a player start or stop sprinting.",
        "If the player is not moving when this effect is used, they will be put in sprint mode for a tick and then stopped (this causes the FOV to change). Using it a second time, without the player manually sprinting in between, causes the player to stay in sprint mode, with some quirks.",
        " - Particles may not be produced under the player's feet.",
        " - The player will not exit the sprinting state if they stop moving.",
        " - Restrictions like low hunger will not prevent the player from sprinting",
        " - The player pressing shift will stop them sprinting, and pressing sprint will re-assert normal sprinting behavior",
        "Using this effect two or more consecutive times on a stationary player produces undefined behavior and should not be relied on."
      ],
      "patterns": [
        "make %players% (start sprinting|sprint)",
        "force %players% to (start sprinting|sprint)",
        "make %players% (stop sprinting|not sprint)",
        "force %players% to (stop sprinting|not sprint)"
      ],
      "examples": [
        "make player start sprinting",
        "force player to start sprinting"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffStopServer",
      "name": "Stop Server",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Stops or restarts the server. If restart is used when the restart-script spigot.yml option isn't defined, the server will stop instead."
      ],
      "patterns": [
        "(stop|shut[ ]down) [the] server",
        "restart [the] server"
      ],
      "examples": [
        "stop the server",
        "restart server"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffStopSound",
      "name": "Stop Sound",
      "since": [
        "2.4, 2.7 (stop all sounds)"
      ],
      "deprecated": false,
      "description": [
        "Stops specific or all sounds from playing to a group of players. Both Minecraft sound names and <a href=\"https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Sound.html\">Spigot sound names</a> are supported. Resource pack sounds are supported too. The sound category is 'master' by default. A sound can't be stopped from a different category. ",
        "",
        "Please note that sound names can get changed in any Minecraft or Spigot version, or even removed from Minecraft itself."
      ],
      "patterns": [
        "stop (all sound[s]|sound[s] %texts%) [(in [the]|from) %sound category%] [(from playing to|for) %players%]",
        "stop playing sound[s] %texts% [(in [the]|from) %sound category%] [(to|for) %players%]"
      ],
      "examples": [
        "stop sound \"block.chest.open\" for the player",
        "stop playing sounds \"ambient.underwater.loop\" and \"ambient.underwater.loop.additions\" to the player",
        "stop all sounds for all players",
        "stop sound in the record category"
      ],
      "events": null,
      "requirements": [
        "MC 1.17.1 (stop all sounds)"
      ],
      "keywords": null
    },
    {
      "id": "EffStriderShivering",
      "name": "Strider Shivering",
      "since": [
        "INSERT VERSION"
      ],
      "deprecated": false,
      "description": [
        "Make a strider start/stop shivering."
      ],
      "patterns": [
        "make %living entities% start shivering",
        "force %living entities% to start shivering",
        "make %living entities% stop shivering",
        "force %living entities% to stop shivering"
      ],
      "examples": [
        "if last spawned strider is shivering:\n\tmake last spawned strider stop shivering\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffSuppressWarnings",
      "name": "Locally Suppress Warning",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Suppresses target warnings from the current script."
      ],
      "patterns": [
        "[local[ly]] suppress [the] (conflict|variable save|[missing] conjunction|starting [with] expression[s]|deprecated syntax|unreachable code) warning[s]"
      ],
      "examples": [
        "locally suppress missing conjunction warnings",
        "suppress the variable save warnings"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffSwingHand",
      "name": "Swing Hand",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "Makes an entity swing their hand. This does nothing if the entity does not have an animation for swinging their hand."
      ],
      "patterns": [
        "make %living entities% swing [their] [main] hand",
        "make %living entities% swing [their] off[ ]hand"
      ],
      "examples": [
        "make player swing their main hand"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.15.2+"
      ],
      "keywords": null
    },
    {
      "id": "EffTame",
      "name": "Tame / Untame",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Tame a tameable entity (horse, parrot, cat, etc.)."
      ],
      "patterns": [
        "[un](tame|domesticate) %entities%"
      ],
      "examples": [
        "tame {_horse}",
        "untame {_horse}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffTeleport",
      "name": "Teleport",
      "since": [
        "1.0, 2.10 (flags)"
      ],
      "deprecated": false,
      "description": [
        "Teleport an entity to a specific location. ",
        "This effect is delayed by default on Paper, meaning certain syntax such as the return effect for functions cannot be used after this effect.",
        "The keyword 'force' indicates this effect will not be delayed, ",
        "which may cause lag spikes or server crashes when using this effect to teleport entities to unloaded chunks.",
        "Teleport flags are settings to retain during a teleport. Such as direction, passengers, x coordinate, etc."
      ],
      "patterns": [
        "[force] teleport %entities% (to|%direction%) %location% [[while] retaining %teleport flags%]"
      ],
      "examples": [
        "teleport the player to {home::%uuid of player%}",
        "teleport the attacker to the victim",
        "",
        "on dismount:",
        "\tcancel event",
        "\tteleport the player to {server::spawn} retaining vehicle and passengers"
      ],
      "events": null,
      "requirements": [
        "Paper 1.19+ (teleport flags)"
      ],
      "keywords": null
    },
    {
      "id": "EffToggle",
      "name": "Toggle",
      "since": [
        "1.4, INSERT VERSION (booleans)"
      ],
      "deprecated": false,
      "description": [
        "Toggle the state of a block or boolean."
      ],
      "patterns": [
        "(open|turn on|activate) %blocks%",
        "(close|turn off|de[-]activate) %blocks%",
        "(toggle|switch) [[the] state of] %blocks/booleans (yes/no)%"
      ],
      "examples": [
        "# use arrows to toggle switches, doors, etc.",
        "on projectile hit:",
        "\tprojectile is arrow",
        "\ttoggle the block at the arrow",
        "",
        "# With booleans",
        "toggle gravity of player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffToggleCanPickUpItems",
      "name": "Toggle Picking Up Items",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Determines whether living entities are able to pick up items or not"
      ],
      "patterns": [
        "allow %living entities% to pick([ ]up items| items up)",
        "(forbid|disallow) %living entities% (from|to) pick([ing | ]up items|[ing] items up)"
      ],
      "examples": [
        "forbid player from picking up items",
        "send \"You can no longer pick up items!\" to player",
        "",
        "on drop:",
        "\tif player can't pick\tup items:",
        "\t\tallow player to pick up items"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffToggleFlight",
      "name": "Toggle Flight",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Toggle the <a href='expressions.html#ExprFlightMode'>flight mode</a> of a player."
      ],
      "patterns": [
        "(allow|enable) (fly|flight) (for|to) %players%",
        "(disallow|disable) (fly|flight) (for|to) %players%"
      ],
      "examples": [
        "allow flight to event-player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffTooltip",
      "name": "Item Tooltips",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Show or hide the tooltip of an item.",
        "If changing the 'entire' tooltip of an item, nothing will show up when a player hovers over it.",
        "If changing the 'additional' tooltip, only specific parts (which change per item) will be hidden."
      ],
      "patterns": [
        "(show|reveal|hide) %item types%'[s] [entire|additional] tool[ ]tip",
        "(show|reveal|hide) [the] [entire|additional] tool[ ]tip of %item types%"
      ],
      "examples": [
        "hide the entire tooltip of player's tool",
        "hide {_item}'s additional tool tip"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.20.5+"
      ],
      "keywords": null
    },
    {
      "id": "EffTransform",
      "name": "Transform List",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Transforms (or 'maps') a list's values using a given expression. This is akin to looping over the list and setting each value to a modified version of itself.",
        "Evaluates the given expression for each element in the list, replacing the original element with the expression's result.",
        "If the given expression returns a single value, the indices of the list will not change. If the expression returns multiple values, then then indices will be reset as a single index cannot contain multiple values.",
        "Only variable lists can be transformed with this effect. For other lists, see the transform expression."
      ],
      "patterns": [
        "(transform|map) %~objects% (using|with) <.+>"
      ],
      "examples": [
        "set {_a::*} to 1, 2, and 3",
        "transform {_a::*} using input * 2",
        "# {_a::*} is now 2, 4, and 6",
        "",
        "# get a list of the sizes of all clans without manually looping",
        "set {_clan-sizes::*} to indices of {clans::*}",
        "transform {_clan-sizes::*} using {clans::%input%::size}",
        "",
        "# set all existing values of a list to 0:",
        "transform {_list::*} to 0"
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "input"
      ]
    },
    {
      "id": "EffTree",
      "name": "Tree",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Creates a tree.",
        "This may require that there is enough space above the given location and that the block below is dirt/grass, but it is possible that the tree will just grow anyways, possibly replacing every block in its path."
      ],
      "patterns": [
        "(grow|create|generate) tree [of type %tree type%] %directions% %locations%",
        "(grow|create|generate) %tree type% %directions% %locations%"
      ],
      "examples": [
        "grow a tall redwood tree above the clicked block"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffVehicle",
      "name": "Vehicle",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "Makes an entity ride another entity, e.g. a minecart, a saddled pig, an arrow, etc."
      ],
      "patterns": [
        "(make|let|force) %entities% [to] (ride|mount) [(in|on)] %entity/entity type%",
        "(make|let|force) %entities% [to] (dismount|(dismount|leave) [(from|of)] [(any|the[ir]|his|her)] vehicle[s])",
        "(eject|dismount) [(any|the)] passenger[s] (of|from) %entities%"
      ],
      "examples": [
        "make the player ride a saddled pig",
        "make the attacker ride the victim"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffVisualEffect",
      "name": "Play Effect",
      "since": [
        "2.1"
      ],
      "deprecated": false,
      "description": [
        "Plays a <a href='classes.html#visualeffect'>visual effect</a> at a given location or on a given entity.",
        "Please note that some effects can only be played on entities, e.g. wolf hearts or the hurt effect, and that these are always visible to all players."
      ],
      "patterns": [
        "(play|show) %visual effects% (on|%directions%) %entities/locations% [(to %players%|in (radius|range) of %number%)]",
        "(play|show) %number% %visual effects% (on|%directions%) %locations% [(to %players%|in (radius|range) of %number%)]"
      ],
      "examples": [
        "play wolf hearts on the clicked wolf",
        "show mob spawner flames at the targeted block to the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffWakeupSleep",
      "name": "Wake And Sleep",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make bats and foxes sleep or wake up.",
        "Make villagers sleep by providing a location of a bed.",
        "Make players sleep by providing a location of a bed. Using 'with force' will bypass \"nearby monsters\" ,the max distance, allowing players to sleep even if the bed is far away, and lets players sleep in the nether and end. Does not work if the location of the bed is not in the world the player is currently in.",
        "Using 'without spawn location update' will make players wake up without setting their spawn location to the bed."
      ],
      "patterns": [
        "make %living entities% (start sleeping|[go to] sleep) [%direction% %location%]",
        "force %living entities% to (start sleeping|[go to] sleep) [%direction% %location%]",
        "make %players% (start sleeping|[go to] sleep) %direction% %location% (with force)",
        "force %players% to (start sleeping|[go to] sleep) %direction% %location% (with force)",
        "make %living entities% (stop sleeping|wake up)",
        "force %living entities% to (stop sleeping|wake up)",
        "make %players% (stop sleeping|wake up) (without spawn [location] update)",
        "force %players% to (stop sleeping|wake up) (without spawn [location] update)"
      ],
      "examples": [
        "make {_fox} go to sleep",
        "make {_bat} stop sleeping",
        "make {_villager} start sleeping at location(0, 0, 0)",
        "make player go to sleep at location(0, 0, 0) with force",
        "make player wake up without spawn location update"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffWardenDisturbance",
      "name": "Make Disturbance",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Make a warden sense a disturbance at a location, causing the warden to investigate that area.",
        "The warden will not investigate if the warden is aggressive towards an entity.",
        "This effect does not add anger to the warden."
      ],
      "patterns": [
        "make %living entities% sense [a] disturbance %direction% %location%"
      ],
      "examples": [
        "make last spawned warden sense a disturbance at location(0, 0, 0)"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffWorldBorderExpand",
      "name": "Expand/Shrink World Border",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Expand or shrink the size of a world border.",
        "Using `by` adds/subtracts from the current size of the world border.",
        "Using `to` sets to the specified size."
      ],
      "patterns": [
        "(expand|grow) [[the] (diameter|radius) of] %worldborders% (by|to) %number% [over [a period of] %time span%]",
        "(expand|grow) %worldborders%['s (diameter|radius)] (by|to) %number% [over [a period of] %time span%]",
        "(contract|shrink) [[the] (diameter|radius) of] %worldborders% (by|to) %number% [over [a period of] %time span%]",
        "(contract|shrink) %worldborders%['s (diameter|radius)] (by|to) %number% [over [a period of] %time span%]"
      ],
      "examples": [
        "expand world border of player by 100 in 5 seconds",
        "shrink world border of world \"world\" to 100 in 10 seconds"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffWorldLoad",
      "name": "Load World",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Load your worlds or unload your worlds",
        "The load effect will create a new world if world doesn't already exist.",
        "When attempting to load a normal vanilla world you must define it's environment i.e \"world_nether\" must be loaded with nether environment"
      ],
      "patterns": [
        "load [[the] world[s]] %texts% [with environment %environment%]",
        "unload [[the] world[s]] %worlds% [without saving]"
      ],
      "examples": [
        "load world \"world_nether\" with environment nether",
        "load the world \"myCustomWorld\"",
        "unload \"world_nether\"",
        "unload \"world_the_end\" without saving",
        "unload all worlds"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffWorldSave",
      "name": "Save World",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Save all worlds or a given world manually.",
        "Note: saving many worlds at once may possibly cause the server to freeze."
      ],
      "patterns": [
        "save [[the] world[s]] %worlds%"
      ],
      "examples": [
        "save \"world_nether\"",
        "save all worlds"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffZombify",
      "name": "Zombify Villager",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Turn a villager into a zombie villager. Cure a zombie villager immediately or after specified amount of time.",
        "This effect removes the old entity and creates a new entity.",
        "Zombifying a villager stored in a variable will update the variable to the new zombie villager.",
        "Curing a zombie villager does not update the variable."
      ],
      "patterns": [
        "zombify %living entities%",
        "unzombify %living entities% [(in|after) %time span%]"
      ],
      "examples": [
        "zombify last spawned villager",
        "",
        "set {_villager} to last spawned villager",
        "zombify {_villager}",
        "if {_villager} is a zombie villager:",
        "\t# This will pass because '{_villager}' gets changed to the new zombie villager",
        "",
        "set {_villager} to last spawned villager",
        "zombify last spawned villager",
        "if {_villager} is a zombie villager:",
        "\t# This will fail because the variable was not provided when zombifying",
        "",
        "unzombify {_zombieVillager}",
        "unzombify {_zombieVillager} after 2 seconds"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffRotate",
      "name": "Rotate",
      "since": [
        "2.2-dev28, 2.10 (quaternions, displays)"
      ],
      "deprecated": false,
      "description": [
        "Rotates displays, quaternions, or vectors around an axis a set amount of degrees, or around all 3 axes at once.",
        "Vectors can only be rotated around the global X/Y/Z axes, or an arbitrary vector axis.",
        "Quaternions are more flexible, allowing rotation around the global or local X/Y/Z axes, arbitrary vectors, or all 3 local axes at once.",
        "Global axes are the ones in the Minecraft world. Local axes are relative to how the quaternion is already oriented.",
        "",
        "Rotating a display is a shortcut for rotating its left rotation. If the right rotation needs to be modified, it should be acquired, rotated, and re-set.",
        "",
        "Note that rotating a quaternion/display around a vector results in a rotation around the local vector, so results may not be what you expect. For example, rotating quaternions/displays around vector(1, 0, 0) is the same as rotating around the local X axis.",
        "The same applies to rotations by all three axes at once. In addition, rotating around all three axes of a quaternion/display at once will rotate in ZYX order, meaning the Z rotation will be applied first and the X rotation last."
      ],
      "patterns": [
        "rotate %vectors/quaternions/displays% around [the] [global] (x|y|z)(-| )axis by %number%",
        "rotate %quaternions/displays% around [the|its|their] local (x|y|z)(-| )ax(i|e)s by %number%",
        "rotate %vectors/quaternions/displays% around [the] %vector% by %number%",
        "rotate %quaternions/displays% by x %number%, y %number%(, [and]| and) z %number%"
      ],
      "examples": [
        "rotate {_quaternion} around x axis by 10 degrees",
        "rotate last spawned block display around y axis by 10 degrees",
        "rotate {_vector} around vector(1, 1, 1) by 45",
        "rotate {_quaternion} by x 45, y 90, z 135"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffFishingLure",
      "name": "Apply Fishing Lure",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Sets whether the lure enchantment should be applied, which reduces the wait time."
      ],
      "patterns": [
        "apply [the] lure enchantment bonus",
        "remove [the] lure enchantment bonus"
      ],
      "examples": [
        "on fishing line cast:",
        "\tapply lure enchantment bonus"
      ],
      "events": [
        "Fishing"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffPullHookedEntity",
      "name": "Pull In Hooked Entity",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Pull the hooked entity to the player."
      ],
      "patterns": [
        "(reel|pull) in hook[ed] entity"
      ],
      "examples": [
        "on fishing state of caught entity:",
        "\tpull in hooked entity"
      ],
      "events": [
        "Fishing"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffAllowAging",
      "name": "Allow Aging",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Sets whether or not living entities will be able to age."
      ],
      "patterns": [
        "lock age of %living entities%",
        "prevent aging of %living entities%",
        "prevent %living entities% from aging",
        "unlock age of %living entities%",
        "allow aging of %living entities%",
        "allow %living entities% to age"
      ],
      "examples": [
        "on spawn of animal:",
        "\tallow aging of entity"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffBreedable",
      "name": "Make Breedable",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Sets whether or not entities will be able to breed. Only works on animals."
      ],
      "patterns": [
        "make %living entities% breedable",
        "unsterilize %living entities%",
        "make %living entities% (not |non(-| )|un)breedable",
        "sterilize %living entities%"
      ],
      "examples": [
        "on spawn of animal:",
        "\tmake entity unbreedable"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffMakeAdultOrBaby",
      "name": "Make Adult/Baby",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Force a animal to become an adult or baby."
      ],
      "patterns": [
        "make %living entities% [a[n]] (adult|baby)",
        "force %living entities% to be[come] a[n] (adult|baby)"
      ],
      "examples": [
        "on spawn of mob:",
        "\tentity is not an adult",
        "\tmake entity an adult"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffTextDisplayDropShadow",
      "name": "Text Display Drop Shadow",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Applies or removes drop shadow from the displayed text on a text display."
      ],
      "patterns": [
        "(apply|add) (drop|text) shadow to [[the] text of] %displays%",
        "(apply|add) (drop|text) shadow to %displays%'[s] text",
        "(remove|clear) (drop|text) shadow from [[the] text of] %displays%",
        "(remove|clear) (drop|text) shadow from %displays%'[s] text"
      ],
      "examples": [
        "apply drop shadow to last spawned text display",
        "if {_display} has drop shadow:",
        "\tremove drop shadow from the text of {_display}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffTextDisplaySeeThroughBlocks",
      "name": "Text Display See Through Blocks",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Forces a text display to either be or not be visible through blocks."
      ],
      "patterns": [
        "make %displays% visible through (blocks|walls)",
        "force %displays% to be visible through (blocks|walls)",
        "(prevent|block) %displays% from being (visible|seen) through (blocks|walls)"
      ],
      "examples": [
        "force last spawned text display to be visible through walls",
        "prevent all text displays from being visible through walls"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffRegisterTag",
      "name": "Register Tag",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Registers a new tag containing either items or entity datas. Note that items will NOT keep any information other than their type, so adding `diamond sword named \"test\"` to a tag is the same as adding `diamond sword`",
        "Item tags should be used for contexts where the item is not placed down, while block tags should be used for contexts where the item is placed. For example, and item tag could be \"skript:edible\", while a block tag would be \"skript:needs_water_above\".",
        "All custom tags will be given the namespace \"skript\", followed by the name you give it. The name must only include the characters A to Z, 0 to 9, and '/', '.', '_', and '-'. Otherwise, the tag will not register.",
        "",
        "Please note that two tags can share a name if they are of different types. Registering a new tag of the same name and type will overwrite the existing tag. Tags will reset on server shutdown."
      ],
      "patterns": [
        "register [a[n]] [custom] (item|block|entity [type]) tag named %text% (containing|using) %entity types/item types%"
      ],
      "examples": [
        "register a new custom entity tag named \"fish\" using cod, salmon, tropical fish, and pufferfish",
        "register an item tag named \"skript:wasp_weapons/swords\" containing diamond sword and netherite sword",
        "register block tag named \"pokey\" containing sweet berry bush and bamboo sapling",
        "",
        "on player move:",
        "\tblock at player is tagged as tag \"skript:pokey\"",
        "\tdamage the player by 1 heart"
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "blocks",
        "minecraft tag",
        "type",
        "category"
      ]
    },
    {
      "id": "EffGenerateLoot",
      "name": "Generate Loot",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Generates the loot in the specified inventories from a loot table using a loot context. Not specifying a loot context will use a loot context with a location at the world's origin.",
        "Note that if the inventory is full, it will cause warnings in the console due to over-filling the inventory."
      ],
      "patterns": [
        "generate [the] loot (of|using) %loot table% [(with|using) %loot context%] in %inventories%"
      ],
      "examples": [
        "generate loot of loot table \"minecraft:chests/simple_dungeon\" using loot context at player in {_inventory}",
        "generate loot using \"minecraft:chests/shipwreck_supply\" in {_inventory}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    }
  ],
  "expressions": [
    {
      "id": "ExprAbsorbedBlocks",
      "name": "Absorbed blocks",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The blocks absorbed by a sponge block."
      ],
      "patterns": [
        "[the] absorbed blocks"
      ],
      "examples": [
        "the absorbed blocks"
      ],
      "events": [
        "sponge absorb"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAffectedEntities",
      "name": "Affected Entities",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "The affected entities in the <a href='events.html#aoe_cloud_effect'>area cloud effect</a> event."
      ],
      "patterns": [
        "[the] affected entities"
      ],
      "examples": [
        "on area cloud effect:",
        "\tloop affected entities:",
        "\t\tif loop-value is a player:",
        "\t\t\tsend \"WARNING: you've step on an area effect cloud!\" to loop-value"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAllBannedEntries",
      "name": "All Banned Players/IPs",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Obtains the list of all banned players or IP addresses."
      ],
      "patterns": [
        "[all [[of] the]|the] banned (players|(ips|ip addresses))"
      ],
      "examples": [
        "command /banlist:",
        "\ttrigger:",
        "\t\tsend all the banned players"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAllCommands",
      "name": "All commands",
      "since": [
        "2.6"
      ],
      "deprecated": false,
      "description": [
        "Returns all registered commands or all script commands."
      ],
      "patterns": [
        "[(all|the|all [of] the)] [registered] [script] commands"
      ],
      "examples": [
        "send \"Number of all commands: %size of all commands%\"",
        "send \"Number of all script commands: %size of all script commands%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAngle",
      "name": "Angle",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Represents the passed number value in degrees.",
        "If radians is specified, converts the passed value to degrees. This conversion may not be entirely accurate, due to floating point precision."
      ],
      "patterns": [
        "%number% [in] deg[ree][s]",
        "%number% [in] rad[ian][s]",
        "%numbers% in deg[ree][s]",
        "%numbers% in rad[ian][s]"
      ],
      "examples": [
        "set {_angle} to 90 degrees",
        "{_angle} is 90 # true",
        "180 degrees is pi # true",
        "pi radians is 180 degrees # true"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAppliedEffect",
      "name": "Applied Beacon Effect",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The type of effect applied by a beacon."
      ],
      "patterns": [
        "[the] applied [beacon] effect"
      ],
      "examples": [
        "on beacon effect:",
        "\tif the applied effect is primary beacon effect:",
        "\t\tbroadcast \"Is Primary\"",
        "\telse if applied effect = secondary effect:",
        "\t\tbroadcast \"Is Secondary\""
      ],
      "events": [
        "Beacon Effect"
      ],
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "ExprAppliedEnchantments",
      "name": "Applied Enchantments",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The applied enchantments in an enchant event.",
        " Deleting or removing the applied enchantments will prevent the item's enchantment."
      ],
      "patterns": [
        "[the] applied enchant[ment]s"
      ],
      "examples": [
        "on enchant:",
        "\tset the applied enchantments to sharpness 10 and fire aspect 5"
      ],
      "events": [
        "enchant"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprArgument",
      "name": "Argument",
      "since": [
        "1.0, 2.7 (support for command events)"
      ],
      "deprecated": false,
      "description": [
        "Usable in script commands and command events. Holds the value of an argument given to the command, e.g. if the command \"/tell &lt;player&gt; &lt;text&gt;\" is used like \"/tell Njol Hello Njol!\" argument 1 is the player named \"Njol\" and argument 2 is \"Hello Njol!\".",
        "One can also use the type of the argument instead of its index to address the argument, e.g. in the above example 'player-argument' is the same as 'argument 1'.",
        "Please note that specifying the argument type is only supported in script commands."
      ],
      "patterns": [
        "[the] last arg[ument]",
        "[the] arg[ument](-| )<(\\d+)>",
        "[the] <(\\d*1)st|(\\d*2)nd|(\\d*3)rd|(\\d*[4-90])th> arg[ument][s]",
        "[(all [[of] the]|the)] arg[ument][s]",
        "[the] %*type%( |-)arg[ument][( |-)<\\d+>]",
        "[the] arg[ument]( |-)%*type%[( |-)<\\d+>]"
      ],
      "examples": [
        "give the item-argument to the player-argument",
        "damage the player-argument by the number-argument",
        "give a diamond pickaxe to the argument",
        "add argument 1 to argument 2",
        "heal the last argument"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAttacked",
      "name": "Attacked",
      "since": [
        "1.3, 2.6.1 (projectile hit event)"
      ],
      "deprecated": false,
      "description": [
        "The victim of a damage event, e.g. when a player attacks a zombie this expression represents the zombie. When using Minecraft 1.11+, this also covers the hit entity in a projectile hit event."
      ],
      "patterns": [
        "[the] (attacked|damaged|victim) [<(.+)>]"
      ],
      "examples": [
        "on damage:",
        "\tvictim is a creeper",
        "\tdamage the attacked by 1 heart"
      ],
      "events": [
        "damage",
        "death",
        "projectile hit"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAttacker",
      "name": "Attacker",
      "since": [
        "1.3"
      ],
      "deprecated": false,
      "description": [
        "The attacker of a damage event, e.g. when a player attacks a zombie this expression represents the player.",
        "Please note that the attacker can also be a block, e.g. a cactus or lava, but this expression will not be set in these cases."
      ],
      "patterns": [
        "[the] (attacker|damager)"
      ],
      "examples": [
        "on damage:",
        "\tattacker is a player",
        "\thealth of attacker is less than or equal to 2",
        "\tdamage victim by 1 heart"
      ],
      "events": [
        "damage",
        "death",
        "destroy"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBarterDrops",
      "name": "Barter Drops",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The items dropped by the piglin in a piglin bartering event."
      ],
      "patterns": [
        "[the] [piglin] barter[ing] drops"
      ],
      "examples": [
        "on piglin barter:",
        "\tif the bartering drops contain a jack o lantern:",
        "\t\tremove jack o lantern from bartering output",
        "\t\tbroadcast \"it's not halloween yet!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBarterInput",
      "name": "Barter Input",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The item picked up by the piglin in a piglin bartering event."
      ],
      "patterns": [
        "[the] [piglin] barter[ing] input"
      ],
      "examples": [
        "on piglin barter:",
        "\tif the bartering input is a gold ingot:",
        "\t\tbroadcast \"my precious...\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBlock",
      "name": "Block",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The block involved in the event, e.g. the clicked block or the placed block.",
        "Can optionally include a direction as well, e.g. 'block above' or 'block in front of the player'."
      ],
      "patterns": [
        "[the] [event-]block"
      ],
      "examples": [
        "block is iron ore",
        "set block below to air",
        "spawn a creeper above the block",
        "loop blocks in radius 4:",
        "\tloop-block is obsidian",
        "\tset loop-block to water",
        "block is a chest:",
        "\tclear the inventory of the block"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprCaughtErrors",
      "name": "Last Caught Errors",
      "since": [
        "INSERT VERSION"
      ],
      "deprecated": false,
      "description": [
        "Gets the last caught runtime errors from a 'catch runtime errors' section."
      ],
      "patterns": [
        "[the] last caught [run[ ]time] errors"
      ],
      "examples": [
        "catch runtime errors:\n\tset worldborder center of {_border} to location(0, 0, NaN value)\nif last caught runtime errors contains \"Your location can't have a NaN value as one of its components\":\n\tset worldborder center of {_border} to location(0, 0, 0)\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprChatFormat",
      "name": "Chat Format",
      "since": [
        "2.2-dev31"
      ],
      "deprecated": false,
      "description": [
        "Can be used to get/retrieve the chat format. The sender of a message is represented by [player] or [sender], and the message by [message] or [msg]."
      ],
      "patterns": [
        "[the] (message|chat) format[ting]"
      ],
      "examples": [
        "set the chat format to \"&lt;yellow&gt;[player]&lt;light gray&gt;: &lt;green&gt;[message]\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprChatRecipients",
      "name": "Chat Recipients",
      "since": [
        "2.2-Fixes-v7, 2.2-dev35 (clearing recipients)"
      ],
      "deprecated": false,
      "description": [
        "Recipients of chat events where this is called."
      ],
      "patterns": [
        "[chat][( |-)]recipients"
      ],
      "examples": [
        "chat recipients"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprClicked",
      "name": "Clicked Block/Entity/Inventory/Slot",
      "since": [
        "1.0, 2.2-dev35 (more clickable things)"
      ],
      "deprecated": false,
      "description": [
        "The clicked block, entity, inventory, inventory slot, inventory click type or inventory action."
      ],
      "patterns": [
        "[the] (clicked [enchant[ment]] (button|option)|clicked (block|%*item type/entity type%)|clicked slot|clicked inventory|click (type|action)|inventory action)"
      ],
      "examples": [
        "message \"You clicked on a %type of clicked entity%!\"",
        "if the clicked block is a chest:",
        "\tshow the inventory of the clicked block to the player"
      ],
      "events": [
        "click",
        "inventory click"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprCmdCooldownInfo",
      "name": "Cooldown Time/Remaining Time/Elapsed Time/Last Usage/Bypass Permission",
      "since": [
        "2.2-dev33"
      ],
      "deprecated": false,
      "description": [
        "Only usable in command events. Represents the cooldown time, the remaining time, the elapsed time,",
        "the last usage date, or the cooldown bypass permission."
      ],
      "patterns": [
        "[the] remaining [time] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]",
        "[the] elapsed [time] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]",
        "[the] ((cooldown|wait) time|[wait] time of [the] (cooldown|wait) [(of|for) [the] [current] command])",
        "[the] last usage [date] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]",
        "[the] [cooldown] bypass perm[ission] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]"
      ],
      "examples": [
        "command /home:",
        "\tcooldown: 10 seconds",
        "\tcooldown message: You last teleported home %elapsed time% ago, you may teleport home again in %remaining time%.",
        "\ttrigger:",
        "\t\tteleport player to {home::%player%}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprCommand",
      "name": "Command",
      "since": [
        "2.0, 2.7 (support for script commands)"
      ],
      "deprecated": false,
      "description": [
        "The command that caused an 'on command' event (excluding the leading slash and all arguments)"
      ],
      "patterns": [
        "[the] (full|complete|whole) command",
        "[the] command [(label|alias)]"
      ],
      "examples": [
        "# prevent any commands except for the /exit command during some game",
        "on command:",
        "\tif {game::%player%::playing} is true:",
        "\t\tif the command is not \"exit\":",
        "\t\t\tmessage \"You're not allowed to use commands during the game\"",
        "\t\t\tcancel the event"
      ],
      "events": [
        "command"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprConfig",
      "name": "Config (Experimental)",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The Skript config.",
        "This can be reloaded, or navigated to retrieve options."
      ],
      "patterns": [
        "[the] [skript] config"
      ],
      "examples": [
        "set {_node} to node \"language\" in the skript config\nif text value of {_node} is \"french\":\n\tbroadcast \"Bonjour!\"\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprConsumedItem",
      "name": "Consumed Item",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Represents the item consumed within an entity shoot bow and item consume event."
      ],
      "patterns": [
        "[the] consumed item"
      ],
      "examples": [
        "on player or skeleton shoot projectile:\n\tif the consumed item is an arrow:\n\t\tcancel event\n\t\tsend \"You're now allowed to shoot your arrows.\" to shooter\n",
        "on player consume:\n\tif the consumed item is cooked porkchop:\n\t\tsend \"Well aren't you just a little piggy wiggly!\" to player\n\tif player has scoreboard tag \"vegetarian\":\n\t\tset the consumed item to a carrot\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDamage",
      "name": "Damage",
      "since": [
        "1.3.5, 2.8.0 (item damage event)"
      ],
      "deprecated": false,
      "description": [
        "How much damage is done in a entity/vehicle/item damage events.",
        "For entity damage events, possibly ignoring armour, criticals and/or enchantments (remember that in Skript '1' is one full heart, not half a heart).",
        "For items, it's the amount of durability damage the item will be taking."
      ],
      "patterns": [
        "[the] damage"
      ],
      "examples": [
        "on item damage:",
        "\tevent-item is any tool",
        "\tclear damage # unbreakable tools as the damage will be 0",
        "on damage:",
        "\tincrease the damage by 2"
      ],
      "events": [
        "Damage",
        "Vehicle Damage",
        "Item Damage"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDrops",
      "name": "Drops",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Only works in death events. Holds the drops of the dying creature. Drops can be prevented by removing them with \"remove ... from drops\", e.g. \"remove all pickaxes from the drops\", or \"clear drops\" if you don't want any drops at all."
      ],
      "patterns": [
        "[the] drops"
      ],
      "examples": [
        "clear drops",
        "remove 4 planks from the drops"
      ],
      "events": [
        "death"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEnchantingExpCost",
      "name": "Enchanting Experience Cost",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The cost of enchanting in an enchant event.",
        "This is number that was displayed in the enchantment table, not the actual number of levels removed."
      ],
      "patterns": [
        "[the] [displayed] ([e]xp[erience]|enchanting) cost"
      ],
      "examples": [
        "on enchant:",
        "\tsend \"Cost: %the displayed enchanting cost%\" to player"
      ],
      "events": [
        "enchant"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEnchantItem",
      "name": "Enchant Item",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The enchant item in an enchant prepare event or enchant event.",
        "It can be modified, but enchantments will still be applied in the enchant event."
      ],
      "patterns": [
        "[the] enchant[ed] item"
      ],
      "examples": [
        "on enchant:",
        "\tset the enchanted item to a diamond chestplate",
        "on enchant prepare:",
        "\tset the enchant item to a wooden sword"
      ],
      "events": [
        "enchant prepare",
        "enchant"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEnchantmentBonus",
      "name": "Enchantment Bonus",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The enchantment bonus in an enchant prepare event. This represents the number of bookshelves affecting/surrounding the enchantment table."
      ],
      "patterns": [
        "[the] enchantment bonus"
      ],
      "examples": [
        "on enchant:",
        "\tsend \"There are %enchantment bonus% bookshelves surrounding this enchantment table!\" to player"
      ],
      "events": [
        "enchant prepare"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEnchantmentOffer",
      "name": "Enchantment Offer",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The enchantment offer in enchant prepare events."
      ],
      "patterns": [
        "[all [of]] [the] enchant[ment] offers",
        "enchant[ment] offer[s] %numbers%",
        "[the] %number%(st|nd|rd|th) enchant[ment] offer"
      ],
      "examples": [
        "on enchant prepare:",
        "\tsend \"Your enchantment offers are: %the enchantment offers%\" to player"
      ],
      "events": [
        "enchant prepare"
      ],
      "requirements": [
        "1.11 or newer"
      ],
      "keywords": null
    },
    {
      "id": "ExprEvtInitiator",
      "name": "Initiator Inventory",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Returns the initiator inventory in an on <a href=\"./events.html?search=#inventory_item_move\">inventory item move</a> event."
      ],
      "patterns": [
        "[the] [event-]initiator[( |-)inventory]"
      ],
      "examples": [
        "on inventory item move:",
        "\tholder of event-initiator-inventory is a chest",
        "\tbroadcast \"Item transport happening at %location at holder of event-initiator-inventory%!\""
      ],
      "events": [
        "Inventory Item Move"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprExperience",
      "name": "Experience",
      "since": [
        "2.1, 2.5.3 (block break event), 2.7 (experience change event), 2.10 (breeding, fishing)"
      ],
      "deprecated": false,
      "description": [
        "How much experience was spawned in an experience spawn or block break event. Can be changed."
      ],
      "patterns": [
        "[the] [(spawned|dropped)] [e]xp[erience] [orb[s]]"
      ],
      "examples": [
        "on experience spawn:",
        "\tadd 5 to the spawned experience",
        "",
        "on break of coal ore:",
        "\tclear dropped experience",
        "",
        "on break of diamond ore:",
        "\tif tool of player = diamond pickaxe:",
        "\t\tadd 100 to dropped experience",
        "",
        "on breed:",
        "\tbreeding father is a cow",
        "\tset dropped experience to 10",
        "",
        "on fish catch:",
        "\tadd 70 to dropped experience"
      ],
      "events": [
        "experience spawn",
        "break / mine",
        "experience change",
        "entity breeding"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprExplosionYield",
      "name": "Explosion Yield",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The yield of the explosion in an explosion prime event. This is how big the explosion is.",
        " When changing the yield, values less than 0 will be ignored.",
        " Read <a href='https://minecraft.wiki/w/Explosion'>this wiki page</a> for more information"
      ],
      "patterns": [
        "[the] explosion (yield|radius|size)",
        "[the] (yield|radius|size) of [the] explosion"
      ],
      "examples": [
        "on explosion prime:",
        "\tset the yield of the explosion to 10"
      ],
      "events": [
        "explosion prime"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFertilizedBlocks",
      "name": "Fertilized Blocks",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The blocks fertilized in block fertilize events."
      ],
      "patterns": [
        "[all] [the] fertilized blocks"
      ],
      "examples": [
        "the fertilized blocks"
      ],
      "events": [
        "block fertilize"
      ],
      "requirements": [
        "Minecraft 1.13 or newer"
      ],
      "keywords": null
    },
    {
      "id": "ExprFinalDamage",
      "name": "Final Damage",
      "since": [
        "2.2-dev19"
      ],
      "deprecated": false,
      "description": [
        "How much damage is done in a damage event, considering all types of damage reduction. Can NOT be changed."
      ],
      "patterns": [
        "[the] final damage"
      ],
      "examples": [
        "send \"%final damage%\" to victim"
      ],
      "events": [
        "damage"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprHanging",
      "name": "Hanging Entity/Remover",
      "since": [
        "2.6.2"
      ],
      "deprecated": false,
      "description": [
        "Returns the hanging entity or remover in hanging <a href='./events.html#break_mine'>break</a> and <a href='./events.html#place'>place</a> events."
      ],
      "patterns": [
        "[the] hanging (entity|remover)"
      ],
      "examples": [
        "on break of item frame:",
        "\tif item of hanging entity is diamond pickaxe:",
        "\t\tcancel event",
        "\t\tif hanging remover is a player:",
        "\t\t\tsend \"You can't break that item frame!\" to hanging remover"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprHatchingNumber",
      "name": "Hatching Number",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "The number of entities that will be hatched in a Player Egg Throw event.",
        "Please note that no more than 127 entities can be hatched at once."
      ],
      "patterns": [
        "[the] hatching number"
      ],
      "examples": [
        "on player egg throw:",
        "\tset the hatching number to 10"
      ],
      "events": [
        "Egg Throw"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprHatchingType",
      "name": "Hatching Entity Type",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "The type of the entity that will be hatched in a Player Egg Throw event."
      ],
      "patterns": [
        "[the] hatching entity [type]"
      ],
      "examples": [
        "on player egg throw:",
        "\tset the hatching entity type to a primed tnt"
      ],
      "events": [
        "Egg Throw"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprHealAmount",
      "name": "Heal Amount",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "The amount of health healed in a <a href='/events.html#heal'>heal event</a>."
      ],
      "patterns": [
        "[the] heal[ing] amount"
      ],
      "examples": [
        "on player healing:",
        "\tincrease the heal amount by 2",
        "\tremove 0.5 from the healing amount"
      ],
      "events": [
        "heal"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprHostname",
      "name": "Hostname",
      "since": [
        "2.6.1"
      ],
      "deprecated": false,
      "description": [
        "The hostname used by the connecting player to connect to the server in a <a href='events.html#connect'>connect</a> event."
      ],
      "patterns": [
        "[the] (host|domain)[ ][name]"
      ],
      "examples": [
        "on connect:",
        "\thostname is \"testers.example.com\"",
        "\tsend \"Welcome back tester!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprHotbarButton",
      "name": "Hotbar Button",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The hotbar button clicked in an <a href='events.html#inventory_click'>inventory click</a> event."
      ],
      "patterns": [
        "[the] hotbar button"
      ],
      "examples": [
        "on inventory click:",
        "\tsend \"You clicked the hotbar button %hotbar button%!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprHoverList",
      "name": "Hover List",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "The list when you hover on the player counts of the server in the server list.",
        "This can be changed using texts or players in a <a href='events.html#server_list_ping'>server list ping</a> event only. Adding players to the list means adding the name of the players.",
        "And note that, for example if there are 5 online players (includes <a href='#ExprOnlinePlayersCount'>fake online count</a>) in the server and the hover list is set to 3 values, Minecraft will show \"... and 2 more ...\" at end of the list."
      ],
      "patterns": [
        "[the] [custom] [player|server] (hover|sample) ([message] list|message)",
        "[the] [custom] player [hover|sample] list"
      ],
      "examples": [
        "on server list ping:",
        "\tclear the hover list",
        "\tadd \"&aWelcome to the &6Minecraft &aserver!\" to the hover list",
        "\tadd \"\" to the hover list # A blank line",
        "\tadd \"&cThere are &6%online players count% &conline players!\" to the hover list"
      ],
      "events": [
        "server list ping"
      ],
      "requirements": [
        "Paper 1.12.2 or newer"
      ],
      "keywords": null
    },
    {
      "id": "ExprInventoryCloseReason",
      "name": "Inventory Close Reason",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "The <a href='/classes.html#inventoryclosereason'>inventory close reason</a> of an <a href='/events.html#inventory_close'>inventory close event</a>."
      ],
      "patterns": [
        "[the] inventory clos(e|ing) (reason|cause)"
      ],
      "examples": [
        "on inventory close:",
        "\tinventory close reason is teleport",
        "\tsend \"Your inventory closed due to teleporting!\" to player"
      ],
      "events": [
        "Inventory Close"
      ],
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "ExprLastLoadedServerIcon",
      "name": "Last Loaded Server Icon",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Returns the last loaded server icon with the <a href='effects.html#EffLoadServerIcon'>load server icon</a> effect."
      ],
      "patterns": [
        "[the] [last[ly]] loaded server icon"
      ],
      "examples": [
        "set {server-icon} to the last loaded server icon"
      ],
      "events": null,
      "requirements": [
        "Paper 1.12.2 or newer"
      ],
      "keywords": null
    },
    {
      "id": "ExprLastSpawnedEntity",
      "name": "Last Spawned Entity",
      "since": [
        "1.3 (spawned entity), 2.0 (shot entity), 2.2-dev26 (dropped item), 2.7 (struck lightning, firework)"
      ],
      "deprecated": false,
      "description": [
        "Holds the entity that was spawned most recently with the spawn effect (section), dropped with the <a href='../effects/#EffDrop'>drop effect</a>, shot with the <a href='../effects/#EffShoot'>shoot effect</a> or created with the <a href='../effects/#EffLightning'>lightning effect</a>. Please note that even though you can spawn multiple mobs simultaneously (e.g. with 'spawn 5 creepers'), only the last spawned mob is saved and can be used. If you spawn an entity, shoot a projectile and drop an item you can however access all them together."
      ],
      "patterns": [
        "[the] [last[ly]] (spawned|shot) %*entity type%",
        "[the] [last[ly]] dropped (item)",
        "[the] [last[ly]] (created|struck) (lightning)",
        "[the] [last[ly]] (launched|deployed) (firework)"
      ],
      "examples": [
        "spawn a priest",
        "set {healer::%spawned priest%} to true",
        "shoot an arrow from the last spawned entity",
        "ignite the shot projectile",
        "drop a diamond sword",
        "push last dropped item upwards",
        "teleport player to last struck lightning",
        "delete last launched firework"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLocation",
      "name": "Location",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The location where an event happened (e.g. at an entity or block), or a location <a href='#ExprDirection'>relative</a> to another (e.g. 1 meter above another location)."
      ],
      "patterns": [
        "[the] [event-](location|position)"
      ],
      "examples": [
        "drop 5 apples at the event-location # exactly the same as writing 'drop 5 apples'",
        "set {_loc} to the location 1 meter above the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLoopIteration",
      "name": "Loop Iteration",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Returns the loop's current iteration count (for both normal and while loops)."
      ],
      "patterns": [
        "[the] loop(-| )(counter|iteration)[-%*number%]"
      ],
      "examples": [
        "while player is online:",
        "\tgive player 1 stone",
        "\twait 5 ticks",
        "\tif loop-counter > 30:",
        "\t\tstop loop",
        "",
        "loop {top-balances::*}:",
        "\tif loop-iteration <= 10:",
        "\t\tbroadcast \"#%loop-iteration% %loop-index% has $%loop-value%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLoopValue",
      "name": "Loop value",
      "since": [
        "1.0, 2.8.0 (loop-counter), 2.10 (previous, next)"
      ],
      "deprecated": false,
      "description": [
        "Returns the previous, current, or next looped value."
      ],
      "patterns": [
        "[the] [current] loop-<.+>",
        "[the] next loop-<.+>",
        "[the] previous loop-<.+>"
      ],
      "examples": [
        "# Countdown",
        "loop 10 times:",
        "\tmessage \"%11 - loop-number%\"",
        "\twait a second",
        "",
        "# Generate a 10x10 floor made of randomly colored wool below the player",
        "loop blocks from the block below the player to the block 10 east of the block below the player:",
        "\tloop blocks from the loop-block to the block 10 north of the loop-block:",
        "\t\tset loop-block-2 to any wool",
        "",
        "loop {top-balances::*}:",
        "\tloop-iteration <= 10",
        "\tsend \"#%loop-iteration% %loop-index% has $%loop-value%\"",
        "",
        "loop shuffled (integers between 0 and 8):",
        "\tif all:",
        "\t\tprevious loop-value = 1",
        "\t\tloop-value = 4",
        "\t\tnext loop-value = 8",
        "\tthen:",
        "\t\t kill all players"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprMe",
      "name": "Me",
      "since": [
        "2.1.1"
      ],
      "deprecated": false,
      "description": [
        "A 'me' expression that can be used in players' effect commands only."
      ],
      "patterns": [
        "me",
        "my[self]"
      ],
      "examples": [
        "!heal me",
        "!kick myself",
        "!give a diamond axe to me"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprMemory",
      "name": "Free / Max / Total Memory",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "The free, max or total memory of the server in Megabytes."
      ],
      "patterns": [
        "[the] [server] (free|max[imum]|total) (memory|ram)"
      ],
      "examples": [
        "while player is online:",
        "\tsend action bar \"Memory left: %free memory%/%max memory%MB\" to player",
        "\twait 5 ticks"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprMendingRepairAmount",
      "name": "Mending Repair Amount",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "The number of durability points an item is to be repaired in a mending event.",
        " Modifying the repair amount will affect how much experience is given to the player after mending."
      ],
      "patterns": [
        "[the] [mending] repair amount"
      ],
      "examples": [
        "on item mend:",
        "\tset the mending repair amount to 100"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprMessage",
      "name": "Message",
      "since": [
        "1.4.6 (chat message), 1.4.9 (join & quit messages), 2.0 (death message), 2.9.0 (clear message), 2.10 (broadcasted message)"
      ],
      "deprecated": false,
      "description": [
        "The (chat) message of a chat event, the join message of a join event, the quit message of a quit event, the death message of a death event or the broadcasted message in a broadcast event. This expression is mostly useful for being changed."
      ],
      "patterns": [
        "[the] [chat( |-)]message",
        "[the] (join|log[ ]in)( |-)message",
        "[the] (quit|leave|log[ ]out|kick)( |-)message",
        "[the] death( |-)message",
        "[the] broadcast(-|[ed] )message"
      ],
      "examples": [
        "on chat:",
        "\tplayer has permission \"admin\"",
        "\tset message to \"&c%message%\"",
        "",
        "on first join:",
        "\tset join message to \"Welcome %player% to our awesome server!\"",
        "",
        "on join:",
        "\tplayer has played before",
        "\tset join message to \"Welcome back, %player%!\"",
        "",
        "on quit:",
        "\tif {vanish::%player's uuid%} is set:",
        "\t\tclear quit message",
        "\telse:",
        "\t\tset quit message to \"%player% left this awesome server!\"",
        "",
        "on death:",
        "\tset the death message to \"%player% died!\"",
        "",
        "on broadcast:",
        "\tset broadcast message to \"&a[BROADCAST] %broadcast message%\""
      ],
      "events": [
        "chat",
        "join",
        "quit",
        "death",
        "broadcast"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprMOTD",
      "name": "MOTD",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "The message of the day in the server list. This can be changed in a <a href='events.html#server_list_ping'>server list ping</a> event only.",
        "'default MOTD' returns the default MOTD always and can't be changed."
      ],
      "patterns": [
        "[the] [(default)|(shown|displayed)] (MOTD|message of [the] day)"
      ],
      "examples": [
        "on server list ping:",
        "\tset the motd to \"Join now!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprNow",
      "name": "Now",
      "since": [
        "1.4"
      ],
      "deprecated": false,
      "description": [
        "The current <a href='classes.html#date'>system time</a> of the server. Use <a href='#ExprTime'>time</a> to get the <a href='classes.html#time'>Minecraft time</a> of a world."
      ],
      "patterns": [
        "now"
      ],
      "examples": [
        "broadcast \"Current server time: %now%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprNumberOfCharacters",
      "name": "Number of Characters",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The number of uppercase, lowercase, or digit characters in a string."
      ],
      "patterns": [
        "number of upper[ ]case char(acters|s) in %text%",
        "number of lower[ ]case char(acters|s) in %text%",
        "number of digit char(acters|s) in %text%"
      ],
      "examples": [
        "#Simple Chat Filter",
        "on chat:",
        "\tif number of uppercase chars in message / length of message > 0.5",
        "\t\tcancel event",
        "\t\tsend \"&lt;red&gt;Your message has to many caps!\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprOfflinePlayers",
      "name": "Offline players",
      "since": [
        "2.2-dev35"
      ],
      "deprecated": false,
      "description": [
        "All players that have ever joined the server. This includes the players currently online."
      ],
      "patterns": [
        "[(all [[of] the]|the)] offline[ ]players"
      ],
      "examples": [
        "send \"Size of all players who have joined the server: %size of all offline players%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprOnScreenKickMessage",
      "name": "On-screen Kick Message",
      "since": [
        "INSERT VERSION"
      ],
      "deprecated": false,
      "description": [
        "The kick message that is displayed on-screen when a player is kicked."
      ],
      "patterns": [
        "[the] on-screen kick message"
      ],
      "examples": [
        "on kick:",
        "\ton-screen kick message is \"Invalid hotbar selection (Hacking?)\"",
        "\tcancel event"
      ],
      "events": [
        "Kick"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprOps",
      "name": "All Operators",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "The list of operators on the server."
      ],
      "patterns": [
        "[all [[of] the]|the] [server] [non(-| )]op[erator]s"
      ],
      "examples": [
        "set {_ops::*} to all operators"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprParseError",
      "name": "Parse Error",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The error which caused the last <a href='#ExprParse'>parse operation</a> to fail, which might not be set if a pattern was used and the pattern didn't match the provided text at all."
      ],
      "patterns": [
        "[the] [last] [parse] error"
      ],
      "examples": [
        "set {var} to line 1 parsed as integer",
        "if {var} is not set:",
        "\tparse error is set:",
        "\t\tmessage \"&lt;red&gt;Line 1 is invalid: %last parse error%\"",
        "\telse:",
        "\t\tmessage \"&lt;red&gt;Please put an integer on line 1!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPlugins",
      "name": "Loaded Plugins",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "An expression to obtain a list of the names of the server's loaded plugins."
      ],
      "patterns": [
        "[(all [[of] the]|the)] [loaded] plugins"
      ],
      "examples": [
        "if the loaded plugins contains \"Vault\":",
        "\tbroadcast \"This server uses Vault plugin!\"",
        "",
        "send \"Plugins (%size of loaded plugins%): %plugins%\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPortal",
      "name": "Portal",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "The blocks associated with a portal in the portal creation event."
      ],
      "patterns": [
        "[the] portal['s] blocks",
        "[the] blocks of [the] portal"
      ],
      "examples": [
        "on portal creation:",
        "\tloop portal blocks:",
        "\t\tbroadcast \"%loop-block% is part of a portal!\""
      ],
      "events": [
        "portal_create"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprProjectileForce",
      "name": "Projectile Force",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Returns the force at which a projectile was shot within an entity shoot bow event."
      ],
      "patterns": [
        "[the] projectile force"
      ],
      "examples": [
        "on entity shoot projectile:\n\tset the velocity of shooter to vector(0,1,0) * projectile force\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprProtocolVersion",
      "name": "Protocol Version",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "The protocol version that will be sent as the protocol version of the server in a server list ping event. For more information and list of protocol versions <a href='https://wiki.vg/Protocol_version_numbers'>visit wiki.vg</a>.",
        "If this protocol version doesn't match with the protocol version of the client, the client will see the <a href='#ExprVersionString'>version string</a>.",
        "But please note that, this expression has no visual effect over the version string. For example if the server uses PaperSpigot 1.12.2, and you make the protocol version 107 (1.9),",
        "the version string will not be \"Paper 1.9\", it will still be \"Paper 1.12.2\".",
        "But then you can customize the <a href='#ExprVersionString'>version string</a> as you wish.",
        "Also if the protocol version of the player is higher than protocol version of the server, it will say",
        "\"Server out of date!\", and if vice-versa \"Client out of date!\" when you hover on the ping bars.",
        "",
        "This can be set in a <a href='events.html#server_list_ping'>server list ping</a> event only",
        "(increase and decrease effects cannot be used because that wouldn't make sense)."
      ],
      "patterns": [
        "[the] [server] [(sent|required|fake)] protocol version [number]"
      ],
      "examples": [
        "on server list ping:",
        "\tset the version string to \"&lt;light green&gt;Version: &lt;orange&gt;%minecraft version%\"",
        "\tset the protocol version to 0 # 13w41a (1.7) - so the player will see the custom version string almost always"
      ],
      "events": [
        "server list ping"
      ],
      "requirements": [
        "Paper 1.12.2 or newer"
      ],
      "keywords": null
    },
    {
      "id": "ExprPushedBlocks",
      "name": "Moved blocks",
      "since": [
        "2.2-dev27"
      ],
      "deprecated": false,
      "description": [
        "Blocks which are moved in a piston event. Cannot be used outside of piston events."
      ],
      "patterns": [
        "[the] moved blocks"
      ],
      "examples": [
        "the moved blocks"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprRandomUUID",
      "name": "Random UUID",
      "since": [
        "2.5.1, 2.11 (return UUIDs)"
      ],
      "deprecated": false,
      "description": [
        "Returns a random UUID."
      ],
      "patterns": [
        "[a] random uuid"
      ],
      "examples": [
        "set {_uuid} to random uuid"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprRawName",
      "name": "Raw Name",
      "since": [
        "unknown (2.2)"
      ],
      "deprecated": false,
      "description": [
        "The raw Minecraft material name of the given item. Note that this is not guaranteed to give same results on all servers."
      ],
      "patterns": [
        "(raw|minecraft|vanilla) name[s] of %item types%"
      ],
      "examples": [
        "raw name of tool of player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprReadiedArrow",
      "name": "Readied Arrow/Bow",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "The bow or arrow in a <a href='events.html#ready_arrow'>Ready Arrow event</a>."
      ],
      "patterns": [
        "[the] (readied|selected|drawn) (arrow|bow)"
      ],
      "examples": [
        "on player ready arrow:",
        "\tselected bow's name is \"Spectral Bow\"",
        "\tif selected arrow is not a spectral arrow:",
        "\t\tcancel event"
      ],
      "events": [
        "ready arrow"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprRespawnLocation",
      "name": "Respawn location",
      "since": [
        "2.2-dev35"
      ],
      "deprecated": false,
      "description": [
        "The location that a player should respawn at. This is used within the respawn event."
      ],
      "patterns": [
        "[the] respawn location"
      ],
      "examples": [
        "on respawn:",
        "\tset respawn location to {example::spawn}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprScript",
      "name": "Script",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The current script, or a script from its (file) name.",
        "If the script is enabled or disabled (or reloaded) this reference will become invalid.",
        "Therefore, it is recommended to obtain a script reference <em>when needed</em>."
      ],
      "patterns": [
        "[the] [current] script",
        "[the] script[s] [named] %texts%",
        "[the] scripts in [directory|folder] %text%"
      ],
      "examples": [
        "on script load:",
        "\tbroadcast \"Loaded %the current script%\"",
        "on script load:",
        "\tset {running::%script%} to true",
        "on script unload:",
        "\tset {running::%script%} to false",
        "set {script} to the script named \"weather.sk\"",
        "loop the scripts in directory \"quests/\":",
        "\tenable loop-value"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprScripts",
      "name": "All Scripts (Experimental)",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns all of the scripts, or just the enabled or disabled ones."
      ],
      "patterns": [
        "[all [[of] the]|the] scripts",
        "[all [[of] the]|the] (enabled|loaded) scripts",
        "[all [[of] the]|the] (disabled|unloaded) scripts"
      ],
      "examples": [
        "command /scripts:",
        "\ttrigger:",
        "\t\tsend \"All Scripts: %scripts%\" to player",
        "\t\tsend \"Loaded Scripts: %enabled scripts%\" to player",
        "\t\tsend \"Unloaded Scripts: %disabled scripts%\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprScriptsOld",
      "name": "All Scripts",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Returns all of the scripts, or just the enabled or disabled ones."
      ],
      "patterns": [
        "[all [of the]|the] scripts [without ([subdirectory] paths|parents)]",
        "[all [of the]|the] (enabled|loaded) scripts [without ([subdirectory] paths|parents)]",
        "[all [of the]|the] (disabled|unloaded) scripts [without ([subdirectory] paths|parents)]"
      ],
      "examples": [
        "command /scripts:",
        "\ttrigger:",
        "\t\tsend \"All Scripts: %scripts%\" to player",
        "\t\tsend \"Loaded Scripts: %enabled scripts%\" to player",
        "\t\tsend \"Unloaded Scripts: %disabled scripts%\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSentCommands",
      "name": "Sent Command List",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "The commands that will be sent to the player in a <a href='events.html#send_command_list'>send commands to player event</a>.",
        "Modifications will affect what commands show up for the player to tab complete. They will not affect what commands the player can actually run.",
        "Adding new commands to the list is illegal behavior and will be ignored."
      ],
      "patterns": [
        "[the] [sent] [server] command[s] list"
      ],
      "examples": [
        "on send command list:",
        "\tset command list to command list where [input does not contain \":\"]",
        "\tremove \"help\" from command list"
      ],
      "events": [
        "send command list"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprShooter",
      "name": "Shooter",
      "since": [
        "1.3.7, 2.11 (entity shoot bow event)"
      ],
      "deprecated": false,
      "description": [
        "The shooter of a projectile."
      ],
      "patterns": [
        "[the] shooter [of %projectile%]"
      ],
      "examples": [
        "shooter is a skeleton"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSourceBlock",
      "name": "Source Block",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "The source block in a spread event."
      ],
      "patterns": [
        "[the] source block"
      ],
      "examples": [
        "on spread:",
        "\tif the source block is a grass block:",
        "\t\tset the source block to dirt"
      ],
      "events": [
        "Spread"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSpecialNumber",
      "name": "Special Number",
      "since": [
        "2.2-dev32d"
      ],
      "deprecated": false,
      "description": [
        "Special number values, namely NaN, Infinity and -Infinity"
      ],
      "patterns": [
        "(NaN|[(-|minus)](infinity|∞)) value",
        "value of (NaN|[(-|minus)](infinity|∞))"
      ],
      "examples": [
        "if {_number} is infinity value:"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprStringCase",
      "name": "Case Text",
      "since": [
        "2.2-dev16 (lowercase and uppercase), 2.5 (advanced cases)"
      ],
      "deprecated": false,
      "description": [
        "Copy of given text in Lowercase, Uppercase, Proper Case, camelCase, PascalCase, Snake_Case, and Kebab-Case"
      ],
      "patterns": [
        "%texts% in (upper|lower)[ ]case",
        "(upper|lower)[ ]case %texts%",
        "capitali(s|z)ed %texts%",
        "%texts% in [(lenient|strict) ](proper|title)[ ]case",
        "[(lenient|strict) ](proper|title)[ ]case %texts%",
        "%texts% in [(lenient|strict) ]camel[ ]case",
        "[(lenient|strict) ]camel[ ]case %texts%",
        "%texts% in [(lenient|strict) ]pascal[ ]case",
        "[(lenient|strict) ]pascal[ ]case %texts%",
        "%texts% in [(lower|upper|capital|screaming)[ ]]snake[ ]case",
        "[(lower|upper|capital|screaming)[ ]]snake[ ]case %texts%",
        "%texts% in [(lower|upper|capital)[ ]]kebab[ ]case",
        "[(lower|upper|capital)[ ]]kebab[ ]case %texts%"
      ],
      "examples": [
        "\"Oops!\" in lowercase # oops!",
        "\"oops!\" in uppercase # OOPS!",
        "\"hellO i'm steve!\" in proper case # HellO I'm Steve!",
        "\"hellO i'm steve!\" in strict proper case # Hello I'm Steve!",
        "\"spAwn neW boSs ()\" in camel case # spAwnNeWBoSs()",
        "\"spAwn neW boSs ()\" in strict camel case # spawnNewBoss()",
        "\"geneRate ranDom numBer ()\" in pascal case # GeneRateRanDomNumBer()",
        "\"geneRate ranDom numBer ()\" in strict pascal case # GenerateRandomNumber()",
        "\"Hello Player!\" in snake case # Hello_Player!",
        "\"Hello Player!\" in lower snake case # hello_player!",
        "\"Hello Player!\" in upper snake case # HELLO_PLAYER!",
        "\"What is your name?\" in kebab case # What-is-your-name?",
        "\"What is your name?\" in lower kebab case # what-is-your-name?",
        "\"What is your name?\" in upper kebab case # WHAT-IS-YOUR-NAME?"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTamer",
      "name": "Tamer",
      "since": [
        "2.2-dev25"
      ],
      "deprecated": false,
      "description": [
        "The tamer of an entity. Can only be used in entity tame events. You can use 'event-entity' to refer tamed entity itself."
      ],
      "patterns": [
        "[the] tamer"
      ],
      "examples": [
        "on tame:",
        "\tif the tamer is a player:",
        "\t\tsend \"someone tamed something!\" to console"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTimes",
      "name": "X Times",
      "since": [
        "1.4.6"
      ],
      "deprecated": false,
      "description": [
        "Integers between 1 and X, used in loops to loop X times."
      ],
      "patterns": [
        "%number% time[s]",
        "once",
        "twice",
        "thrice"
      ],
      "examples": [
        "loop 20 times:",
        "\tbroadcast \"%21 - loop-number% seconds left..\"",
        "\twait 1 second"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTPS",
      "name": "TPS (ticks per second)",
      "since": [
        "2.2-dev36"
      ],
      "deprecated": false,
      "description": [
        "Returns the 3 most recent TPS readings, like the /tps command. This expression is only supported on some server software (PaperSpigot)."
      ],
      "patterns": [
        "tps from [the] last ([1] minute|1[ ]m[inute])",
        "tps from [the] last 5[ ]m[inutes]",
        "tps from [the] last 15[ ]m[inutes]",
        "[the] tps"
      ],
      "examples": [
        "broadcast \"%tps%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTransformReason",
      "name": "Transform Reason",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "The <a href='classes.html#transformreason'>transform reason</a> within an entity <a href='events.html#entity transform'>entity transform</a> event."
      ],
      "patterns": [
        "[the] transform[ing] (cause|reason|type)"
      ],
      "examples": [
        "on entity transform:",
        "\ttransform reason is infection, drowned or frozen"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprUnleashReason",
      "name": "Unleash Reason",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The unleash reason in an unleash event."
      ],
      "patterns": [
        "[the] unleash[ing] reason"
      ],
      "examples": [
        "if the unleash reason is distance:",
        "\tbroadcast \"The leash was snapped in half.\""
      ],
      "events": [
        "Unleash"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorCylindrical",
      "name": "Vectors - Cylindrical Shape",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Forms a 'cylindrical shaped' vector using yaw to manipulate the current point."
      ],
      "patterns": [
        "[a] [new] cylindrical vector [from|with] [radius] %number%, [yaw] %number%(,[ and]| and) [height] %number%"
      ],
      "examples": [
        "loop 360 times:",
        "\tset {_v} to cylindrical vector radius 1, yaw loop-value, height 2",
        "set {_v} to cylindrical vector radius 1, yaw 90, height 2"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorRandom",
      "name": "Vectors - Random Vector",
      "since": [
        "2.2-dev28, 2.7 (signed components)"
      ],
      "deprecated": false,
      "description": [
        "Creates a random unit vector."
      ],
      "patterns": [
        "[a] random vector"
      ],
      "examples": [
        "set {_v} to a random vector"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorSpherical",
      "name": "Vectors - Spherical Shape",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Forms a 'spherical shaped' vector using yaw and pitch to manipulate the current point."
      ],
      "patterns": [
        "[a] [new] spherical vector [(from|with)] [radius] %number%, [yaw] %number%(,[ and]| and) [pitch] %number%"
      ],
      "examples": [
        "loop 360 times:",
        "\tset {_v} to spherical vector radius 1, yaw loop-value, pitch loop-value",
        "set {_v} to spherical vector radius 1, yaw 45, pitch 90"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVersion",
      "name": "Version",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The version of Bukkit, Minecraft or Skript respectively."
      ],
      "patterns": [
        "([craft]bukkit|minecraft|skript)( |-)version"
      ],
      "examples": [
        "message \"This server is running Minecraft %minecraft version% on Bukkit %bukkit version%\"",
        "message \"This server is powered by Skript %skript version%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVersionString",
      "name": "Version String",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "The text to show if the protocol version of the server doesn't match with protocol version of the client. You can check the <a href='#ExprProtocolVersion'>protocol version</a> expression for more information about this.",
        "This can only be set in a <a href='events.html#server_list_ping'>server list ping</a> event."
      ],
      "patterns": [
        "[the] [shown|custom] version [string|text]"
      ],
      "examples": [
        "on server list ping:",
        "\tset the protocol version to 0 # 13w41a (1.7), so it will show the version string always",
        "\tset the version string to \"&lt;light green&gt;Version: &lt;orange&gt;%minecraft version%\""
      ],
      "events": [
        "Server List Ping"
      ],
      "requirements": [
        "Paper 1.12.2+"
      ],
      "keywords": null
    },
    {
      "id": "ExprWhitelist",
      "name": "Whitelist",
      "since": [
        "2.5.2, 2.9.0 (delete)"
      ],
      "deprecated": false,
      "description": [
        "An expression for obtaining and modifying the server's whitelist.",
        "Players may be added and removed from the whitelist.",
        "The whitelist can be enabled or disabled by setting the whitelist to true or false respectively."
      ],
      "patterns": [
        "[the] white[ ]list"
      ],
      "examples": [
        "set the whitelist to false",
        "add all players to whitelist",
        "reset the whitelist"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWorldFromName",
      "name": "World from Name",
      "since": [
        "2.6.1"
      ],
      "deprecated": false,
      "description": [
        "Returns the world from a string."
      ],
      "patterns": [
        "[the] world [(named|with name)] %text%"
      ],
      "examples": [
        "world named {game::world-name}",
        "the world \"world\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWorlds",
      "name": "Worlds",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "All worlds of the server, useful for looping."
      ],
      "patterns": [
        "[(all [[of] the]|the)] worlds"
      ],
      "examples": [
        "loop all worlds:",
        "\tbroadcast \"You're in %loop-world%\" to loop-world"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "LitConsole",
      "name": "Console",
      "since": [
        "1.3.1"
      ],
      "deprecated": false,
      "description": [
        "Represents the server's console which can receive messages and execute commands"
      ],
      "patterns": [
        "[the] (console|server)"
      ],
      "examples": [
        "execute console command \"/stop\"",
        "send \"message to console\" to the console"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "LitNewLine",
      "name": "New Line",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Returns a line break separator."
      ],
      "patterns": [
        "nl",
        "new[ ]line",
        "line[ ]break"
      ],
      "examples": [
        "send \"Hello%nl%Goodbye!\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "LitPi",
      "name": "Pi",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Returns the mathematical constant pi. (approx. 3.1415926535)"
      ],
      "patterns": [
        "(pi|π)"
      ],
      "examples": [
        "set {_tau} to pi * 2"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSecCreateWorldBorder",
      "name": "Create WorldBorder",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Creates a new, unused world border. World borders can be assigned to either worlds or specific players.",
        "Borders assigned to worlds apply to all players in that world.",
        "Borders assigned to players apply only to those players, and different players can have different borders."
      ],
      "patterns": [
        "a [virtual] world[ ]border"
      ],
      "examples": [
        "on join:\n\tset {_location} to location of player\n\tset worldborder of player to a virtual worldborder:\n\t\tset worldborder radius to 25\n\t\tset world border center of event-worldborder to {_location}\n",
        "on load:\n\tset worldborder of world \"world\" to a worldborder:\n\t\tset worldborder radius of event-worldborder to 200\n\t\tset worldborder center of event-worldborder to location(0, 64, 0)\n\t\tset worldborder warning distance of event-worldborder to 5\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprRotate",
      "name": "Rotated Quaternion/Vector",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Rotates a quaternion or vector around an axis a set amount of degrees, or around all 3 axes at once.",
        "Vectors can only be rotated around the global X/Y/Z axes, or an arbitrary vector axis.",
        "Quaternions are more flexible, allowing rotation around the global or local X/Y/Z axes, arbitrary vectors, or all 3 local axes at once.",
        "Global axes are the ones in the Minecraft world. Local axes are relative to how the quaternion is already oriented.",
        "",
        "Note that rotating a quaternion around a vector results in a rotation around the local vector, so results may not be what you expect. For example, rotating around vector(1, 0, 0) is the same as rotating around the local X axis.",
        "The same applies to rotations by all three axes at once. In addition, rotating around all three axes of a quaternion/display at once will rotate in ZYX order, meaning the Z rotation will be applied first and the X rotation last."
      ],
      "patterns": [
        "%quaternions/vectors% rotated around [the] [global] (x|y|z)(-| )axis by %number%",
        "%quaternions% rotated around [the|its|their] local (x|y|z)(-| )ax(i|e)s by %number%",
        "%quaternions/vectors% rotated around [the] %vector% by %number%",
        "%quaternions% rotated by x %number%, y %number%(, [and]| and) z %number%"
      ],
      "examples": [
        "set {_new} to {_quaternion} rotated around x axis by 10 degrees",
        "set {_new} to {_vector} rotated around vector(1, 1, 1) by 45",
        "set {_new} to {_quaternion} rotated by x 45, y 90, z 135"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBreedingFamily",
      "name": "Breeding Family",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Represents family members within a breeding event."
      ],
      "patterns": [
        "[the] breeding mother",
        "[the] breeding father",
        "[the] [bred] (offspring|child)",
        "[the] breeder"
      ],
      "examples": [
        "on breeding:",
        "\tsend \"When a %breeding mother% and %breeding father% love each other very much, they make a %bred offspring%\" to breeder"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTagsOfType",
      "name": "All Tags of a Type",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns all the tags.",
        "`minecraft tag` will return only the vanilla tags, `datapack tag` will return only datapack-provided tags, `paper tag` will return only Paper's custom tags (if you are running Paper), and `custom tag` will look in the \"skript\" namespace for custom tags you've registered.",
        "You can also filter by tag types using \"item\", \"block\", or \"entity\"."
      ],
      "patterns": [
        "[all [[of] the]|the] [minecraft|datapack|paper|(custom|skript)] [item|block|entity [type]] tags"
      ],
      "examples": [
        "broadcast minecraft tags",
        "send paper entity tags",
        "broadcast all block tags"
      ],
      "events": null,
      "requirements": [
        "Paper (paper tags)"
      ],
      "keywords": [
        "blocks",
        "minecraft tag",
        "type",
        "category"
      ]
    },
    {
      "id": "ExprLoot",
      "name": "Loot",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "The loot that will be generated in a 'loot generate' event."
      ],
      "patterns": [
        "[the] loot"
      ],
      "examples": [
        "on loot generate:",
        "\tchance of %10",
        "\tadd 64 diamonds to loot",
        "\tsend \"You hit the jackpot!!\""
      ],
      "events": null,
      "requirements": [
        "MC 1.16+"
      ],
      "keywords": null
    },
    {
      "id": "ExprAllGroups",
      "name": "All Groups",
      "since": [
        "2.2-dev35"
      ],
      "deprecated": false,
      "description": [
        "All the groups a player can have. This expression requires Vault and a compatible permissions plugin to be installed."
      ],
      "patterns": [
        "all groups"
      ],
      "examples": [
        "command /group &lt;text&gt;:",
        "\ttrigger:",
        "\t\tif argument is \"list\":",
        "\t\t\tsend \"%all groups%\""
      ],
      "events": null,
      "requirements": [
        "Vault",
        "a permission plugin that supports Vault"
      ],
      "keywords": null
    },
    {
      "id": "ExprDamageCause",
      "name": "Damage Cause",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The <a href='./classes.html#damagecause'>damage cause</a> of a damage event. Please click on the link for more information."
      ],
      "patterns": [
        "[the] damage (cause|type)"
      ],
      "examples": [
        "damage cause is lava, fire or burning"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprArmorChangeItem",
      "name": "Armor Change Item",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Get the unequipped or equipped armor item from a 'armor change' event."
      ],
      "patterns": [
        "[the] (old|unequipped) armo[u]r item",
        "[the] (new|equipped) armo[u]r item"
      ],
      "examples": [
        "on armor change\n\tbroadcast the old armor item\n"
      ],
      "events": [
        "Armor Change"
      ],
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "ExprCommandSender",
      "name": "Command Sender",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The player or the console who sent a command. Mostly useful in <a href='commands'>commands</a> and <a href='events.html#command'>command events</a>.",
        "If the command sender is a command block, its location can be retrieved by using %block's location%"
      ],
      "patterns": [
        "[the] [command['s]] (sender|executor)"
      ],
      "examples": [
        "make the command sender execute \"/say hi!\"",
        "",
        "on command:",
        "\tlog \"%executor% used command /%command% %arguments%\" to \"commands.log\""
      ],
      "events": [
        "command"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEgg",
      "name": "The Egg",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "The egg thrown in a Player Egg Throw event."
      ],
      "patterns": [
        "[the] [thrown] egg"
      ],
      "examples": [
        "spawn an egg at the egg"
      ],
      "events": [
        "Egg Throw"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprExperienceCooldownChangeReason",
      "name": "Experience Cooldown Change Reason",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The <a href='classes.html#experiencechangereason'>experience change reason</a> within an <a href='events.html#experience%20cooldown%20change%20event'>experience cooldown change event</a>."
      ],
      "patterns": [
        "[the] (experience|[e]xp) cooldown change (reason|cause|type)"
      ],
      "examples": [
        "on player experience cooldown change:",
        "\tif xp cooldown change reason is plugin:",
        "\t\t#Changed by a plugin",
        "\telse if xp cooldown change reason is orb pickup:",
        "\t\t#Changed by picking up xp orb"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprHealReason",
      "name": "Heal Reason",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The <a href='./classes.html#healreason'>heal reason</a> of a <a href='./events.html#heal'>heal event</a>."
      ],
      "patterns": [
        "[the] (regen|health regain|heal[ing]) (reason|cause)"
      ],
      "examples": [
        "on heal:",
        "\theal reason is satiated",
        "\tsend \"You ate enough food and gained full health back!\""
      ],
      "events": [
        "heal"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprInventoryAction",
      "name": "Inventory Action",
      "since": [
        "2.2-dev16"
      ],
      "deprecated": false,
      "description": [
        "The <a href='./classes.html#inventoryaction'>inventory action</a> of an inventory event. Please click on the link for more information."
      ],
      "patterns": [
        "[the] inventory action"
      ],
      "examples": [
        "inventory action is pickup all"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprItem",
      "name": "Item",
      "since": [
        "<i>unknown</i> (before 2.1)"
      ],
      "deprecated": false,
      "description": [
        "The item involved in an event, e.g. in a drop, dispense, pickup or craft event."
      ],
      "patterns": [
        "[the] item"
      ],
      "examples": [
        "on dispense:",
        "\titem is a clock",
        "\tset the time to 6:00"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprQuitReason",
      "name": "Quit Reason",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "The <a href='classes.html#quitreason'>quit reason</a> as to why a player disconnected in a <a href='events.html#quit'>quit</a> event."
      ],
      "patterns": [
        "[the] (quit|disconnect) (cause|reason)"
      ],
      "examples": [
        "on quit:",
        "\tquit reason was kicked",
        "\tplayer is banned",
        "\tclear {server::player::%uuid of player%::*}"
      ],
      "events": null,
      "requirements": [
        "Paper 1.16.5+"
      ],
      "keywords": null
    },
    {
      "id": "ExprSpawnReason",
      "name": "Spawn Reason",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "The <a href='classes.html#spawnreason'>spawn reason</a> in a <a href='events.html#spawn'>spawn</a> event."
      ],
      "patterns": [
        "[the] spawn[ing] reason"
      ],
      "examples": [
        "on spawn:",
        "\tspawn reason is reinforcements or breeding",
        "\tcancel event"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTeleportCause",
      "name": "Teleport Cause",
      "since": [
        "2.2-dev35"
      ],
      "deprecated": false,
      "description": [
        "The <a href='classes.html#teleportcause'>teleport cause</a> within a player <a href='events.html#teleport'>teleport</a> event."
      ],
      "patterns": [
        "[the] teleport (cause|reason|type)"
      ],
      "examples": [
        "on teleport:",
        "\tteleport cause is nether portal, end portal or end gateway",
        "\tcancel event"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFishingApproachAngle",
      "name": "Fishing Approach Angle",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the angle at which the fish will approach the fishing hook, after the wait time.",
        "The angle is in degrees, with 0 being positive Z, 90 being negative X, 180 being negative Z, and 270 being positive X.",
        "By default, returns a value between 0 and 360 degrees."
      ],
      "patterns": [
        "(min[imum]|max[imum]) fish[ing] approach[ing] angle"
      ],
      "examples": [
        "on fish approach:",
        "\tif any:",
        "\t\tmaximum fishing approach angle is bigger than 300.5 degrees",
        "\t\tmin fishing approach angle is smaller than 59.5 degrees",
        "\tthen:",
        "\t\tcancel event"
      ],
      "events": [
        "Fishing"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFishingBiteTime",
      "name": "Fishing Bite Time",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the time it takes a fish to bite the fishing hook, after it started approaching the hook.",
        "May return a timespan of 0 seconds. If modifying the value, it should be at least 1 tick."
      ],
      "patterns": [
        "fish[ing] bit(e|ing) [wait] time"
      ],
      "examples": [
        "on fish approach:",
        "\tset fishing bite time to 5 seconds"
      ],
      "events": [
        "Fishing"
      ],
      "requirements": [
        "Paper 1.20.6"
      ],
      "keywords": null
    },
    {
      "id": "ExprFishingHook",
      "name": "Fishing Hook",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The <a href='classes.html#entity'>fishing hook</a> in a fishing event."
      ],
      "patterns": [
        "[the] fish[ing] (hook|bobber)"
      ],
      "examples": [
        "on fish line cast:",
        "\twait a second",
        "\tteleport player to fishing hook"
      ],
      "events": [
        "Fishing"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFishingHookEntity",
      "name": "Fishing Hooked Entity",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the hooked entity in the hooked event."
      ],
      "patterns": [
        "hook[ed] entity"
      ],
      "examples": [
        "on entity hooked:",
        "\tif hooked entity is a player:",
        "\t\tteleport hooked entity to player"
      ],
      "events": [
        "Fishing"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFishingWaitTime",
      "name": "Fishing Wait Time",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the minimum and/or maximum waiting time of the fishing hook. ",
        "Default minimum value is 5 seconds and maximum is 30 seconds, before lure is applied."
      ],
      "patterns": [
        "(min[imum]|max[imum]) fish[ing] wait[ing] time"
      ],
      "examples": [
        "on fishing line cast:",
        "\tset min fish waiting time to 10 seconds",
        "\tset max fishing waiting time to 20 seconds"
      ],
      "events": [
        "Fishing"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLootContext",
      "name": "Loot Context",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The loot context involved in the context create section."
      ],
      "patterns": [
        "[the] loot[ ]context"
      ],
      "examples": [
        "set {_context} to a new loot context at {_location}:",
        "\tbroadcast loot context"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprRegion",
      "name": "Region",
      "since": [
        "2.1"
      ],
      "deprecated": false,
      "description": [
        "The <a href='./classes.html#region'>region</a> involved in an event.",
        "This expression requires a supported regions plugin to be installed."
      ],
      "patterns": [
        "[the] [event-]region"
      ],
      "examples": [
        "on region enter:",
        "\tregion is {forbidden region}",
        "\tcancel the event"
      ],
      "events": null,
      "requirements": [
        "Supported regions plugin"
      ],
      "keywords": null
    },
    {
      "id": "ExprAlphabetList",
      "name": "Alphabetical Sort",
      "since": [
        "2.2-dev18b"
      ],
      "deprecated": false,
      "description": [
        "Sorts given strings in alphabetical order."
      ],
      "patterns": [
        "alphabetically sorted %texts%"
      ],
      "examples": [
        "set {_list::*} to alphabetically sorted {_strings::*}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBannerItem",
      "name": "Banner Pattern Item",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Gets the item from a banner pattern type.",
        "Note that not all banner pattern types have an item."
      ],
      "patterns": [
        "[a[n]] %*banner pattern types% item[s]"
      ],
      "examples": [
        "set {_item} to creeper charged banner pattern item",
        "set {_item} to snout banner pattern item",
        "set {_item} to thing banner pattern item"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBlock-2",
      "name": "Block",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The block involved in the event, e.g. the clicked block or the placed block.",
        "Can optionally include a direction as well, e.g. 'block above' or 'block in front of the player'."
      ],
      "patterns": [
        "[the] block %direction% [%location%]"
      ],
      "examples": [
        "block is iron ore",
        "set block below to air",
        "spawn a creeper above the block",
        "loop blocks in radius 4:",
        "\tloop-block is obsidian",
        "\tset loop-block to water",
        "block is a chest:",
        "\tclear the inventory of the block"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBlocks",
      "name": "Blocks",
      "since": [
        "1.0, 2.5.1 (within/cuboid/chunk)"
      ],
      "deprecated": false,
      "description": [
        "Blocks relative to other blocks or between other blocks.",
        "Can be used to get blocks relative to other blocks or for looping.",
        "Blocks from/to and between will return a straight line whereas blocks within will return a cuboid."
      ],
      "patterns": [
        "[(all [[of] the]|the)] blocks %direction% [%locations%]",
        "[(all [[of] the]|the)] blocks from %location% [on] %direction%",
        "[(all [[of] the]|the)] blocks from %location% to %location%",
        "[(all [[of] the]|the)] blocks between %location% and %location%",
        "[(all [[of] the]|the)] blocks within %location% and %location%",
        "[(all [[of] the]|the)] blocks (in|within) %chunk%"
      ],
      "examples": [
        "loop blocks above the player:",
        "loop blocks between the block below the player and the targeted block:",
        "set the blocks below the player, the victim and the targeted block to air",
        "set all blocks within {loc1} and {loc2} to stone",
        "set all blocks within chunk at player to air"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBlockSphere",
      "name": "Block Sphere",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "All blocks in a sphere around a center, mostly useful for looping."
      ],
      "patterns": [
        "[(all [[of] the]|the)] blocks in radius %number% [(of|around) %location%]",
        "[(all [[of] the]|the)] blocks around %location% in radius %number%"
      ],
      "examples": [
        "loop blocks in radius 5 around the player:",
        "\tset loop-block to air"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBreakSpeed",
      "name": "Block Break Speed",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Gets the speed at which the given player would break this block, taking into account tools, potion effects, whether or not the player is in water, enchantments, etc. The returned value is the amount of progress made in breaking the block each tick. When the total breaking progress reaches 1.0, the block is broken. Note that the break speed can change in the course of breaking a block, e.g. if a potion effect is applied or expires, or the player jumps/enters water."
      ],
      "patterns": [
        "[the] break speed[s] [of %blocks%] [for %players%]",
        "%block%'[s] break speed[s] [for %players%]"
      ],
      "examples": [
        "on left click using diamond pickaxe:",
        "\tevent-block is set",
        "\tsend \"Break Speed: %break speed for player%\" to player"
      ],
      "events": null,
      "requirements": [
        "1.17+"
      ],
      "keywords": null
    },
    {
      "id": "ExprCharacters",
      "name": "Characters Between",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "All characters between two given characters, useful for generating random strings. This expression uses the Unicode numerical code of a character to determine which characters are between the two given characters. The <a href=\"https://www.asciitable.com/\">ASCII table linked here</a> shows this ordering for the first 256 characters.",
        "If you would like only alphanumeric characters you can use the 'alphanumeric' option in the expression.",
        "If strings of more than one character are given, only the first character of each is used."
      ],
      "patterns": [
        "[(all [[of] the]|the)] [alphanumeric] characters (between|from) %text% (and|to) %text%"
      ],
      "examples": [
        "loop characters from \"a\" to \"f\":",
        "\tbroadcast \"%loop-value%\"",
        "",
        "# 0123456789:;<=>?@ABC... ...uvwxyz",
        "send characters between \"0\" and \"z\"",
        "",
        "# 0123456789ABC... ...uvwxyz",
        "send alphanumeric characters between \"0\" and \"z\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprChestInventory",
      "name": "Custom Chest Inventory",
      "since": [
        "2.2-dev34, 2.8.0 (chat format)"
      ],
      "deprecated": false,
      "description": [
        "Returns a chest inventory with the given amount of rows and the name. Use the <a href=effects.html#EffOpenInventory>open inventory</a> effect to open it."
      ],
      "patterns": [
        "[a] [new] chest inventory (named|with name) %text% [with %number% row[s]]",
        "[a] [new] chest inventory with %number% row[s] [(named|with name) %text%]"
      ],
      "examples": [
        "open chest inventory with 1 row named \"test\" to player",
        "",
        "set {_inventory} to a chest inventory with 1 row",
        "set slot 4 of {_inventory} to a diamond named \"example\"",
        "open {_inventory} to player",
        "",
        "open chest inventory named \"<#00ff00>hex coloured title!\" with 6 rows to player"
      ],
      "events": null,
      "requirements": [
        "Paper 1.16+ (chat format)"
      ],
      "keywords": null
    },
    {
      "id": "ExprChunk",
      "name": "Chunk",
      "since": [
        "2.0, 2.8.0 (loaded chunks)"
      ],
      "deprecated": false,
      "description": [
        "Returns the <a href='./classes.html#chunk'>chunk</a> of a block, location or entity is in, or a list of the loaded chunks of a world."
      ],
      "patterns": [
        "[(all [[of] the]|the)] chunk[s] (of|%directions%) %locations%",
        "%locations%'[s] chunk[s]",
        "[(all [[of] the]|the)] loaded chunks (of|in) %worlds%"
      ],
      "examples": [
        "add the chunk at the player to {protected chunks::*}",
        "set {_chunks::*} to the loaded chunks of the player's world"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprColoured",
      "name": "Colored / Uncolored",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "Parses &lt;color&gt;s and, optionally, chat styles in a message or removes",
        "any colors <i>and</i> chat styles from the message. Parsing all",
        "chat styles requires this expression to be used in same line with",
        "the <a href=effects.html#EffSend>send effect</a>."
      ],
      "patterns": [
        "(colo[u]r-|colo[u]red )%texts%",
        "(format-|formatted )%texts%",
        "(un|non)[-](colo[u]r-|colo[u]red |format-|formatted )%texts%"
      ],
      "examples": [
        "on chat:",
        "\tset message to colored message # Safe; only colors get parsed",
        "command /fade &lt;player&gt;:",
        "\ttrigger:",
        "\t\tset display name of the player-argument to uncolored display name of the player-argument",
        "command /format &lt;text&gt;:",
        "\ttrigger:",
        "\t\tmessage formatted text-argument # Safe, because we're sending to whoever used this command"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDamagedItem",
      "name": "Damaged Item",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Directly damages an item. In MC versions 1.12.2 and lower, this can be used to apply data values to items/blocks"
      ],
      "patterns": [
        "%item type% with (damage|data) [value] %number%",
        "%item type% damaged by %number%"
      ],
      "examples": [
        "give player diamond sword with damage value 100",
        "set player's tool to diamond hoe damaged by 250",
        "give player diamond sword with damage 700 named \"BROKEN SWORD\"",
        "set {_item} to diamond hoe with damage value 50 named \"SAD HOE\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDateAgoLater",
      "name": "Date Ago/Later",
      "since": [
        "2.2-dev33"
      ],
      "deprecated": false,
      "description": [
        "A date the specified timespan before/after another date."
      ],
      "patterns": [
        "%time span% (ago|in the past|before [the] [date] %date%)",
        "%time span% (later|(from|after) [the] [date] %date%)"
      ],
      "examples": [
        "set {_yesterday} to 1 day ago",
        "set {_hourAfter} to 1 hour after {someOtherDate}",
        "set {_hoursBefore} to 5 hours before {someOtherDate}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDefaultValue",
      "name": "Default Value",
      "since": [
        "2.2-dev36"
      ],
      "deprecated": false,
      "description": [
        "A shorthand expression for giving things a default value. If the first thing isn't set, the second thing will be returned."
      ],
      "patterns": [
        "%objects% (otherwise|?) %objects%"
      ],
      "examples": [
        "broadcast {score::%player's uuid%} otherwise \"%player% has no score!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDequeuedQueue",
      "name": "De-queue Queue (Experimental)",
      "since": [
        "2.10 (experimental)"
      ],
      "deprecated": false,
      "description": [
        "Requires the <code>using queues</code> experimental feature flag to be enabled.\n\nUnrolls a queue into a regular list of values, which can be stored in a list variable.\nThe order of the list will be the same as the order of the elements in the queue.\nIf a list variable is set to this, it will use numerical indices.\nThe original queue will not be changed."
      ],
      "patterns": [
        "(de|un)queued %queue%",
        "unrolled %queue%"
      ],
      "examples": [
        "set {queue} to a new queue\nadd \"hello\" and \"there\" to {queue}\nset {list::*} to dequeued {queue}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDifference",
      "name": "Difference",
      "since": [
        "1.4"
      ],
      "deprecated": false,
      "description": [
        "The difference between two values",
        "Supported types include <a href='./classes.html#number'>numbers</a>, <a href='./classes/#date'>dates</a> and <a href='./classes/#time'>times</a>."
      ],
      "patterns": [
        "difference (between|of) %object% and %object%"
      ],
      "examples": [
        "if difference between {command::%player%::lastuse} and now is smaller than a minute:",
        "\tmessage \"You have to wait a minute before using this command again!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDirection",
      "name": "Direction",
      "since": [
        "1.0 (basic), 2.0 (extended)"
      ],
      "deprecated": false,
      "description": [
        "A helper expression for the <a href='classes.html#direction'>direction type</a>."
      ],
      "patterns": [
        "[%number% [(block|met(er|re))[s]] [to the]] (north[[(-| )](east|west)][(ward[(s|ly)]|er[(n|ly)])] [of]|south[[(-| )](east|west)][(ward[(s|ly)]|er[(n|ly)])] [of]|(east|west)[(ward[(s|ly)]|er[(n|ly)])] [of]|above|over|(up|down)[ward[(s|ly)]]|below|under[neath]|beneath) [%direction%]",
        "[%number% [(block|met(er|re))[s]]] in [the] (direction|horizontal direction|facing|horizontal facing) of %entity/block% [(of|from)]",
        "[%number% [(block|met(er|re))[s]]] in %entity/block%'[s] (direction|horizontal direction|facing|horizontal facing) [(of|from)]",
        "[%number% [(block|met(er|re))[s]]] (in[ ]front [of]|forward[s]|behind|backwards|[to the] (right|left) [of])",
        "[%number% [(block|met(er|re))[s]]] horizontal[ly] (in[ ]front [of]|forward[s]|behind|backwards|to the (right|left) [of])"
      ],
      "examples": [
        "thrust the player upwards",
        "set the block behind the player to water",
        "loop blocks above the player:",
        "\tset {_rand} to a random integer between 1 and 10",
        "\tset the block {_rand} meters south east of the loop-block to stone",
        "block in horizontal facing of the clicked entity from the player is air",
        "spawn a creeper 1.5 meters horizontally behind the player",
        "spawn a TNT 5 meters above and 2 meters horizontally behind the player",
        "thrust the last spawned TNT in the horizontal direction of the player with speed 0.2",
        "push the player upwards and horizontally forward at speed 0.5",
        "push the clicked entity in in the direction of the player at speed -0.5",
        "open the inventory of the block 2 blocks below the player to the player",
        "teleport the clicked entity behind the player",
        "grow a regular tree 2 meters horizontally behind the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDistance",
      "name": "Distance",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The distance between two points."
      ],
      "patterns": [
        "[the] distance between %location% and %location%"
      ],
      "examples": [
        "if the distance between the player and {home::%uuid of player%} is smaller than 20:",
        "\tmessage \"You're very close to your home!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDropsOfBlock",
      "name": "Drops Of Block",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "A list of the items that will drop when a block is broken."
      ],
      "patterns": [
        "[(all|the|all [of] the)] drops of %blocks% [(using|with) %item type% [(as %entity%)]]",
        "%blocks%'s drops [(using|with) %item type% [(as %entity%)]]"
      ],
      "examples": [
        "on break of block:",
        "\tgive drops of block using player's tool to player"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.15+ ('as %entity%')"
      ],
      "keywords": null
    },
    {
      "id": "ExprEntityAttribute",
      "name": "Entity Attribute",
      "since": [
        "2.5, 2.6.1 (final attribute value)"
      ],
      "deprecated": false,
      "description": [
        "The numerical value of an entity's particular attribute.",
        "Note that the movement speed attribute cannot be reliably used for players. For that purpose, use the speed expression instead.",
        "Resetting an entity's attribute is only available in Minecraft 1.11 and above."
      ],
      "patterns": [
        "[the] %attribute type% [((total|final|modified))] attribute [value] of %entities%",
        "%entities%'[s] %attribute type% [((total|final|modified))] attribute [value]"
      ],
      "examples": [
        "on damage of player:",
        "\tsend \"You are wounded!\" to victim",
        "\tset victim's attack speed attribute to 2"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEntitySound",
      "name": "Entity Sound",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Gets the sound that a given entity will make in a specific scenario."
      ],
      "patterns": [
        "[the] (damage|hurt) sound[s] of %living entities%",
        "%living entities%'[s] (damage|hurt) sound[s]",
        "[the] death sound[s] of %living entities%",
        "%living entities%'[s] death sound[s]",
        "[the] [(tall|high)|(low|normal)] fall damage sound[s] [from [[a] height [of]] %number%] of %living entities%",
        "%living entities%'[s] [(tall|high)|(low|normal)] fall [damage] sound[s] [from [[a] height [of]] %number%]",
        "[the] swim[ming] sound[s] of %living entities%",
        "%living entities%'[s] swim[ming] sound[s]",
        "[the] [(fast|speedy)] splash sound[s] of %living entities%",
        "%living entities%'[s] [(fast|speedy)] splash sound[s]",
        "[the] eat[ing] sound[s] of %living entities% [(with|using|[while] eating [a]) %item type%]",
        "%living entities%'[s] eat[ing] sound[s]",
        "[the] drink[ing] sound[s] of %living entities% [(with|using|[while] drinking [a]) %item type%]",
        "%living entities%'[s] drink[ing] sound[s]",
        "[the] ambient sound[s] of %living entities%",
        "%living entities%'[s] ambient sound[s]"
      ],
      "examples": [
        "play sound (hurt sound of player) at player",
        "set {_sounds::*} to death sounds of (all mobs in radius 10 of player)"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.19.2+"
      ],
      "keywords": null
    },
    {
      "id": "ExprExplodedBlocks",
      "name": "Exploded Blocks",
      "since": [
        "2.5, 2.8.6 (modify blocks)"
      ],
      "deprecated": false,
      "description": [
        "Get all the blocks that were destroyed in an explode event. Supports add/remove/set/clear/delete blocks."
      ],
      "patterns": [
        "[the] exploded blocks"
      ],
      "examples": [
        "on explode:",
        "\tloop exploded blocks:",
        "\t\tadd loop-block to {exploded::blocks::*}",
        "",
        "on explode:",
        "\tloop exploded blocks:",
        "\t\tif loop-block is grass:",
        "\t\t\tremove loop-block from exploded blocks",
        "",
        "on explode:",
        "\tclear exploded blocks",
        "",
        "on explode:",
        "\tset exploded blocks to blocks in radius 10 around event-entity",
        "",
        "on explode:",
        "\tadd blocks above event-entity to exploded blocks"
      ],
      "events": [
        "explode"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFilter",
      "name": "Filter",
      "since": [
        "2.2-dev36, 2.10 (parenthesis pattern)"
      ],
      "deprecated": false,
      "description": [
        "Filters a list based on a condition. ",
        "For example, if you ran 'broadcast \"something\" and \"something else\" where [string input is \"something\"]', ",
        "only \"something\" would be broadcast as it is the only string that matched the condition."
      ],
      "patterns": [
        "%objects% (where|that match) \\[<.+>\\]",
        "%objects% (where|that match) \\(<.+>\\)"
      ],
      "examples": [
        "send \"congrats on being staff!\" to all players where [player input has permission \"staff\"]",
        "loop (all blocks in radius 5 of player) where [block input is not air]:"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFireworkEffect",
      "name": "Firework Effect",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Represents a 'firework effect' which can be used in the <a href='effects.html#EffFireworkLaunch'>launch firework</a> effect."
      ],
      "patterns": [
        "[(flickering|trailing|flickering trailing|trailing flickering)] %firework type% [firework [effect]] colo[u]red %colors%",
        "[(flickering|trailing|flickering trailing|trailing flickering)] %firework type% [firework [effect]] colo[u]red %colors% fad(e|ing) [to] %colors%"
      ],
      "examples": [
        "launch flickering trailing burst firework colored blue and green at player",
        "launch trailing flickering star colored purple, yellow, blue, green and red fading to pink at target entity",
        "launch ball large colored red, purple and white fading to light green and black at player's location with duration 1"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFunction",
      "name": "Function (Experimental)",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Obtain a function by name, which can be executed."
      ],
      "patterns": [
        "[the|a] function [named] %text% [(in|from) %script%]",
        "[the] functions [named] %texts% [(in|from) %script%]",
        "[all [[of] the]|the] functions (in|from) %script%"
      ],
      "examples": [
        "set {_function} to the function named \"myFunction\"",
        "run {_function} with arguments 13 and true"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprGameRule",
      "name": "Gamerule Value",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The gamerule value of a world."
      ],
      "patterns": [
        "[the] gamerule %gamerule% of %worlds%"
      ],
      "examples": [
        "set the gamerule commandBlockOutput of world \"world\" to false"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.13+"
      ],
      "keywords": null
    },
    {
      "id": "ExprHash",
      "name": "Hash",
      "since": [
        "2.0, 2.2-dev32 (SHA-256 algorithm), INSERT VERSION (SHA-384, SHA-512)"
      ],
      "deprecated": false,
      "description": [
        "Hashes the given text using the MD5 or SHA algorithms. Each algorithm is suitable for different use cases.",
        "These hashing algorithms are not suitable for hashing passwords.",
        "If handling passwords, use a <a href='https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#password-hashing-algorithms'>hashing algorithm specifically designed for passwords</a>.",
        "MD5 is deprecated and may be removed in a future release. It is provided mostly for backwards compatibility, as it is outdated and not secure. ",
        "SHA is more secure, but is not suitable for hashing passwords (even with salting). ",
        "When hashing data, you <strong>must</strong> specify algorithms that will be used for security reasons! ",
        "Please note that a hash cannot be reversed under normal circumstances. You will not be able to get original value from a hash with Skript."
      ],
      "patterns": [
        "%texts% hash[ed] with ((MD5|SHA-256|SHA-384|SHA-512))"
      ],
      "examples": [
        "set {_hash} to \"hello world\" hashed with SHA-256"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprIndices",
      "name": "Indices of List",
      "since": [
        "2.4 (indices), 2.6.1 (sorting)"
      ],
      "deprecated": false,
      "description": [
        "Returns all the indices of a list variable, optionally sorted by their values.",
        "To sort the indices, all objects in the list must be comparable;",
        "Otherwise, this expression will just return the unsorted indices."
      ],
      "patterns": [
        "[(the|all [[of] the])] (indexes|indices) of %~objects%",
        "%~objects%'[s] (indexes|indices)",
        "[sorted] (indices|indexes) of %~objects% in (ascending|descending) order",
        "[sorted] %~objects%'[s] (indices|indexes) in (ascending|descending) order"
      ],
      "examples": [
        "set {l::*} to \"some\", \"cool\" and \"values\"",
        "broadcast \"%indices of {l::*}%\" # result is 1, 2 and 3",
        "",
        "set {_leader-board::first} to 17",
        "set {_leader-board::third} to 30",
        "set {_leader-board::second} to 25",
        "set {_leader-board::fourth} to 42",
        "set {_ascending-indices::*} to sorted indices of {_leader-board::*} in ascending order",
        "broadcast \"%{_ascending-indices::*}%\" #result is first, second, third, fourth",
        "set {_descending-indices::*} to sorted indices of {_leader-board::*} in descending order",
        "broadcast \"%{_descending-indices::*}%\" #result is fourth, third, second, first"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprIndicesOf",
      "name": "Indices Of",
      "since": [
        "2.1, INSERT VERSION (indices, positions of list)"
      ],
      "deprecated": false,
      "description": [
        "Get the first, last or all positions of a character (or text) in another text using 'positions of %text% in %text%'. Nothing is returned when the value does not occur in the text. Positions range from 1 to the <a href='#ExprIndicesOf'>length</a> of the text (inclusive).",
        "",
        "Using 'indices/positions of %objects% in %objects%', you can get the indices or positions of a list where the value at that index is the provided value. Indices are only supported for variable lists and will return the string indices of the given value. Positions can be used with any list and will return the numerical position of the value in the list, counting up from 1. As well, nothing is returned if the value is not found in the list."
      ],
      "patterns": [
        "[the] [first|last|all] (position[s]|indices|index[es]) of [[the] value] %text% in %text%",
        "[the] [first|last|all] position[s] of [[the] value] %object% in %~objects%",
        "[the] [first|last|all] (indices|index[es]) of [[the] value] %object% in %~objects%"
      ],
      "examples": [
        "set {_first} to the first position of \"@\" in the text argument",
        "if {_s} contains \"abc\":",
        "\tset {_s} to the first (position of \"abc\" in {_s} + 3) characters of {_s}",
        "\t# removes everything after the first \"abc\" from {_s}",
        "",
        "set {_list::*} to 1, 2, 3, 1, 2, 3",
        "set {_indices::*} to indices of the value 1 in {_list::*}",
        "# {_indices::*} is now \"1\" and \"4\"",
        "",
        "set {_indices::*} to all indices of the value 2 in {_list::*}",
        "# {_indices::*} is now \"2\" and \"5\"",
        "",
        "set {_positions::*} to all positions of the value 3 in {_list::*}",
        "# {_positions::*} is now 3 and 6",
        "",
        "set {_otherlist::bar} to 100",
        "set {_otherlist::hello} to \"hi\"",
        "set {_otherlist::burb} to 100",
        "set {_otherlist::tud} to \"hi\"",
        "set {_otherlist::foo} to 100",
        "",
        "set {_indices::*} to the first index of the value 100 in {_otherlist::*}",
        "# {_indices::*} is now \"bar\"",
        "set {_indices::*} to the last index of the value 100 in {_otherlist::*}",
        "# {_indices::*} is now \"foo\"",
        "",
        "set {_positions::*} to all positions of the value 100 in {_otherlist::*}",
        "# {_positions::*} is now 1, 3 and 5",
        "set {_positions::*} to all positions of the value \"hi\" in {_otherlist::*}",
        "# {_positions::*} is now 2 and 4"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprInput",
      "name": "Input",
      "since": [
        "2.2-dev36, 2.9.0 (input index)"
      ],
      "deprecated": false,
      "description": [
        "Represents the input in a filter expression or sort effect.",
        "For example, if you ran 'broadcast \"something\" and \"something else\" where [input is \"something\"]",
        "the condition would be checked twice, using \"something\" and \"something else\" as the inputs.",
        "The 'input index' pattern can be used when acting on a variable to access the index of the input."
      ],
      "patterns": [
        "input",
        "%*type% input",
        "input index"
      ],
      "examples": [
        "send \"congrats on being staff!\" to all players where [input has permission \"staff\"]",
        "sort {_list::*} based on length of input index"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprInventorySlot",
      "name": "Inventory Slot",
      "since": [
        "2.2-dev24"
      ],
      "deprecated": false,
      "description": [
        "Represents a slot in an inventory. It can be used to change the item in an inventory too."
      ],
      "patterns": [
        "[the] slot[s] %numbers% of %inventory%",
        "%inventory%'[s] slot[s] %numbers%"
      ],
      "examples": [
        "if slot 0 of player is air:",
        "\tset slot 0 of player to 2 stones",
        "\tremove 1 stone from slot 0 of player",
        "\tadd 2 stones to slot 0 of player",
        "\tclear slot 1 of player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprInverse",
      "name": "Inverse Boolean",
      "since": [
        "INSERT VERSION"
      ],
      "deprecated": false,
      "description": [
        "An expression to obtain the inverse value of a boolean"
      ],
      "patterns": [
        "[the] (inverse|opposite)[s] of %booleans (yes/no)%"
      ],
      "examples": [
        "set {_gravity} to inverse of player's flight mode"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprItemCooldown",
      "name": "Item Cooldown",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Change the cooldown of a specific material to a certain amount of <a href='./classes.html#timespan'>Timespan</a>."
      ],
      "patterns": [
        "[the] [item] cooldown of %item types% for %players%",
        "%players%'[s] [item] cooldown for %item types%"
      ],
      "examples": [
        "on right click using stick:",
        "\tset item cooldown of player's tool for player to 1 minute",
        "\tset item cooldown of stone and grass for all players to 20 seconds",
        "\treset item cooldown of cobblestone and dirt for all players"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprItems",
      "name": "Items",
      "since": [
        "1.0 pre-5"
      ],
      "deprecated": false,
      "description": [
        "Items or blocks of a specific type, useful for looping."
      ],
      "patterns": [
        "[all [[of] the]|the] block[[ ]type]s",
        "every block[[ ]type]",
        "[all [[of] the]|the|every] block[s] of type[s] %item types%",
        "[all [[of] the]|the|every] item[s] of type[s] %item types%"
      ],
      "examples": [
        "loop tag values of tag \"diamond_ores\" and tag values of tag \"oak_logs\":",
        "\tblock contains loop-item",
        "\tmessage \"Theres at least one %loop-item% in this block\"",
        "drop all blocks at the player # drops one of every block at the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprJoinSplit",
      "name": "Join & Split",
      "since": [
        "2.1, 2.5.2 (regex support), 2.7 (case sensitivity), 2.10 (without trailing string)"
      ],
      "deprecated": false,
      "description": [
        "Joins several texts with a common delimiter (e.g. \", \"), or splits a text into multiple texts at a given delimiter."
      ],
      "patterns": [
        "(concat[enate]|join) %texts% [(with|using|by) [[the] delimiter] %text%]",
        "split %text% (at|using|by) [[the] delimiter] %text% [with case sensitivity] [without [the] trailing [empty] (string|text)]",
        "%text% split (at|using|by) [[the] delimiter] %text% [with case sensitivity] [without [the] trailing [empty] (string|text)]",
        "regex split %text% (at|using|by) [[the] delimiter] %text% [without [the] trailing [empty] (string|text)]",
        "regex %text% split (at|using|by) [[the] delimiter] %text% [without [the] trailing [empty] (string|text)]"
      ],
      "examples": [
        "message \"Online players: %join all players' names with \"\" | \"\"%\" # %all players% would use the default \"x, y, and z\"",
        "set {_s::*} to the string argument split at \",\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLocation-2",
      "name": "Location",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The location where an event happened (e.g. at an entity or block), or a location <a href='#ExprDirection'>relative</a> to another (e.g. 1 meter above another location)."
      ],
      "patterns": [
        "[the] (location|position) %directions% [%location%]"
      ],
      "examples": [
        "drop 5 apples at the event-location # exactly the same as writing 'drop 5 apples'",
        "set {_loc} to the location 1 meter above the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLocationAt",
      "name": "Location At",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "Allows to create a <a href='./classes.html#location'>location</a> from three coordinates and a world."
      ],
      "patterns": [
        "[the] (location|position) [at] [\\(][x[ ][=[ ]]]%number%, [y[ ][=[ ]]]%number%, [and] [z[ ][=[ ]]]%number%[\\)] [[(in|of) [[the] world]] %world%]"
      ],
      "examples": [
        "set {_loc} to the location at arg-1, arg-2, arg-3 of the world arg-4",
        "distance between the player and the location (0, 0, 0) is less than 200"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLocationFromVector",
      "name": "Vectors - Create Location from Vector",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Creates a location from a vector in a world."
      ],
      "patterns": [
        "%vector% to location in %world%",
        "location (from|of) %vector% in %world%",
        "%vector% [to location] in %world% with yaw %number% and pitch %number%",
        "location (from|of) %vector% in %world% with yaw %number% and pitch %number%"
      ],
      "examples": [
        "set {_loc} to {_v} to location in world \"world\"",
        "set {_loc} to {_v} to location in world \"world\" with yaw 45 and pitch 90",
        "set {_loc} to location of {_v} in \"world\" with yaw 45 and pitch 90"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLocationVectorOffset",
      "name": "Vectors - Location Vector Offset",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Returns the location offset by vectors."
      ],
      "patterns": [
        "%location% offset by [[the] vectors] %vectors%",
        "%location%[ ]~[~][ ]%vectors%"
      ],
      "examples": [
        "set {_loc} to {_loc} ~ {_v}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprName",
      "name": "Name / Display Name / Tab List Name",
      "since": [
        "before 2.1",
        "2.2-dev20 (inventory name)",
        "2.4 (non-living entity support, changeable inventory name)",
        "2.7 (worlds)"
      ],
      "deprecated": false,
      "description": [
        "Represents the Minecraft account, display or tab list name of a player, or the custom name of an item, entity, block, inventory, gamerule, world, script or function.",
        "",
        "<strong>Players:</strong>",
        "\t<strong>Name:</strong> The Minecraft account name of the player. Can't be changed, but 'display name' can be changed.",
        "\t<strong>Display Name:</strong> The name of the player that is displayed in messages. This name can be changed freely and can include color codes, and is shared among all plugins (e.g. chat plugins will use the display name).",
        "",
        "<strong>Entities:</strong>",
        "\t<strong>Name:</strong> The custom name of the entity. Can be changed. But for living entities, the players will have to target the entity to see its name tag. For non-living entities, the name will not be visible at all. To prevent this, use 'display name'.",
        "\t<strong>Display Name:</strong> The custom name of the entity. Can be changed, which will also enable <em>custom name visibility</em> of the entity so name tag of the entity will be visible always.",
        "",
        "<strong>Items:</strong>",
        "\t<strong>Name and Display Name:</strong> The <em>custom</em> name of the item (not the Minecraft locale name). Can be changed.",
        "",
        "<strong>Inventories:</strong>",
        "\t<strong>Name and Display Name:</strong> The name/title of the inventory. Changing name of an inventory means opening the same inventory with the same contents but with a different name to its current viewers.",
        "",
        "<strong>Gamerules:</strong>",
        "\t<strong>Name:</strong> The name of the gamerule. Cannot be changed.",
        "",
        "<strong>Worlds:</strong>",
        "\t<strong>Name:</strong> The name of the world. Cannot be changed.",
        "",
        "<strong>Scripts:</strong>",
        "\t<strong>Name:</strong> The name of a script, excluding its file extension."
      ],
      "patterns": [
        "[the] name[s] of %offline players/entities/named things/inventories%",
        "%offline players/entities/named things/inventories%'[s] name[s]",
        "[the] (display|nick|chat|custom)[ ]name[s] of %offline players/entities/named things/inventories%",
        "%offline players/entities/named things/inventories%'[s] (display|nick|chat|custom)[ ]name[s]",
        "[the] (player|tab)[ ]list name[s] of %players%",
        "%players%'[s] (player|tab)[ ]list name[s]"
      ],
      "examples": [
        "on join:",
        "\tplayer has permission \"name.red\"",
        "\tset the player's display name to \"&lt;red&gt;[admin] &lt;gold&gt;%name of player%\"",
        "\tset the player's tab list name to \"&lt;green&gt;%player's name%\"",
        "set the name of the player's tool to \"Legendary Sword of Awesomeness\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprNearestEntity",
      "name": "Nearest Entity",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Gets the entity nearest to a location or another entity."
      ],
      "patterns": [
        "[the] nearest %*entity types% [[relative] to %entity/location%]",
        "[the] %*entity types% nearest [to %entity/location%]"
      ],
      "examples": [
        "kill the nearest pig and cow relative to player",
        "teleport player to the nearest cow relative to player",
        "teleport player to the nearest entity relative to player",
        "",
        "on click:",
        "\tkill nearest pig"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprNewBannerPattern",
      "name": "Banner Pattern",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Creates a new banner pattern."
      ],
      "patterns": [
        "[a] %banner pattern type% colo[u]red %color%"
      ],
      "examples": [
        "set {_pattern} to a creeper banner pattern colored red",
        "add {_pattern} to banner patterns of {_banneritem}",
        "remove {_pattern} from banner patterns of {_banneritem}",
        "set the 1st banner pattern of block at location(0,0,0) to {_pattern}",
        "clear the 1st banner pattern of block at location(0,0,0)"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprNumbers",
      "name": "Numbers",
      "since": [
        "1.4.6 (integers & numbers), 2.5.1 (decimals)"
      ],
      "deprecated": false,
      "description": [
        "All numbers between two given numbers, useful for looping.",
        "Use 'numbers' if your start is not an integer and you want to keep the fractional part of the start number constant, or use 'integers' if you only want to loop integers.",
        "You may also use 'decimals' if you want to use the decimal precision of the start number.",
        "You may want to use the 'times' expression instead, for instance 'loop 5 times:'"
      ],
      "patterns": [
        "[(all [[of] the]|the)] (numbers|integers|decimals) (between|from) %number% (and|to) %number%"
      ],
      "examples": [
        "loop numbers from 2.5 to 5.5: # loops 2.5, 3.5, 4.5, 5.5",
        "loop integers from 2.9 to 5.1: # same as '3 to 5', i.e. loops 3, 4, 5",
        "loop decimals from 3.94 to 4: # loops 3.94, 3.95, 3.96, 3.97, 3.98, 3.99, 4"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprParse",
      "name": "Parse",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "Parses text as a given type, or as a given pattern.",
        "This expression can be used in two different ways: One which parses the entire text as a single instance of a type, e.g. as a number, and one that parses the text according to a pattern.",
        "If the given text could not be parsed, this expression will return nothing and the <a href='#ExprParseError'>parse error</a> will be set if some information is available.",
        "Some notes about parsing with a pattern:",
        "- The pattern must be a <a href='./patterns/'>Skript pattern</a>, e.g. percent signs are used to define where to parse which types, e.g. put a %number% or %items% in the pattern if you expect a number or some items there.",
        "- You <i>have to</i> save the expression's value in a list variable, e.g. <code>set {parsed::*} to message parsed as \"...\"</code>.",
        "- The list variable will contain the parsed values from all %types% in the pattern in order. If a type was plural, e.g. %items%, the variable's value at the respective index will be a list variable, e.g. the values will be stored in {parsed::1::*}, not {parsed::1}."
      ],
      "patterns": [
        "%text% parsed as (%*type%|\"<.*>\")"
      ],
      "examples": [
        "set {var} to line 1 parsed as number",
        "on chat:",
        "\tset {var::*} to message parsed as \"buying %items% for %money%\"",
        "\tif parse error is set:",
        "\t\tmessage \"%parse error%\"",
        "\telse if {var::*} is set:",
        "\t\tcancel event",
        "\t\tremove {var::2} from the player's balance",
        "\t\tgive {var::1::*} to the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPercent",
      "name": "Percent of",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Returns a percentage of one or more numbers."
      ],
      "patterns": [
        "%number%(\\%| percent) of %numbers%"
      ],
      "examples": [
        "set damage to 10% of victim's health",
        "set damage to 125 percent of damage",
        "set {_result} to {_percent} percent of 999",
        "set {_result::*} to 10% of {_numbers::*}",
        "set experience to 50% of player's total experience"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPlain",
      "name": "Plain Item",
      "since": [
        "2.6"
      ],
      "deprecated": false,
      "description": [
        "A plain item is an item with no modifications. It can be used to convert items to their default state or to match with other default items."
      ],
      "patterns": [
        "[a[n]] (plain|unmodified) %item type%"
      ],
      "examples": [
        "if the player's tool is a plain diamond: # check if player's tool has no modifications",
        "\tsend \"You are holding a plain diamond!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPotionEffect",
      "name": "Potion Effect",
      "since": [
        "2.5.2"
      ],
      "deprecated": false,
      "description": [
        "Create a new potion effect to apply to an entity or item type. Do note that when applying potion effects ",
        "to tipped arrows/lingering potions, Minecraft reduces the timespan."
      ],
      "patterns": [
        "[new] potion effect of %potion effect type% [potion] [[[of] tier] %number%] [without particles] [for %time span%]",
        "[new] ambient potion effect of %potion effect type% [potion] [[[of] tier] %number%] [without particles] [for %time span%]"
      ],
      "examples": [
        "set {_p} to potion effect of speed of tier 1 without particles for 10 minutes",
        "add {_p} to potion effects of player's tool",
        "add {_p} to potion effects of target entity",
        "add potion effect of speed 1 to potion effects of player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPotionEffectTier",
      "name": "Potion Effect Tier",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "An expression to obtain the amplifier of a potion effect applied to an entity."
      ],
      "patterns": [
        "[the] [potion] (tier|amplifier|level) of %potion effect types% (of|for|on) %living entities%"
      ],
      "examples": [
        "if the amplifier of haste of player >= 3:"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprQueue",
      "name": "Queue (Experimental)",
      "since": [
        "2.10 (experimental)"
      ],
      "deprecated": false,
      "description": [
        "Requires the <code>using queues</code> experimental feature flag to be enabled.\n\nCreates a new queue.\nA queue is a set of elements that can have things removed from the start and added to the end.\n\nAny value can be added to a queue. Adding a non-existent value (e.g. `{variable that isn't set}`) will have no effect.\nThis means that removing an element from the queue will always return a value <i>unless the queue is empty</i>.\n\nRequesting an element from a queue (e.g. `the 1st element of {queue}`) also removes it from the queue."
      ],
      "patterns": [
        "[a] [new] queue [(of|with) %objects%]"
      ],
      "examples": [
        "set {queue} to a new queue\nadd \"hello\" and \"there\" to {queue}\nbroadcast the first element of {queue} # hello\nbroadcast the first element of {queue} # there\n# queue is now empty",
        "set {queue} to a new queue of \"hello\" and \"there\"\nbroadcast the last element of {queue} # removes 'there'\nadd \"world\" to {queue}\nbroadcast the first 2 elements of {queue} # removes 'hello', 'world'"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprRandom",
      "name": "Random",
      "since": [
        "1.4.9"
      ],
      "deprecated": false,
      "description": [
        "Gets a random item out of a set, e.g. a random player out of all players online."
      ],
      "patterns": [
        "[a] random %*type% [out] of %objects%"
      ],
      "examples": [
        "give a diamond to a random player out of all players",
        "give a random item out of all items to the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprRandomCharacter",
      "name": "Random Character",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "One or more random characters between two given characters. Use 'alphanumeric' if you want only alphanumeric characters.",
        "This expression uses the Unicode numerical code of a character to determine which characters are between the two given characters.",
        "If strings of more than one character are given, only the first character of each is used."
      ],
      "patterns": [
        "[a|%integer%] random [alphanumeric] character[s] (from|between) %text% (to|and) %text%"
      ],
      "examples": [
        "set {_captcha} to join (5 random characters between \"a\" and \"z\") with \"\"",
        "send 3 random alphanumeric characters between \"0\" and \"z\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprRandomNumber",
      "name": "Random Numbers",
      "since": [
        "1.4, 2.10 (Multiple random numbers)"
      ],
      "deprecated": false,
      "description": [
        "A given amount of random numbers or integers between two given numbers. Use 'number' if you want any number with decimal parts, or use use 'integer' if you only want whole numbers.",
        "Please note that the order of the numbers doesn't matter, i.e. <code>random number between 2 and 1</code> will work as well as <code>random number between 1 and 2</code>."
      ],
      "patterns": [
        "[a|%integer%] random (integer|number)[s] (from|between) %number% (to|and) %number%"
      ],
      "examples": [
        "set the player's health to a random number between 5 and 10",
        "send \"You rolled a %random integer from 1 to 6%!\" to the player",
        "set {_chances::*} to 5 random integers between 5 and 96",
        "set {_decimals::*} to 3 random numbers between 2.7 and -1.5"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprRawString",
      "name": "Raw String",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Returns the string without formatting (colors etc.) and without stripping them from it, e.g. <code>raw \"&aHello There!\"</code> would output <code>&aHello There!</code>"
      ],
      "patterns": [
        "raw %texts%"
      ],
      "examples": [
        "send raw \"&aThis text is unformatted!\" to all players"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprRepeat",
      "name": "Repeat String",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Repeats inputted strings a given amount of times."
      ],
      "patterns": [
        "%texts% repeated %integer% time[s]"
      ],
      "examples": [
        "broadcast nl and nl repeated 200 times",
        "broadcast \"Hello World \" repeated 5 times",
        "if \"aa\" repeated 2 times is \"aaaa\":",
        "\tbroadcast \"Ahhhh\" repeated 100 times"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprResult",
      "name": "Result (Experimental)",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Runs something (like a function) and returns its result.",
        "If the thing is expected to return multiple values, use 'results' instead of 'result'."
      ],
      "patterns": [
        "[the] result[s] of [running|executing] %executable% [with arg[ument]s %objects%]"
      ],
      "examples": [
        "set {_function} to the function named \"myFunction\"",
        "set {_result} to the result of {_function}",
        "set {_list::*} to the results of {_function}",
        "set {_result} to the result of {_function} with arguments 13 and true"
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "run",
        "result",
        "execute",
        "function",
        "reflection"
      ]
    },
    {
      "id": "ExprReversedList",
      "name": "Reversed List",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Reverses given list."
      ],
      "patterns": [
        "reversed %objects%"
      ],
      "examples": [
        "set {_list::*} to reversed {_list::*}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprShuffledList",
      "name": "Shuffled List",
      "since": [
        "2.2-dev32"
      ],
      "deprecated": false,
      "description": [
        "Shuffles given list randomly. This is done by replacing indices by random numbers in resulting list."
      ],
      "patterns": [
        "shuffled %objects%"
      ],
      "examples": [
        "set {_list::*} to shuffled {_list::*}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSortedList",
      "name": "Sorted List",
      "since": [
        "2.2-dev19"
      ],
      "deprecated": false,
      "description": [
        "Sorts given list in natural order. All objects in list must be comparable; if they're not, this expression will return nothing."
      ],
      "patterns": [
        "sorted %objects%"
      ],
      "examples": [
        "set {_sorted::*} to sorted {_players::*}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSubstring",
      "name": "Substring",
      "since": [
        "2.1, 2.5.2 (character at, multiple strings support)"
      ],
      "deprecated": false,
      "description": [
        "Extracts part of a text. You can either get the first &lt;x&gt; characters, the last &lt;x&gt; characters, the character at index &lt;x&gt;, or the characters between indices &lt;x&gt; and &lt;y&gt;. The indices &lt;x&gt; and &lt;y&gt; should be between 1 and the <a href='#ExprLength'>length</a> of the text (other values will be fit into this range)."
      ],
      "patterns": [
        "[the] (part|sub[ ](text|string)) of %texts% (between|from) [ind(ex|ices)|character[s]] %number% (and|to) [(index|character)] %number%",
        "[the] (first|last) [%number%] character[s] of %texts%",
        "[the] %number% (first|last) characters of %texts%",
        "[the] character[s] at [(index|position|indexes|indices|positions)] %numbers% (in|of) %texts%"
      ],
      "examples": [
        "set {_s} to the first 5 characters of the text argument",
        "message \"%subtext of {_s} from characters 2 to (the length of {_s} - 1)%\" # removes the first and last character from {_s} and sends it to the player or console",
        "set {_characters::*} to characters at 1, 2 and 7 in player's display name",
        "send the last character of all players' names"
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "substring",
        "subtext"
      ]
    },
    {
      "id": "ExprTargetedBlock",
      "name": "Targeted Block",
      "since": [
        "1.0, 2.9.0 (actual/exact)"
      ],
      "deprecated": false,
      "description": [
        "The block at the crosshair. This regards all blocks that are not air as fully solid, e.g. torches will be like a solid stone block for this expression.",
        "The actual target block will regard the actual hit box of the block."
      ],
      "patterns": [
        "[the] [(actual[ly]|exact)] target[ed] block[s] [of %living entities%]",
        "%living entities%'[s] [(actual[ly]|exact)] target[ed] block[s]"
      ],
      "examples": [
        "set target block of player to stone",
        "set target block of player to oak_stairs[waterlogged=true]",
        "break target block of player using player's tool",
        "give player 1 of type of target block",
        "teleport player to location above target block",
        "kill all entities in radius 3 around target block of player",
        "set {_block} to actual target block of player",
        "break actual target block of player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTernary",
      "name": "Ternary",
      "since": [
        "2.2-dev36"
      ],
      "deprecated": false,
      "description": [
        "A shorthand expression for returning something based on a condition."
      ],
      "patterns": [
        "%objects% if <.+>[,] (otherwise|else) %objects%"
      ],
      "examples": [
        "set {points} to 500 if {admin::%player's uuid%} is set else 100"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprValueWithin",
      "name": "Value Within",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Gets the value within objects. Usually used with variables to get the value they store rather than the variable itself, or with lists to get the values of a type."
      ],
      "patterns": [
        "[the] (%*type%|value[s]) (within|in) %~objects%"
      ],
      "examples": [
        "set {_entity} to a random entity out of all entities",
        "delete entity within {_entity} # This deletes the entity itself and not the value stored in the variable",
        "",
        "set {_list::*} to \"something\", 10, \"test\" and a zombie",
        "broadcast the strings within {_list::*} # \"something\", \"test\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorAngleBetween",
      "name": "Vectors - Angle Between",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Gets the angle between two vectors."
      ],
      "patterns": [
        "[the] angle between [[the] vectors] %vector% and %vector%"
      ],
      "examples": [
        "send \"%the angle between vector 1, 0, 0 and vector 0, 1, 1%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorBetweenLocations",
      "name": "Vectors - Vector Between Locations",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Creates a vector between two locations."
      ],
      "patterns": [
        "[the] vector (from|between) %location% (to|and) %location%"
      ],
      "examples": [
        "set {_v} to vector between {_loc1} and {_loc2}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorCrossProduct",
      "name": "Vectors - Cross Product",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Gets the cross product between two vectors."
      ],
      "patterns": [
        "%vector% cross %vector%"
      ],
      "examples": [
        "send \"%vector 1, 0, 0 cross vector 0, 1, 0%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorDotProduct",
      "name": "Vectors - Dot Product",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Gets the dot product between two vectors."
      ],
      "patterns": [
        "%vector% dot %vector%"
      ],
      "examples": [
        "set {_dot} to {_v1} dot {_v2}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorFromXYZ",
      "name": "Vectors - Create from XYZ",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Creates a vector from x, y and z values."
      ],
      "patterns": [
        "[a] [new] vector [(from|at|to)] %number%,[ ]%number%(,[ ]| and )%number%"
      ],
      "examples": [
        "set {_v} to vector 0, 1, 0"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorFromYawAndPitch",
      "name": "Vectors - Vector from Yaw and Pitch",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Creates a vector from a yaw and pitch value."
      ],
      "patterns": [
        "[a] [new] vector (from|with) yaw %number% and pitch %number%",
        "[a] [new] vector (from|with) pitch %number% and yaw %number%"
      ],
      "examples": [
        "set {_v} to vector from yaw 45 and pitch 45"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorNormalize",
      "name": "Vectors - Normalized",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Returns the same vector but with length 1."
      ],
      "patterns": [
        "normalize[d] %vector%",
        "%vector% normalized"
      ],
      "examples": [
        "set {_v} to normalized {_v}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorProjection",
      "name": "Vectors - Vector Projection",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "An expression to get the vector projection of two vectors."
      ],
      "patterns": [
        "[vector] projection [of] %vector% on[to] %vector%"
      ],
      "examples": [
        "set {_projection} to vector projection of vector(1, 2, 3) onto vector(4, 4, 4)"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWardenEntityAnger",
      "name": "Warden Anger Level",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The anger level a warden feels towards an entity.",
        "A warden can be angry towards multiple entities with different anger levels.",
        "If an entity reaches an anger level of 80+, the warden will pursue it.",
        "Anger level maxes out at 150."
      ],
      "patterns": [
        "[the] anger level [of] %living entities% towards %living entities%",
        "%living entities%'[s] anger level towards %living entities%"
      ],
      "examples": [
        "set the anger level of last spawned warden towards player to 20",
        "clear the last spawned warden's anger level towards player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWithItemFlags",
      "name": "Item with Item Flags",
      "since": [
        "2.10, 2.11 (all itemflags)"
      ],
      "deprecated": false,
      "description": [
        "Creates a new item with the specified item flags."
      ],
      "patterns": [
        "%item types% with [the] item flag[s] %item flags%",
        "%item types% with [the] %item flags% item flag[s]",
        "%item types% with all [the] item flags"
      ],
      "examples": [
        "give player diamond sword with item flags hide enchants and hide attributes",
        "set {_item} to player's tool with item flag hide additional tooltip",
        "give player torch with hide placed on item flag",
        "set {_item} to diamond sword with all item flags"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTag",
      "name": "Tag",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Represents a tag which can be used to classify items, blocks, or entities.",
        "Tags are composed of a value and an optional namespace: \"minecraft:oak_logs\".",
        "If you omit the namespace, one will be provided for you, depending on what kind of tag you're using. For example, `tag \"doors\"` will be the tag \"minecraft:doors\", while `paper tag \"doors\"` will be \"paper:doors\".",
        "`minecraft tag` will search through the vanilla tags, `datapack tag` will search for datapack-provided tags (a namespace is required here!), `paper tag` will search for Paper's custom tags if you are running Paper, and `custom tag` will look in the \"skript\" namespace for custom tags you've registered.",
        "You can also filter by tag types using \"item\", \"block\", or \"entity\"."
      ],
      "patterns": [
        "[minecraft|datapack|paper|(custom|skript)] [item|block|entity [type]] tag %texts%"
      ],
      "examples": [
        "minecraft tag \"dirt\" # minecraft:dirt",
        "paper tag \"doors\" # paper:doors",
        "tag \"skript:custom_dirt\" # skript:custom_dirt",
        "custom tag \"dirt\" # skript:dirt",
        "datapack block tag \"dirt\" # minecraft:dirt",
        "datapack tag \"my_pack:custom_dirt\" # my_pack:custom_dirt",
        "tag \"minecraft:mineable/pickaxe\" # minecraft:mineable/pickaxe",
        "custom item tag \"blood_magic_sk/can_sacrifice_with\" # skript:blood_magic_sk/can_sacrifice_with"
      ],
      "events": null,
      "requirements": [
        "Paper (paper tags)"
      ],
      "keywords": [
        "blocks",
        "minecraft tag",
        "type",
        "category"
      ]
    },
    {
      "id": "ExprLootItems",
      "name": "Loot of Loot Table",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the items of a loot table using a loot context. Not specifying a loot context will use a loot context with a location at the world's origin."
      ],
      "patterns": [
        "[the] loot of %loot tables% [(with|using) %loot context%]",
        "%loot tables%'[s] loot [(with|using) %loot context%]"
      ],
      "examples": [
        "set {_items::*} to loot items of the loot table \"minecraft:chests/simple_dungeon\" with loot context {_context}",
        "# this will set {_items::*} to the items that would be dropped from the simple dungeon loot table with the given loot context",
        "",
        "give player loot items of entity's loot table with loot context {_context}",
        "# this will give the player the items that the entity would drop with the given loot context"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLootTableFromString",
      "name": "Loot Table from Key",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the loot table from a namespaced key."
      ],
      "patterns": [
        "[the] loot[ ]table[s] %texts%"
      ],
      "examples": [
        "set {_table} to loot table \"minecraft:chests/simple_dungeon\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSecCreateLootContext",
      "name": "Create Loot Context",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Create a loot context."
      ],
      "patterns": [
        "[a] loot context %direction% %location%"
      ],
      "examples": [
        "set {_player} to player",
        "set {_context} to a loot context at player:",
        "\tset loot luck value to 10",
        "\tset looter to {_player}",
        "\tset looted entity to last spawned pig",
        "give player loot items of loot table \"minecraft:entities/iron_golem\" with loot context {_context}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBlocksInRegion",
      "name": "Blocks in Region",
      "since": [
        "2.1"
      ],
      "deprecated": false,
      "description": [
        "All blocks in a <a href='./classes.html#region'>region</a>.",
        "This expression requires a supported regions plugin to be installed."
      ],
      "patterns": [
        "[(all|the)] blocks (in|of) [[the] region[s]] %regions%"
      ],
      "examples": [
        "loop all blocks in the region {arena.%{faction.%player%}%}:",
        "\tclear the loop-block"
      ],
      "events": null,
      "requirements": [
        "Supported regions plugin"
      ],
      "keywords": null
    },
    {
      "id": "ExprActiveItem",
      "name": "Active Item",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Returns the item the entities are currently using (ie: the food they're eating, the bow they're drawing back, etc.). This cannot be changed. If an entity is not using any item, this will return null."
      ],
      "patterns": [
        "[the] (raised|active) (tool|item|weapon) of %living entities%",
        "%living entities%'[s] (raised|active) (tool|item|weapon)"
      ],
      "examples": [
        "on damage of player:",
        "\tif victim's active tool is a bow:",
        "\t\tinterrupt player's active item use"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "ExprAge",
      "name": "Age of Block/Entity",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "Returns the age or maximum age of blocks and age for entities (there in no maximum age for entities).",
        "For blocks, 'Age' represents the different growth stages that a crop-like block can go through. A value of 0 indicates that the crop was freshly planted, whilst a value equal to 'maximum age' indicates that the crop is ripe and ready to be harvested.",
        "For entities, 'Age' represents the time left for them to become adults and it's in minus increasing to be 0 which means they're adults, e.g. A baby cow needs 20 minutes to become an adult which equals to 24,000 ticks so their age will be -24000 once spawned."
      ],
      "patterns": [
        "[the] [max[imum]] age of %blocks/entities%",
        "%blocks/entities%'[s] [max[imum]] age"
      ],
      "examples": [
        "# Set targeted crop to fully grown crop",
        "set age of targeted block to maximum age of targeted block",
        " ",
        "# Spawn a baby cow that will only need 1 minute to become an adult",
        "spawn a baby cow at player",
        "set age of last spawned entity to -1200 # in ticks = 60 seconds"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAI",
      "name": "Entity AI",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Returns whether an entity has AI."
      ],
      "patterns": [
        "[the] (ai|artificial intelligence) of %living entities%",
        "%living entities%'[s] (ai|artificial intelligence)"
      ],
      "examples": [
        "set artificial intelligence of target entity to false"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAllayJukebox",
      "name": "Allay Target Jukebox",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The location of the jukebox an allay is set to."
      ],
      "patterns": [
        "[the] target jukebox [of %living entities%]",
        "%living entities%'[s] target jukebox"
      ],
      "examples": [
        "set {_loc} to the target jukebox of last spawned allay"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAltitude",
      "name": "Altitude",
      "since": [
        "1.4.3"
      ],
      "deprecated": false,
      "description": [
        "Effectively an alias of 'y-<a href='#ExprCoordinate'>coordinate</a> of …', it represents the height of some object above bedrock."
      ],
      "patterns": [
        "[the] altitude[s] of %locations%",
        "%locations%'[s] altitude[s]"
      ],
      "examples": [
        "on damage:",
        "\taltitude of the attacker is higher than the altitude of the victim",
        "\tset damage to damage * 1.2"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAmount",
      "name": "Amount",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The amount or size of something.",
        "Please note that <code>amount of %items%</code> will not return the number of items, but the number of stacks, e.g. 1 for a stack of 64 torches. To get the amount of items in a stack, see the <a href='#ExprItemAmount'>item amount</a> expression.",
        "",
        "Also, you can get the recursive size of a list, which will return the recursive size of the list with sublists included, e.g.",
        "",
        "<pre>",
        "{list::*} Structure<br>",
        "  ├──── {list::1}: 1<br>",
        "  ├──── {list::2}: 2<br>",
        "  │     ├──── {list::2::1}: 3<br>",
        "  │     │    └──── {list::2::1::1}: 4<br>",
        "  │     └──── {list::2::2}: 5<br>",
        "  └──── {list::3}: 6",
        "</pre>",
        "",
        "Where using %size of {list::*}% will only return 3 (the first layer of indices only), while %recursive size of {list::*}% will return 6 (the entire list)",
        "Please note that getting a list's recursive size can cause lag if the list is large, so only use this expression if you need to!"
      ],
      "patterns": [
        "[the] (amount|number|size) of %numbered thing%",
        "[the] (amount|number|size) of %objects%",
        "[the] recursive (amount|number|size) of %objects%"
      ],
      "examples": [
        "message \"There are %number of all players% players online!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAmountOfItems",
      "name": "Amount of Items",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "Counts how many of a particular <a href='./classes.html#itemtype'>item type</a> are in a given inventory."
      ],
      "patterns": [
        "[the] (amount|number) of %item types% (in|of) %inventories%"
      ],
      "examples": [
        "message \"You have %number of tag values of minecraft tag \"diamond_ores\" in the player's inventory% diamond ores in your inventory.\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAnvilRepairCost",
      "name": "Anvil Repair Cost",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Returns the experience cost (in levels) to complete the current repair or the maximum experience cost (in levels) to be allowed by the current repair.",
        "The default value of max cost set by vanilla Minecraft is 40."
      ],
      "patterns": [
        "[the] [anvil] [item] [max[imum]] repair cost [of %inventories%]",
        "%inventories%'[s] [anvil] [item] [max[imum]] repair cost"
      ],
      "examples": [
        "on inventory click:",
        "\tif {AnvilRepairSaleActive} = true:",
        "\t\twait a tick # recommended, to avoid client bugs",
        "\t\tset anvil repair cost to anvil repair cost * 50%",
        "\t\tsend \"Anvil repair sale is ON!\" to player",
        "",
        "on inventory click:",
        "\tplayer have permission \"anvil.repair.max.bypass\"",
        "\tset max repair cost of event-inventory to 99999"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAnvilText",
      "name": "Anvil Text Input",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "An expression to get the name to be applied to an item in an anvil inventory."
      ],
      "patterns": [
        "[the] anvil [inventory] (rename|text) input of %inventories%",
        "%inventories%'[s] anvil [inventory] (rename|text) input"
      ],
      "examples": [
        "on inventory click:",
        "\ttype of event-inventory is anvil inventory",
        "\tif the anvil text input of the event-inventory is \"FREE OP\":",
        "\t\tban player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprARGB",
      "name": "Alpha/Red/Green/Blue Color Value",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The alpha, red, green, or blue value of colors. Ranges from 0 to 255.",
        "Alpha represents opacity."
      ],
      "patterns": [
        "[the] (alpha|red|green|blue) (value|component) of %colors%",
        "%colors%'[s] (alpha|red|green|blue) (value|component)"
      ],
      "examples": [
        "broadcast red value of rgb(100, 0, 50) # sends '100'",
        "set {_red} to red's red value + 10"
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "ARGB",
        "RGB",
        "color",
        "colour"
      ]
    },
    {
      "id": "ExprArmorSlot",
      "name": "Armor Slot",
      "since": [
        "1.0, 2.8.0 (armor), 2.10 (body armor)"
      ],
      "deprecated": false,
      "description": [
        "Equipment of living entities, i.e. the boots, leggings, chestplate or helmet.",
        "Body armor is a special slot that can only be used for:",
        "<ul>",
        "<li>Horses: Horse armour (doesn't work on zombie or skeleton horses)</li>",
        "<li>Wolves: Wolf Armor</li>",
        "<li>Llamas (regular or trader): Carpet</li>",
        "</ul>"
      ],
      "patterns": [
        "[the] (((boots|shoes)|leg[ging]s|chestplate[s]|helmet[s]) [(item|slot)]|armo[u]r[s]|body armo[u]r) of %living entities%",
        "%living entities%'[s] (((boots|shoes)|leg[ging]s|chestplate[s]|helmet[s]) [(item|slot)]|armo[u]r[s]|body armo[u]r)"
      ],
      "examples": [
        "set chestplate of the player to a diamond chestplate",
        "helmet of player is neither tag values of tag \"paper:helmets\" nor air # player is wearing a block, e.g. from another plugin"
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "armor"
      ]
    },
    {
      "id": "ExprArrowKnockbackStrength",
      "name": "Arrow Knockback Strength",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "An arrow's knockback strength."
      ],
      "patterns": [
        "[the] arrow knockback strength of %projectiles%",
        "%projectiles%'[s] arrow knockback strength"
      ],
      "examples": [
        "on shoot:",
        "\tevent-projectile is an arrow",
        "\tset arrow knockback strength of event-projectile to 10"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprArrowsStuck",
      "name": "Arrows Stuck",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The number of arrows stuck in a living entity."
      ],
      "patterns": [
        "[number of] arrow[s] stuck in %living entities%"
      ],
      "examples": [
        "set arrows stuck in player to 5"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAttachedBlock",
      "name": "Arrow Attached Block",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Returns the attached block of an arrow."
      ],
      "patterns": [
        "[the] (attached|hit) block of %projectiles%",
        "%projectiles%'[s] (attached|hit) block"
      ],
      "examples": [
        "set hit block of last shot arrow to diamond block"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAttackCooldown",
      "name": "Attack Cooldown",
      "since": [
        "2.6.1"
      ],
      "deprecated": false,
      "description": [
        "Returns the current cooldown for a player's attack. This is used to calculate damage, with 1.0 representing a fully charged attack and 0.0 representing a non-charged attack.",
        "NOTE: Currently this can not be set to anything."
      ],
      "patterns": [
        "[the] attack cooldown of %players%",
        "%players%'[s] attack cooldown"
      ],
      "examples": [
        "on damage:",
        "\tif attack cooldown of attacker < 1:",
        "\t\tset damage to 0",
        "\t\tsend \"Your hit was too weak! wait until your weapon is fully charged next time.\" to attacker"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.15+"
      ],
      "keywords": null
    },
    {
      "id": "ExprBannerPatterns",
      "name": "Banner Patterns",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Gets or sets the banner patterns of a banner.",
        "In order to set a specific position of a banner, there needs to be that many patterns already on the banner.",
        "This expression will add filler patterns to the banner to allow the specified position to be set.",
        "For Example, setting the 3rd banner pattern of a banner that has no patterns on it, will internally add 3 base patterns, allowing the 3rd banner pattern to be set."
      ],
      "patterns": [
        "[all [[of] the]|the] banner pattern[s] of %item stacks/item types/slots/blocks%",
        "%item stacks/item types/slots/blocks%'[s] banner pattern[s]",
        "[the] %integer%[st|nd|rd|th] [banner] pattern of %item stacks/item types/slots/blocks%",
        "%item stacks/item types/slots/blocks%'[s] %integer%[st|nd|rd|th] [banner] pattern"
      ],
      "examples": [
        "broadcast banner patterns of {_banneritem}",
        "broadcast 1st banner pattern of block at location(0,0,0)",
        "clear banner patterns of {_banneritem}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBeaconValues",
      "name": "Beacon Effects",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The active effects of a beacon.",
        "The secondary effect can be set to anything, but the icon in the GUI will not display correctly.",
        "The secondary effect can only be set when the beacon is at max tier.",
        "The primary and secondary effect can not be the same, primary will always retain the potion type and secondary will be cleared.",
        "You can only change the range on Paper."
      ],
      "patterns": [
        "%blocks%['s] primary [beacon] effect",
        "[the] primary [beacon] effect [of %blocks%]",
        "%blocks%['s] secondary [beacon] effect",
        "[the] secondary [beacon] effect [of %blocks%]",
        "%blocks%['s] [beacon] range",
        "[the] [beacon] range [of %blocks%]",
        "%blocks%['s] [beacon] tier",
        "[the] [beacon] tier [of %blocks%]"
      ],
      "examples": [
        "broadcast tier of {_block}",
        "set primary beacon effect of {_block} to haste",
        "add 1 to range of {_block}"
      ],
      "events": [
        "Beacon Effect",
        "Beacon Toggle",
        "Beacon Change Effect"
      ],
      "requirements": [
        "Paper (range)"
      ],
      "keywords": null
    },
    {
      "id": "ExprBed",
      "name": "Bed",
      "since": [
        "2.0, 2.7 (offlineplayers, safe bed)"
      ],
      "deprecated": false,
      "description": [
        "Returns the bed location of a player, i.e. the spawn point of a player if they ever slept in a bed and the bed still exists and is unobstructed however, you can set the unsafe bed location of players and they will respawn there even if it has been obstructed or doesn't exist anymore and that's the default behavior of this expression otherwise you will need to be specific i.e. <code>safe bed location</code>.",
        "",
        "NOTE: Offline players can not have their bed location changed, only online players."
      ],
      "patterns": [
        "[the] [((safe|valid)|(unsafe|invalid))] bed[s] [location[s]] of %offline players%",
        "%offline players%'[s] [((safe|valid)|(unsafe|invalid))] bed[s] [location[s]]"
      ],
      "examples": [
        "if bed of player exists:",
        "\tteleport player the the player's bed",
        "else:",
        "\tteleport the player to the world's spawn point",
        "",
        "set the bed location of player to spawn location of world(\"world\") # unsafe/invalid bed location",
        "set the safe bed location of player to spawn location of world(\"world\") # safe/valid bed location"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBeehiveFlower",
      "name": "Beehive Target Flower",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The flower a beehive has selected to pollinate from."
      ],
      "patterns": [
        "[the] target flower [of %blocks%]",
        "%blocks%'[s] target flower"
      ],
      "examples": [
        "set the target flower of {_beehive} to location(0, 0, 0)",
        "clear the target flower of {_beehive}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBeehiveHoneyLevel",
      "name": "Beehive Honey Level",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The current or max honey level of a beehive.",
        "The max level is 5, which cannot be changed."
      ],
      "patterns": [
        "[the] [max[imum]] honey level [of %blocks%]",
        "%blocks%'[s] [max[imum]] honey level"
      ],
      "examples": [
        "set the honey level of {_beehive} to the max honey level of {_beehive}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBiome",
      "name": "Biome",
      "since": [
        "1.4.4, 2.6.1 (3D biomes)"
      ],
      "deprecated": false,
      "description": [
        "The biome at a certain location. Please note that biomes are only defined for x/z-columns",
        "(i.e. the <a href='#ExprAltitude'>altitude</a> (y-coordinate) doesn't matter), up until Minecraft 1.15.x.",
        "As of Minecraft 1.16, biomes are now 3D (per block vs column)."
      ],
      "patterns": [
        "[the] biome [(of|%direction%) %locations%]",
        "%locations%'[s] biome"
      ],
      "examples": [
        "# damage player in deserts constantly",
        "every real minute:",
        "\tloop all players:",
        "\t\tbiome at loop-player is desert",
        "\t\tdamage the loop-player by 1"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBlockData",
      "name": "Block Data",
      "since": [
        "2.5, 2.5.2 (set), 2.10 (block displays)"
      ],
      "deprecated": false,
      "description": [
        "Get the <a href='classes.html#blockdata'>block data</a> associated with a block.",
        "This data can also be used to set blocks."
      ],
      "patterns": [
        "[the] block[ ]data of %blocks/displays%",
        "%blocks/displays%'[s] block[ ]data"
      ],
      "examples": [
        "set {_data} to block data of target block",
        "set block at player to {_data}",
        "",
        "set block data of target block to oak_stairs[facing=south;waterlogged=true]"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBlockHardness",
      "name": "Block Hardness",
      "since": [
        "2.6"
      ],
      "deprecated": false,
      "description": [
        "Obtains the block's hardness level (also known as \"strength\"). This number is used to calculate the time required to break each block."
      ],
      "patterns": [
        "[the] [block] hardness of %item types%",
        "%item types%'[s] [block] hardness"
      ],
      "examples": [
        "set {_hard} to block hardness of target block",
        "if block hardness of target block > 5:"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.13+"
      ],
      "keywords": null
    },
    {
      "id": "ExprBlockSound",
      "name": "Block Sound",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Gets the sound that a given block, blockdata, or itemtype will use in a specific scenario.",
        "This will return a string in the form of \"SOUND_EXAMPLE\", which can be used in the play sound syntax.",
        "",
        "Check out <a href=\"https://minecraft.wiki/w/Sounds.json\">this website</a> for a list of sounds in Minecraft, or <a href=\"https://minecraft.wiki/w/Sound\">this one</a> to go to the Sounds wiki page."
      ],
      "patterns": [
        "[the] (break|fall|hit|place|step) sound[s] of %blocks/block datas/item types%",
        "%blocks/block datas/item types%'[s] (break|fall|hit|place|step) sound[s]"
      ],
      "examples": [
        "play sound (break sound of dirt) at all players",
        "set {_sounds::*} to place sounds of dirt, grass block, blue wool and stone"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBookAuthor",
      "name": "Book Author",
      "since": [
        "2.2-dev31"
      ],
      "deprecated": false,
      "description": [
        "The author of a book."
      ],
      "patterns": [
        "[the] [book] (author|writer|publisher) of %item types%",
        "%item types%'[s] [book] (author|writer|publisher)"
      ],
      "examples": [
        "on book sign:",
        "\tmessage \"Book Title: %author of event-item%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBookPages",
      "name": "Book Pages",
      "since": [
        "2.2-dev31, 2.7 (changers)"
      ],
      "deprecated": false,
      "description": [
        "The pages of a book (Supports Skript's chat format)",
        "Note: In order to modify the pages of a new written book, you must have the title and author",
        "of the book set. Skript will do this for you, but if you want your own, please set those values."
      ],
      "patterns": [
        "[all [[of] the]|the] [book] (pages|content) of %item types/item stacks%",
        "%item types/item stacks%'[s] [book] (pages|content)",
        "[book] page %number% of %item types/item stacks%",
        "%item types/item stacks%'[s] [book] page %number%"
      ],
      "examples": [
        "on book sign:",
        "\tmessage \"Book Pages: %pages of event-item%\"",
        "\tmessage \"Book Page 1: %page 1 of event-item%\"",
        "",
        "set page 1 of player's held item to \"Book writing\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBookTitle",
      "name": "Book Title",
      "since": [
        "2.2-dev31"
      ],
      "deprecated": false,
      "description": [
        "The title of a book."
      ],
      "patterns": [
        "[the] book (name|title) of %item types%",
        "%item types%'[s] book (name|title)"
      ],
      "examples": [
        "on book sign:",
        "\tmessage \"Book Title: %title of event-item%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBrushableItem",
      "name": "Buried Item",
      "since": [
        "INSERT VERSION"
      ],
      "deprecated": false,
      "description": [
        "Represents the item that is uncovered when dusting.",
        "The only blocks that can currently be \"dusted\" are Suspicious Gravel and Suspicious Sand."
      ],
      "patterns": [
        "[the] (brushable|buried) item of %blocks%",
        "%blocks%'[s] (brushable|buried) item"
      ],
      "examples": [
        "send target block's brushable item",
        "set {_gravel}'s brushable item to emerald"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.20+"
      ],
      "keywords": null
    },
    {
      "id": "ExprCarryingBlockData",
      "name": "Enderman Carrying BlockData",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The block data an enderman is carrying.",
        "Custom attributes such as NBT or names do not transfer over.",
        "Blocks, blockdatas and items are acceptable objects to change the carrying block."
      ],
      "patterns": [
        "[the] carr(ied|ying) block[[ ]data] of %living entities%",
        "%living entities%'[s] carr(ied|ying) block[[ ]data]"
      ],
      "examples": [
        "broadcast the carrying blockdata of last spawned enderman",
        "set the carried block of last spawned enderman to an oak log",
        "set the carrying block data of {_enderman} to oak stairs[facing=north]",
        "set the carried blockdata of {_enderman} to {_item}",
        "clear the carried blockdata of {_enderman}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprCharacterFromCodepoint",
      "name": "Character from Codepoint",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Returns the character at the specified codepoint"
      ],
      "patterns": [
        "character (from|at|with) code([ ]point| position) %integer%"
      ],
      "examples": [
        "function chars_between(lower: string, upper: string) :: strings:",
        "\tset {_lower} to codepoint of {_lower}",
        "\treturn {_none} if {_lower} is not set",
        "",
        "\tset {_upper} to codepoint of {_upper}",
        "\treturn {_none} if {_upper} is not set",
        "",
        "\tloop integers between {_lower} and {_upper}:",
        "\t\tadd character from codepoint loop-value to {_chars::*}",
        "\treturn {_chars::*}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprCharges",
      "name": "Respawn Anchor Charges",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "The charges of a respawn anchor."
      ],
      "patterns": [
        "[the] [max[imum]] charge[s] of %blocks%",
        "%blocks%'[s] [max[imum]] charge[s]"
      ],
      "examples": [
        "set the charges of event-block to 3"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.16+"
      ],
      "keywords": null
    },
    {
      "id": "ExprClientViewDistance",
      "name": "View Distance of Client",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The view distance of the client. Can not be changed. This differs from the server side view distance of player as this will retrieve the view distance the player has set on their client."
      ],
      "patterns": [
        "[the] client view distance[s] of %players%",
        "%players%'[s] client view distance[s]"
      ],
      "examples": [
        "set {_clientView} to the client view distance of player",
        "set view distance of player to client view distance of player"
      ],
      "events": null,
      "requirements": [
        "1.13.2+"
      ],
      "keywords": null
    },
    {
      "id": "ExprCodepoint",
      "name": "Character Codepoint",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Returns the Unicode codepoint of a character"
      ],
      "patterns": [
        "[the] [unicode|character] code([ ]point| position) of %texts%",
        "%texts%'[s] [unicode|character] code([ ]point| position)"
      ],
      "examples": [
        "function is_in_order(letters: strings) :: boolean:",
        "\tloop {_letters::*}:",
        "\t\tset {_codepoint} to codepoint of lowercase loop-value",
        "",
        "\t\treturn false if {_codepoint} is not set # 'loop-value is not a single character'",
        "",
        "\t\tif:",
        "\t\t\t{_previous-codepoint} is set",
        "\t\t\t# if the codepoint of the current character is not",
        "\t\t\t#  1 more than the codepoint of the previous character",
        "\t\t\t#  then the letters are not in order",
        "\t\t\t{_codepoint} - {_previous-codepoint} is not 1",
        "\t\tthen:",
        "\t\t\treturn false",
        "",
        "\t\tset {_previous-codepoint} to {_codepoint}",
        "\treturn true"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprColorOf",
      "name": "Color of",
      "since": [
        "1.2, 2.10 (displays)"
      ],
      "deprecated": false,
      "description": [
        "The <a href='./classes.html#color'>color</a> of an item, entity, block, firework effect, or text display.",
        "This can also be used to color chat messages with \"&lt;%color of ...%&gt;this text is colored!\".",
        "Do note that firework effects support setting, adding, removing, resetting, and deleting; text displays support setting and resetting; and items, entities, and blocks only support setting, and only for very few items/blocks."
      ],
      "patterns": [
        "[the] colo[u]r[s] of %blocks/item types/entities/firework effects/displays%",
        "%blocks/item types/entities/firework effects/displays%'[s] colo[u]r[s]"
      ],
      "examples": [
        "on click on wool:",
        "if event-block is tagged with minecraft tag \"wool\":",
        "\tmessage \"This wool block is <%color of block%>%color of block%<reset>!\"",
        "\tset the color of the block to black"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprCommandBlockCommand",
      "name": "Command Block Command",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Gets or sets the command associated with a command block or minecart with command block."
      ],
      "patterns": [
        "[the] [command[ ]block] command of %blocks/entities%",
        "%blocks/entities%'[s] [command[ ]block] command"
      ],
      "examples": [
        "send command of {_block}",
        "set command of {_cmdMinecart} to \"say asdf\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprCommandInfo",
      "name": "Command Info",
      "since": [
        "2.6"
      ],
      "deprecated": false,
      "description": [
        "Get information about a command."
      ],
      "patterns": [
        "[the] main command [label|name] [of [[the] command[s] %texts%]]",
        "command[s] %texts%'[s] main command [label|name]",
        "[the] description [of [[the] command[s] %texts%]]",
        "command[s] %texts%'[s] description",
        "[the] label [of [[the] command[s] %texts%]]",
        "command[s] %texts%'[s] label",
        "[the] usage [of [[the] command[s] %texts%]]",
        "command[s] %texts%'[s] usage",
        "[(all|the|all [of] the)] aliases [of [[the] command[s] %texts%]]",
        "command[s] %texts%'[s] aliases",
        "[the] permission [of [[the] command[s] %texts%]]",
        "command[s] %texts%'[s] permission",
        "[the] permission message [of [[the] command[s] %texts%]]",
        "command[s] %texts%'[s] permission message",
        "[the] plugin [owner] [of [[the] command[s] %texts%]]",
        "command[s] %texts%'[s] plugin [owner]"
      ],
      "examples": [
        "main command label of command \"skript\"",
        "description of command \"help\"",
        "label of command \"pl\"",
        "usage of command \"help\"",
        "aliases of command \"bukkit:help\"",
        "permission of command \"/op\"",
        "command \"op\"'s permission message",
        "command \"sk\"'s plugin owner",
        "",
        "command /greet <player>:",
        "\tusage: /greet <target>",
        "\ttrigger:",
        "\t\tif arg-1 is sender:",
        "\t\t\tsend \"&cYou can't greet yourself! Usage: %the usage%\"",
        "\t\t\tstop",
        "\t\tsend \"%sender% greets you!\" to arg-1",
        "\t\tsend \"You greeted %arg-1%!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprCompassTarget",
      "name": "Compass Target",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The location a player's compass is pointing at.",
        "As of Minecraft 1.21.4, the compass is controlled by the resource pack and by default will not point to this compass target when used outside of the overworld dimension."
      ],
      "patterns": [
        "[the] compass target of %players%",
        "%players%'[s] compass target"
      ],
      "examples": [
        "# make all player's compasses target a player stored in {compass::target::%player%}",
        "every 5 seconds:",
        "\tloop all players:",
        "\t\tset the loop-player's compass target to location of {compass::target::%%loop-player%}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprCoordinate",
      "name": "Coordinate",
      "since": [
        "1.4.3"
      ],
      "deprecated": false,
      "description": [
        "Represents a given coordinate of a location. "
      ],
      "patterns": [
        "[the] (x|y|z)(-| )(coord[inate]|pos[ition]|loc[ation])[s] of %locations%",
        "%locations%'[s] (x|y|z)(-| )(coord[inate]|pos[ition]|loc[ation])[s]"
      ],
      "examples": [
        "player's y-coordinate is smaller than 40:",
        "\tmessage \"Watch out for lava!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprCursorSlot",
      "name": "Cursor Slot",
      "since": [
        "2.2-dev17"
      ],
      "deprecated": false,
      "description": [
        "The item which the player has on their inventory cursor. This slot is always empty if player has no inventory open."
      ],
      "patterns": [
        "[the] cursor slot of %players%",
        "%players%'[s] cursor slot"
      ],
      "examples": [
        "cursor slot of player is dirt",
        "set cursor slot of player to 64 diamonds"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprCustomModelData",
      "name": "Custom Model Data",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Get/set the CustomModelData tag for an item. (Value is an integer between 0 and 99999999)"
      ],
      "patterns": [
        "[the] [custom] model data of %item types%",
        "%item types%'[s] [custom] model data"
      ],
      "examples": [
        "set custom model data of player's tool to 3",
        "set {_model} to custom model data of player's tool"
      ],
      "events": null,
      "requirements": [
        "1.14+"
      ],
      "keywords": null
    },
    {
      "id": "ExprDifficulty",
      "name": "Difficulty",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "The difficulty of a world."
      ],
      "patterns": [
        "[the] difficult(y|ies) of %worlds%",
        "%worlds%'[s] difficult(y|ies)"
      ],
      "examples": [
        "set the difficulty of \"world\" to hard"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDomestication",
      "name": "Horse Domestication",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Gets and/or sets the (max) domestication of a horse.",
        "The domestication of a horse is how close a horse is to becoming tame - the higher the domestication, the closer they are to becoming tame (must be between 1 and the max domestication level of the horse).",
        "The max domestication of a horse is how long it will take for a horse to become tame (must be greater than 0)."
      ],
      "patterns": [
        "[the] [max[imum]] domestication level of %living entities%",
        "%living entities%'[s] [max[imum]] domestication level"
      ],
      "examples": [
        "function domesticateAndTame(horse: entity, p: offline player, i: int = 10):",
        "\tadd {_i} to domestication level of {_horse}",
        "\tif domestication level of {_horse} >= max domestication level of {_horse}:",
        "\t\ttame {_horse}",
        "\t\tset tamer of {_horse} to {_p}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDuplicateCooldown",
      "name": "Allay Duplication Cooldown",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The cooldown time until an allay can duplicate again naturally.",
        "Resetting the cooldown time will set the cooldown time to the same amount of time after an allay has duplicated."
      ],
      "patterns": [
        "[the] (duplicat(e|ing|ion)|clon(e|ing)) cool[ ]down [time] [of %living entities%]",
        "%living entities%'[s] (duplicat(e|ing|ion)|clon(e|ing)) cool[ ]down [time]"
      ],
      "examples": [
        "set {_time} to the duplicate cooldown of last spawned allay",
        "add 5 seconds to the duplication cool down time of last spawned allay",
        "remove 3 seconds from the duplicating cooldown time of last spawned allay",
        "clear the clone cool down of last spawned allay",
        "reset the cloning cool down time of last spawned allay"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDurability",
      "name": "Damage Value/Durability",
      "since": [
        "1.2, 2.7 (durability reversed)"
      ],
      "deprecated": false,
      "description": [
        "The damage value/durability of an item."
      ],
      "patterns": [
        "[the] (damage[s] [value[s]]|durabilit(y|ies)) of %item types/item stacks/slots%",
        "%item types/item stacks/slots%'[s] (damage[s] [value[s]]|durabilit(y|ies))"
      ],
      "examples": [
        "set damage value of player's tool to 10",
        "reset the durability of {_item}",
        "set durability of player's held item to 0"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDustedStage",
      "name": "Dusted Stage",
      "since": [
        "INSERT VERSION"
      ],
      "deprecated": false,
      "description": [
        "Represents how far the block has been uncovered.",
        "The only blocks that can currently be \"dusted\" are Suspicious Gravel and Suspicious Sand."
      ],
      "patterns": [
        "[the] [max[imum]] dust[ed|ing] (value|stage|progress[ion]) of %blocks/block datas%",
        "%blocks/block datas%'[s] [max[imum]] dust[ed|ing] (value|stage|progress[ion])"
      ],
      "examples": [
        "send target block's maximum dusted stage",
        "set {_sand}'s dusted stage to 2"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.20+"
      ],
      "keywords": null
    },
    {
      "id": "ExprElement",
      "name": "Elements",
      "since": [
        "2.0, 2.7 (relative to last element), 2.8.0 (range of elements)"
      ],
      "deprecated": false,
      "description": [
        "The first, last, range or a random element of a set, e.g. a list variable, or a queue.",
        "Asking for elements from a queue will also remove them from the queue, see the new queue expression for more information.",
        "See also: <a href='#ExprRandom'>random expression</a>"
      ],
      "patterns": [
        "[the] (first|last) element [out] of %objects%",
        "[the] (first|last) %integer% elements [out] of %objects%",
        "[a] random element [out] of %objects%",
        "[the] %integer%(st|nd|rd|th) [[to] last] element [out] of %objects%",
        "[the] elements (from|between) %integer% (to|and) %integer% [out] of %objects%",
        "[the] (first|next|last) element (of|in) %queue%",
        "[the] (first|last) %integer% elements (of|in) %queue%",
        "[a] random element (of|in) %queue%",
        "[the] %integer%(st|nd|rd|th) [[to] last] element (of|in) %queue%",
        "[the] elements (from|between) %integer% (to|and) %integer% (of|in) %queue%"
      ],
      "examples": [
        "broadcast the first 3 elements of {top players::*}",
        "set {_last} to last element of {top players::*}",
        "set {_random player} to random element out of all players",
        "send 2nd last element of {top players::*} to player",
        "set {page2::*} to elements from 11 to 20 of {top players::*}",
        "broadcast the 1st element in {queue}",
        "broadcast the first 3 elements in {queue}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEnchantmentLevel",
      "name": "Enchantment Level",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The level of a particular <a href='classes.html#enchantment'>enchantment</a> on an item."
      ],
      "patterns": [
        "[the] [enchant[ment]] level[s] of %enchantments% (on|of) %item types%",
        "[the] %enchantments% [enchant[ment]] level[s] (on|of) %item types%",
        "%item types%'[s] %enchantments% [enchant[ment]] level[s]",
        "%item types%'[s] [enchant[ment]] level[s] of %enchantments%"
      ],
      "examples": [
        "player's tool is a sword of sharpness:",
        "\tmessage \"You have a sword of sharpness %level of sharpness of the player's tool% equipped\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEnchantmentOfferCost",
      "name": "Enchantment Offer Cost",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The cost of an enchantment offer. This is displayed to the right of an enchantment offer.",
        "If the cost is changed, it will always be at least 1.",
        "This changes how many levels are required to enchant, but does not change the number of levels removed.",
        "To change the number of levels removed, use the enchant event."
      ],
      "patterns": [
        "[the] [enchant[ment]] cost of %enchantment offers%",
        "%enchantment offers%'[s] [enchant[ment]] cost"
      ],
      "examples": [
        "set cost of enchantment offer 1 to 50"
      ],
      "events": null,
      "requirements": [
        "1.11 or newer"
      ],
      "keywords": null
    },
    {
      "id": "ExprEnchantments",
      "name": "Item Enchantments",
      "since": [
        "2.2-dev36"
      ],
      "deprecated": false,
      "description": [
        "All the enchantments an <a href='classes.html#itemtype'>item type</a> has."
      ],
      "patterns": [
        "[the] enchantments of %item types%",
        "%item types%'[s] enchantments"
      ],
      "examples": [
        "clear enchantments of event-item"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEnderChest",
      "name": "Ender Chest",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The ender chest of a player."
      ],
      "patterns": [
        "[the] ender[ ]chest[s] of %players%",
        "%players%'[s] ender[ ]chest[s]"
      ],
      "examples": [
        "open the player's ender chest to the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEntityItemUseTime",
      "name": "Active Item Use Time",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Returns the time that the entities have either spent using an item, or the time left for them to finish using an item.",
        "If an entity is not using any item, this will return 0 seconds."
      ],
      "patterns": [
        "[the] [elapsed|remaining] (item|tool) us[ag]e time of %living entities%",
        "%living entities%'[s] [elapsed|remaining] (item|tool) us[ag]e time"
      ],
      "examples": [
        "on right click:",
        "\tbroadcast player's remaining item use time",
        "\twait 1 second",
        "\tbroadcast player's item use time"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "ExprEntityOwner",
      "name": "Entity Owner",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The owner of a tameable entity (i.e. horse or wolf)."
      ],
      "patterns": [
        "[the] (owner|tamer) of %living entities%",
        "%living entities%'[s] (owner|tamer)"
      ],
      "examples": [
        "\tset owner of last spawned wolf to player\n\tif the owner of last spawned wolf is player:\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEntitySize",
      "name": "Entity Size",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Changes the entity size of slimes and phantoms. This is not the same as changing the scale attribute of an entity.",
        "When changing the size of a slime, its health is fully resorted and will have changes done to its max health, movement speed and attack damage.",
        "The default minecraft size of a slime is anywhere between 0 and 2, with a maximum of 126.",
        "The default minecraft size of a phantom is 0 with a maximum size of 64."
      ],
      "patterns": [
        "[the] entity size of %living entities%",
        "%living entities%'[s] entity size"
      ],
      "examples": [
        "spawn a slime at player:\n\tset entity size of event-entity to 5\n\tset name of event-entity to \"King Slime Jorg\"\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEntitySnapshot",
      "name": "Entity Snapshot",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the entity snapshot of a provided entity, which includes all the data associated with it (name, health, attributes, etc.) at the time this expression is used.",
        "Individual attributes of a snapshot cannot be modified or retrieved."
      ],
      "patterns": [
        "[the] entity snapshot of %entities/entity types%",
        "%entities/entity types%'[s] entity snapshot"
      ],
      "examples": [
        "spawn a pig at location(0, 0, 0):",
        "\tset the max health of entity to 20",
        "\tset the health of entity to 20",
        "\tset {_snapshot} to the entity snapshot of entity",
        "\tclear entity",
        "spawn {_snapshot} at location(0, 0, 0)"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.20.2+"
      ],
      "keywords": null
    },
    {
      "id": "ExprEntityStorageEntityCount",
      "name": "Entity Storage Entity Count",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The current number of entities stored inside an entity block storage (i.e. beehive).",
        "The maximum amount of entities an entity block storage can hold."
      ],
      "patterns": [
        "[the] [max[imum]] [stored] entity count [of %blocks%]",
        "%blocks%'[s] [max[imum]] [stored] entity count"
      ],
      "examples": [
        "broadcast the stored entity count of {_beehive}",
        "set the maximum entity count of {_beehive} to 20"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprExactItem",
      "name": "Exact Item",
      "since": [
        "INSERT VERSION"
      ],
      "deprecated": false,
      "description": [
        "Get an exact item representation of a block, carrying over any data. For example, using this expression on a chest block with items stored inside will return a chest item with the exact same items in its inventory as the chest block."
      ],
      "patterns": [
        "[the] exact item[s] of %blocks%",
        "%blocks%'[s] exact item[s]"
      ],
      "examples": [
        "set {_item} to exact item of block at location(0, 0, 0)"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprExhaustion",
      "name": "Exhaustion",
      "since": [
        "2.2-dev35"
      ],
      "deprecated": false,
      "description": [
        "The exhaustion of a player. This is mainly used to determine the rate of hunger depletion."
      ],
      "patterns": [
        "[the] exhaustion of %players%",
        "%players%'[s] exhaustion"
      ],
      "examples": [
        "set exhaustion of all players to 1"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprExperienceCooldown",
      "name": "Experience Pickup Cooldown",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The experience cooldown of a player.",
        "Experience cooldown is how long until a player can pick up another orb of experience.",
        "The cooldown of a player must be 0 to pick up another orb of experience."
      ],
      "patterns": [
        "[the] (experience|[e]xp) [pickup|collection] cooldown of %players%",
        "%players%'[s] (experience|[e]xp) [pickup|collection] cooldown"
      ],
      "examples": [
        "send experience cooldown of player",
        "set the xp pickup cooldown of player to 1 hour",
        "if exp collection cooldown of player >= 10 minutes:",
        "\tclear the experience pickup cooldown of player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprExplosionBlockYield",
      "name": "Explosion Block Yield",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The percentage of exploded blocks dropped in an explosion event.",
        "When changing the yield, a value greater than 1 will function the same as using 1.",
        "Attempting to change the yield to a value less than 0 will have no effect."
      ],
      "patterns": [
        "[the] [explosion['s]] block (yield|amount)",
        "[the] percentage of blocks dropped"
      ],
      "examples": [
        "on explode:",
        "set the explosion's block yield to 10%"
      ],
      "events": [
        "explosion"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprExplosiveYield",
      "name": "Explosive Yield",
      "since": [
        "2.5, 2.11 (ghasts)"
      ],
      "deprecated": false,
      "description": [
        "The yield of an explosive (creeper, ghast, primed tnt, fireball, etc.). This is how big of an explosion is caused by the entity.",
        "Read <a href='https://minecraft.wiki/w/Explosion'>this wiki page</a> for more information.",
        "The yield of ghasts can only be set to between 0 and 127."
      ],
      "patterns": [
        "[the] explosive (yield|radius|size|power) of %entities%",
        "%entities%'[s] explosive (yield|radius|size|power)"
      ],
      "examples": [
        "on spawn of a creeper:",
        "\tset the explosive yield of the event-entity to 10"
      ],
      "events": null,
      "requirements": [
        "Paper (ghasts)"
      ],
      "keywords": null
    },
    {
      "id": "ExprEyeLocation",
      "name": "Head location",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The location of an entity's head, mostly useful for players and e.g. looping blocks in the player's line of sight.",
        "Please note that this location is only accurate for entities whose head is exactly above their center, i.e. players, endermen, zombies, skeletons, etc., but not sheep, pigs or cows."
      ],
      "patterns": [
        "[the] (head|eye[s]) [location[s]] of %living entities%",
        "%living entities%'[s] (head|eye[s]) [location[s]]"
      ],
      "examples": [
        "set the block at the player's head to air",
        "set the block in front of the player's eyes to glass",
        "loop blocks in front of the player's head:"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFacing",
      "name": "Facing",
      "since": [
        "1.4"
      ],
      "deprecated": false,
      "description": [
        "The facing of an entity or block, i.e. exactly north, south, east, west, up or down (unlike <a href='#ExprDirection'>direction</a> which is the exact direction, e.g. '0.5 south and 0.7 east')"
      ],
      "patterns": [
        "[the] [(horizontal)] facing of %living entities/blocks%",
        "%living entities/blocks%'[s] [(horizontal)] facing"
      ],
      "examples": [
        "# makes a bridge",
        "loop blocks from the block below the player in the horizontal facing of the player:",
        "\tset loop-block to cobblestone"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFallDistance",
      "name": "Fall Distance",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "The distance an entity has fallen for."
      ],
      "patterns": [
        "[the] fall[en] (distance|height) of %entities%",
        "%entities%'[s] fall[en] (distance|height)"
      ],
      "examples": [
        "set all entities' fall distance to 10",
        "on damage:",
        "\tsend \"%victim's fall distance%\" to victim"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFireTicks",
      "name": "Entity Fire Burn Duration",
      "since": [
        "2.7, 2.10 (maximum)"
      ],
      "deprecated": false,
      "description": [
        "How much time an entity will be burning for."
      ],
      "patterns": [
        "[the] [max[imum]] (burn[ing]|fire) (time|duration) of %entities%",
        "%entities%'[s] [max[imum]] (burn[ing]|fire) (time|duration)"
      ],
      "examples": [
        "send \"You will stop burning in %fire time of player%\"",
        "send the max burn time of target"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFirstEmptySlot",
      "name": "First Empty Slot in Inventory",
      "since": [
        "INSERT VERSION"
      ],
      "deprecated": false,
      "description": [
        "Returns the first empty slot in an inventory. If no empty slot is found, it returns nothing."
      ],
      "patterns": [
        "[the] first empty slot[s] of %inventories%",
        "%inventories%'[s] first empty slot[s]",
        "[the] first empty slot[s] in %inventories%"
      ],
      "examples": [
        "set the first empty slot in player's inventory to 5 diamonds",
        "if the first empty slot in player's inventory is not set:\n\tmessage \"No empty slot available in your inventory!\" to player\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "full",
        "inventory",
        "empty",
        "air",
        "slot"
      ]
    },
    {
      "id": "ExprFlightMode",
      "name": "Flight Mode",
      "since": [
        "2.2-dev34"
      ],
      "deprecated": false,
      "description": [
        "Whether the player(s) are allowed to fly. Use <a href=effects.html#EffMakeFly>Make Fly</a> effect to force player(s) to fly."
      ],
      "patterns": [
        "[the] fl(y[ing]|ight) (mode|state) of %players%",
        "%players%'[s] fl(y[ing]|ight) (mode|state)"
      ],
      "examples": [
        "set flight mode of player to true",
        "send \"%flying state of all players%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFoodLevel",
      "name": "Food Level",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The food level of a player from 0 to 10. Has several aliases: food/hunger level/meter/bar. "
      ],
      "patterns": [
        "[the] (food|hunger)[[ ](level|met(er|re)|bar)] [of %players%]",
        "%players%'[s] (food|hunger)[[ ](level|met(er|re)|bar)]"
      ],
      "examples": [
        "set the player's food level to 10"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFormatDate",
      "name": "Formatted Date",
      "since": [
        "2.2-dev31, 2.7 (support variables in format)"
      ],
      "deprecated": false,
      "description": [
        "Converts date to human-readable text format. By default, 'yyyy-MM-dd HH:mm:ss z' (e.g. '2018-03-30 16:03:12 +01') will be used. For reference, see this <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">Wikipedia article</a>."
      ],
      "patterns": [
        "%dates% formatted [human-readable] [(with|as) %text%]",
        "[human-readable] formatted %dates% [(with|as) %text%]"
      ],
      "examples": [
        "command /date:",
        "\ttrigger:",
        "\t\tsend \"Full date: %now formatted human-readable%\" to sender",
        "\t\tsend \"Short date: %now formatted as \"yyyy-MM-dd\"%\" to sender"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFreezeTicks",
      "name": "Freeze Time",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "How much time an entity has been in powdered snow for."
      ],
      "patterns": [
        "[the] freeze time of %entities%",
        "%entities%'[s] freeze time"
      ],
      "examples": [
        "player's freeze time is less than 3 seconds:",
        "\tsend \"you're about to freeze!\" to the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFromUUID",
      "name": "Entity/Player/World from UUID",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Get an entity, player, offline player or world from a UUID.",
        "Unloaded entities or players that are offline (when using 'player from %uuid%') will return nothing."
      ],
      "patterns": [
        "[offline[ ]]player[s] from %uuids%",
        "entit(y|ies) from %uuids%",
        "world[s] from %uuids%"
      ],
      "examples": [
        "set {_player} to player from \"a0789aeb-7b46-43f6-86fb-cb671fed5775\" parsed as uuid",
        "set {_offline player} to offline player from {_some uuid}",
        "set {_entity} to entity from {_some uuid}",
        "set {_world} to world from {_some uuid}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprGameMode",
      "name": "Game Mode",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The gamemode of a player. (<a href=\"classes.html#gamemode\">Gamemodes</a>)"
      ],
      "patterns": [
        "[the] game[ ]mode of %players%",
        "%players%'[s] game[ ]mode"
      ],
      "examples": [
        "player's gamemode is survival",
        "set the player's gamemode to creative"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprGlidingState",
      "name": "Gliding State",
      "since": [
        "2.2-dev21"
      ],
      "deprecated": false,
      "description": [
        "Sets of gets gliding state of player. It allows you to set gliding state of entity even if they do not have an <a href=\"https://minecraft.wiki/w/Elytra\">Elytra</a> equipped."
      ],
      "patterns": [
        "[the] (gliding|glider) [state] of %living entities%",
        "%living entities%'[s] (gliding|glider) [state]"
      ],
      "examples": [
        "set gliding of player to off"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprGlowing",
      "name": "Glowing",
      "since": [
        "2.2-dev18"
      ],
      "deprecated": false,
      "description": [
        "Indicates if targeted entity is glowing (new 1.9 effect) or not. Glowing entities can be seen through walls."
      ],
      "patterns": [
        "[the] glowing of %entities%",
        "%entities%'[s] glowing"
      ],
      "examples": [
        "set glowing of player to true"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprGravity",
      "name": "Gravity",
      "since": [
        "2.2-dev21"
      ],
      "deprecated": false,
      "description": [
        "If entity is affected by gravity or not, i.e. if it has Minecraft 1.10+ NoGravity flag."
      ],
      "patterns": [
        "[the] gravity of %entities%",
        "%entities%'[s] gravity"
      ],
      "examples": [
        "set gravity of player off"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprHealth",
      "name": "Health",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The health of a creature, e.g. a player, mob, villager, etc. The minimum value is 0, and the maximum is the creature's max health (e.g. 10 for players)."
      ],
      "patterns": [
        "[the] health of %living entities%",
        "%living entities%'[s] health"
      ],
      "examples": [
        "message \"You have %health% HP left.\""
      ],
      "events": [
        "damage"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprHiddenPlayers",
      "name": "Hidden Players",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "The players hidden from a player that were hidden using the <a href='effects.html#EffEntityVisibility'>entity visibility</a> effect."
      ],
      "patterns": [
        "[(all [[of] the]|the)] hidden players (of|for) %players%",
        "[(all [[of] the]|the)] players hidden (from|for|by) %players%"
      ],
      "examples": [
        "message \"&lt;light red&gt;You are currently hiding: &lt;light gray&gt;%hidden players of the player%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprHotbarSlot",
      "name": "Hotbar Slot",
      "since": [
        "2.2-dev36"
      ],
      "deprecated": false,
      "description": [
        "The currently selected hotbar <a href='./classes.html#slot'>slot</a>.",
        "To retrieve its number use <a href='#ExprSlotIndex'>Slot Index</a> expression.",
        "Use future and past tense to grab the previous slot in an item change event, see example."
      ],
      "patterns": [
        "[the] [([currently] selected|current)] hotbar slot[s] [of %players%]",
        "%players%'[s] [([currently] selected|current)] hotbar slot[s]"
      ],
      "examples": [
        "message \"%player's current hotbar slot%\"",
        "set player's selected hotbar slot to slot 4 of player",
        "",
        "send \"index of player's current hotbar slot = 1\" # second slot from the left",
        "",
        "on item held change:",
        "\tif the selected hotbar slot was a diamond:",
        "\t\tset the currently selected hotbar slot to slot 5 of player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprHumidity",
      "name": "Humidity",
      "since": [
        "2.2-dev35"
      ],
      "deprecated": false,
      "description": [
        "Humidity of given blocks."
      ],
      "patterns": [
        "[the] humidit(y|ies) of %blocks%",
        "%blocks%'[s] humidit(y|ies)"
      ],
      "examples": [
        "set {_humidity} to event-block's humidity"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprInventory",
      "name": "Inventory",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The inventory of a block or player. You can usually omit this expression and can directly add or remove items to/from blocks or players."
      ],
      "patterns": [
        "[the] inventor(y|ies) of %inventoryholders/item types%",
        "%inventoryholders/item types%'[s] inventor(y|ies)"
      ],
      "examples": [
        "add a plank to the player's inventory",
        "clear the player's inventory",
        "remove 5 wool from the inventory of the clicked block"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprInventoryInfo",
      "name": "Inventory Holder/Viewers/Rows/Slots",
      "since": [
        "2.2-dev34, 2.5 (slots)"
      ],
      "deprecated": false,
      "description": [
        "Gets the amount of rows/slots, viewers and holder of an inventory.",
        "",
        "NOTE: 'Viewers' expression returns a list of players viewing the inventory. Note that a player is considered to be viewing their own inventory and internal crafting screen even when said inventory is not open."
      ],
      "patterns": [
        "(holder[s]|viewers|[amount of] rows|[amount of] slots) of %inventories%",
        "%inventories%'[s] (holder[s]|viewers|[amount of] rows|[amount of] slots)"
      ],
      "examples": [
        "event-inventory's amount of rows",
        "holder of player's top inventory",
        "{_inventory}'s viewers"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprIP",
      "name": "IP",
      "since": [
        "1.4, 2.2-dev26 (when used in connect event), 2.3 (when used in server list ping event)"
      ],
      "deprecated": false,
      "description": [
        "The IP address of a player, or the connected player in a <a href='events.html#connect'>connect</a> event, or the pinger in a <a href='events.html#server_list_ping'>server list ping</a> event."
      ],
      "patterns": [
        "IP[s][( |-)address[es]] of %players%",
        "%players%'[s] IP[s][( |-)address[es]]",
        "IP[( |-)address]"
      ],
      "examples": [
        "ban the IP address of the player",
        "broadcast \"Banned the IP %IP of player%\"",
        "",
        "on connect:",
        "\tlog \"[%now%] %player% (%ip%) is connected to the server.\"",
        "",
        "on server list ping:",
        "\tsend \"%IP-address%\" to the console"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprItemAmount",
      "name": "Item Amount",
      "since": [
        "2.2-dev24"
      ],
      "deprecated": false,
      "description": [
        "The amount of an <a href='classes.html#itemstack'>item stack</a>."
      ],
      "patterns": [
        "[the] item[[ ]stack] (amount|size|number) of %slots/item types/item stacks%",
        "%slots/item types/item stacks%'[s] item[[ ]stack] (amount|size|number)"
      ],
      "examples": [
        "send \"You have got %item amount of player's tool% %player's tool% in your hand!\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprItemFlags",
      "name": "Item Flags",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The item flags of an item. Can be modified."
      ],
      "patterns": [
        "[the] item flags of %item types%",
        "%item types%'[s] item flags"
      ],
      "examples": [
        "set item flags of player's tool to hide enchants and hide attributes",
        "add hide potion effects to item flags of player's held item",
        "remove hide enchants from item flags of {legendary sword}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprItemOwner",
      "name": "Dropped Item Owner",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The uuid of the owner of the dropped item.\nSetting the owner of a dropped item means only that entity or player can pick it up.\nDropping an item does not automatically make the entity or player the owner.\n"
      ],
      "patterns": [
        "[the] uuid of [the] [dropped] item owner [of %itementities%]",
        "[the] [dropped] item owner's uuid [of %itementities%]"
      ],
      "examples": [
        "\tset the uuid of the dropped item owner of last dropped item to player\n\tif the uuid of the dropped item owner of last dropped item is uuid of player:\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprItemsIn",
      "name": "Items In",
      "since": [
        "2.0, 2.8.0 (specific types of items)"
      ],
      "deprecated": false,
      "description": [
        "All items or specific type(s) of items in an inventory. Useful for looping or storing in a list variable.",
        "Please note that the positions of the items in the inventory are not saved, only their order is preserved."
      ],
      "patterns": [
        "[all [[of] the]] items ([with]in|of|contained in|out of) [inventor(y|ies)] %inventories%",
        "all [[of] the] %item types% ([with]in|of|contained in|out of) [inventor(y|ies)] %inventories%"
      ],
      "examples": [
        "loop all items in the player's inventory:",
        "\tloop-item is enchanted",
        "\tremove loop-item from the player",
        "set {inventory::%uuid of player%::*} to items in the player's inventory"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprItemThrower",
      "name": "Dropped Item Thrower",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The uuid of the entity or player that threw/dropped the dropped item."
      ],
      "patterns": [
        "[the] uuid of [the] [dropped] item thrower [of %itementities%]",
        "[the] [dropped] item thrower's uuid [of %itementities%]"
      ],
      "examples": [
        "set the uuid of the dropped item thrower of {_dropped item} to player\nif the uuid of the dropped item thrower of {_dropped item} is uuid of player:\n",
        "clear the item thrower of {_dropped item}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprItemWithCustomModelData",
      "name": "Item with CustomModelData",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Get an item with a CustomModelData tag. (Value is an integer between 0 and 99999999)"
      ],
      "patterns": [
        "%item type% with [custom] model data %number%"
      ],
      "examples": [
        "give player a diamond sword with custom model data 2",
        "set slot 1 of inventory of player to wooden hoe with custom model data 357"
      ],
      "events": null,
      "requirements": [
        "1.14+"
      ],
      "keywords": null
    },
    {
      "id": "ExprItemWithEnchantmentGlint",
      "name": "Item with Enchantment Glint",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Get an item with or without enchantment glint."
      ],
      "patterns": [
        "%item types% with[out] [enchant[ment]] glint"
      ],
      "examples": [
        "set {_item with glint} to diamond with enchantment glint",
        "set {_item without glint} to diamond without enchantment glint"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.20.5+"
      ],
      "keywords": null
    },
    {
      "id": "ExprItemWithLore",
      "name": "Item with Lore",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Returns the given item type with the specified lore added to it.",
        "If multiple strings are passed, each of them will be a separate line in the lore."
      ],
      "patterns": [
        "%item type% with [(a|the)] lore %texts%"
      ],
      "examples": [
        "set {_test} to stone with lore \"line 1\" and \"line 2\"",
        "give {_test} to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprItemWithTooltip",
      "name": "Item with Tooltip",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Get an item with or without entire/additional tooltip.",
        "If changing the 'entire' tooltip of an item, nothing will show up when a player hovers over it.",
        "If changing the 'additional' tooltip, only specific parts (which change per item) will be hidden."
      ],
      "patterns": [
        "%item types% with[out] [entire|additional] tool[ ]tip[s]"
      ],
      "examples": [
        "set {_item with additional tooltip} to diamond with additional tooltip",
        "set {_item without entire tooltip} to diamond without entire tooltip"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.20.5+"
      ],
      "keywords": null
    },
    {
      "id": "ExprLanguage",
      "name": "Language",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Currently selected game language of a player. The value of the language is not defined properly.",
        "The vanilla Minecraft client will use lowercase language / country pairs separated by an underscore, but custom resource packs may use any format they wish."
      ],
      "patterns": [
        "[the] [([currently] selected|current)] [game] (language|locale) [setting] of %players%",
        "%players%'[s] [([currently] selected|current)] [game] (language|locale) [setting]"
      ],
      "examples": [
        "message player's current language"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLastAttacker",
      "name": "Last Attacker",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "The last block or entity that attacked an entity."
      ],
      "patterns": [
        "[the] last attacker of %entity%",
        "%entity%'[s] last attacker"
      ],
      "examples": [
        "send \"%last attacker of event-entity%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLastDamage",
      "name": "Last Damage",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "The last damage that was done to an entity. Note that changing it doesn't deal more/less damage."
      ],
      "patterns": [
        "[the] last damage of %living entities%",
        "%living entities%'[s] last damage"
      ],
      "examples": [
        "set last damage of event-entity to 2"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLastDamageCause",
      "name": "Last Damage Cause",
      "since": [
        "2.2-Fixes-V10"
      ],
      "deprecated": false,
      "description": [
        "Cause of last damage done to an entity"
      ],
      "patterns": [
        "[the] last damage (cause|reason|type) of %living entities%",
        "%living entities%'[s] last damage (cause|reason|type)"
      ],
      "examples": [
        "set last damage cause of event-entity to fire tick"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLastDeathLocation",
      "name": "Last Death Location",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Gets the last death location of a player, or offline player, if available.",
        "Can also be set, reset, and deleted if the player is online."
      ],
      "patterns": [
        "[the] [last] death location[s] of %offline players%",
        "%offline players%'[s] [last] death location[s]"
      ],
      "examples": [
        "set {_loc} to the last death location of player",
        "teleport player to last death location of (random element out of all players)"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLastLoginTime",
      "name": "Last/First Login Time",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "When a player last/first logged in the server. 'last login' requires paper to get the last login, otherwise it will get the last time they were seen on the server."
      ],
      "patterns": [
        "[the] (last|first) login of %offline players%",
        "%offline players%'[s] (last|first) login"
      ],
      "examples": [
        "command /onlinefor:",
        "\ttrigger:",
        "\t\tsend \"You have been online for %difference between player's last login and now%.\"",
        "\t\tsend \"You first joined the server %difference between player's first login and now% ago.\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLastResourcePackResponse",
      "name": "Last Resource Pack Response",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "Returns the last resource pack response received from a player."
      ],
      "patterns": [
        "[the] [last] resource pack response[s] of %players%",
        "%players%'[s] [last] resource pack response[s]"
      ],
      "examples": [
        "if player's last resource pack response is deny or download fail:"
      ],
      "events": null,
      "requirements": [
        "Paper 1.9 or newer"
      ],
      "keywords": null
    },
    {
      "id": "ExprLeashHolder",
      "name": "Leash Holder",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "The leash holder of a living entity."
      ],
      "patterns": [
        "[the] leash holder[s] of %living entities%",
        "%living entities%'[s] leash holder[s]"
      ],
      "examples": [
        "set {_example} to the leash holder of the target mob"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLength",
      "name": "Length",
      "since": [
        "2.1"
      ],
      "deprecated": false,
      "description": [
        "The length of a text, in number of characters."
      ],
      "patterns": [
        "[the] length of %texts%",
        "%texts%'[s] length"
      ],
      "examples": [
        "set {_l} to length of the string argument"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLevel",
      "name": "Level",
      "since": [
        "<i>unknown</i> (before 2.1)"
      ],
      "deprecated": false,
      "description": [
        "The level of a player."
      ],
      "patterns": [
        "[the] level of %players%",
        "%players%'[s] level"
      ],
      "examples": [
        "reduce the victim's level by 1",
        "set the player's level to 0"
      ],
      "events": [
        "level change"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLevelProgress",
      "name": "Level Progress",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The player's progress in reaching the next level, this represents the experience bar in the game. Please note that this value is between 0 and 1 (e.g. 0.5 = half experience bar).",
        "Changing this value can cause the player's level to change if the resulting level progess is negative or larger than 1, e.g. <code>increase the player's level progress by 0.5</code> will make the player gain a level if their progress was more than 50%."
      ],
      "patterns": [
        "[the] level progress of %players%",
        "%players%'[s] level progress"
      ],
      "examples": [
        "# use the exp bar as mana",
        "on rightclick with a blaze rod:",
        "\tplayer's level progress is larger than 0.2",
        "\tshoot a fireball from the player",
        "\treduce the player's level progress by 0.2",
        "every 2 seconds:",
        "\tloop all players:",
        "\t\tlevel progress of loop-player is smaller than 0.9:",
        "\t\t\tincrease level progress of the loop-player by 0.1",
        "\t\telse:",
        "\t\t\tset level progress of the loop-player to 0.99",
        "on xp spawn:",
        "\tcancel event"
      ],
      "events": [
        "level change"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLightLevel",
      "name": "Light Level",
      "since": [
        "1.3.4"
      ],
      "deprecated": false,
      "description": [
        "Gets the light level at a certain location which ranges from 0 to 15.",
        "It can be separated into sunlight (15 = direct sunlight, 1-14 = indirect) and block light (torches, glowstone, etc.). The total light level of a block is the maximum of the two different light types."
      ],
      "patterns": [
        "[(sky|sun|block)[ ]]light[ ]level [(of|%direction%) %location%]"
      ],
      "examples": [
        "# set vampire players standing in bright sunlight on fire",
        "every 5 seconds:",
        "\tloop all players:",
        "\t\t{vampire::%uuid of loop-player%} is true",
        "\t\tsunlight level at the loop-player is greater than 10",
        "\t\tignite the loop-player for 5 seconds"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLocationOf",
      "name": "Location",
      "since": [
        ""
      ],
      "deprecated": false,
      "description": [
        "The location of a block or entity. This not only represents the x, y and z coordinates of the location but also includes the world and the direction an entity is looking (e.g. teleporting to a saved location will make the teleported entity face the same saved direction every time).",
        "Please note that the location of an entity is at it's feet, use <a href='#ExprEyeLocation'>head location</a> to get the location of the head."
      ],
      "patterns": [
        "(location|position) of %location%",
        "%location%'[s] (location|position)"
      ],
      "examples": [
        "set {home::%uuid of player%} to the location of the player",
        "message \"You home was set to %player's location% in %player's world%.\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLore",
      "name": "Lore",
      "since": [
        "2.1"
      ],
      "deprecated": false,
      "description": [
        "An item's lore."
      ],
      "patterns": [
        "[the] lore of %item stack/item type%",
        "%item stack/item type%'[s] lore",
        "[the] line %number% of [the] lore of %item stack/item type%",
        "[the] line %number% of %item stack/item type%'[s] lore",
        "[the] %number%(st|nd|rd|th) line of [the] lore of %item stack/item type%",
        "[the] %number%(st|nd|rd|th) line of %item stack/item type%'[s] lore"
      ],
      "examples": [
        "set the 1st line of the item's lore to \"&lt;orange&gt;Excalibur 2.0\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLowestHighestSolidBlock",
      "name": "Lowest/Highest Solid Block",
      "since": [
        "2.2-dev34, 2.9.0 (lowest solid block, 'non-air' option removed, additional syntax option)"
      ],
      "deprecated": false,
      "description": [
        "An expression to obtain the lowest or highest solid (impassable) block at a location.",
        "Note that the y-coordinate of the location is not taken into account for this expression."
      ],
      "patterns": [
        "[the] (highest|lowest) [solid] block (at|of) %locations%",
        "%locations%'[s] (highest|lowest) [solid] block"
      ],
      "examples": [
        "teleport the player to the block above the highest block at the player",
        "set the highest solid block at the player's location to the lowest solid block at the player's location"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprMaxDurability",
      "name": "Max Durability",
      "since": [
        "2.5, 2.9.0 (change)"
      ],
      "deprecated": false,
      "description": [
        "The maximum durability of an item. Changing requires Minecraft 1.20.5+",
        "Note: 'delete' will remove the max durability from the item (making it a non-damageable item). Delete requires Paper 1.21+"
      ],
      "patterns": [
        "[the] max[imum] (durabilit(y|ies)|damage) of %item types/item stacks/slots%",
        "%item types/item stacks/slots%'[s] max[imum] (durabilit(y|ies)|damage)"
      ],
      "examples": [
        "maximum durability of diamond sword",
        "if max durability of player's tool is not 0: # Item is damageable",
        "set max durability of player's tool to 5000",
        "add 5 to max durability of player's tool",
        "reset max durability of player's tool",
        "delete max durability of player's tool"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.20.5+ (custom amount)"
      ],
      "keywords": null
    },
    {
      "id": "ExprMaxFreezeTicks",
      "name": "Maximum Freeze Time",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "The maximum amount of time an entity can spend in powdered snow before taking damage."
      ],
      "patterns": [
        "[the] max[imum] freeze time of %entities%",
        "%entities%'[s] max[imum] freeze time"
      ],
      "examples": [
        "difference between player's freeze time and player's max freeze time is less than 1 second:",
        "\tsend \"you're about to freeze!\" to the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprMaxHealth",
      "name": "Max Health",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The maximum health of an entity, e.g. 10 for a player."
      ],
      "patterns": [
        "[the] max[imum] health of %living entities%",
        "%living entities%'[s] max[imum] health"
      ],
      "examples": [
        "on join:",
        "\tset the maximum health of the player to 100",
        "spawn a giant",
        "set the last spawned entity's max health to 1000"
      ],
      "events": [
        "damage",
        "death"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprMaxItemUseTime",
      "name": "Max Item Use Time",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Returns the max duration an item can be used for before the action completes. E.g. it takes 1.6 seconds to drink a potion, or 1.4 seconds to load an unenchanted crossbow.",
        "Some items, like bows and shields, do not have a limit to their use. They will return 1 hour."
      ],
      "patterns": [
        "[the] max[imum] [item] us(e|age) (time|duration) of %item stacks%",
        "%item stacks%'[s] max[imum] [item] us(e|age) (time|duration)"
      ],
      "examples": [
        "on right click:",
        "\tbroadcast max usage duration of player's tool"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "ExprMaxMinecartSpeed",
      "name": "Max Minecart Speed",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "The maximum speed of a minecart."
      ],
      "patterns": [
        "[the] max[imum] minecart (speed|velocity) of %entities%",
        "%entities%'[s] max[imum] minecart (speed|velocity)"
      ],
      "examples": [
        "on right click on minecart:",
        "\tset max minecart speed of event-entity to 1"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprMaxPlayers",
      "name": "Max Players",
      "since": [
        "2.3, 2.7 (modify max real players)"
      ],
      "deprecated": false,
      "description": [
        "The count of max players. This can be changed in a <a href='events.html#server_list_ping'>server list ping</a> event only.",
        "'real max players' returns the real count of max players of the server and can be modified on Paper 1.16 or later."
      ],
      "patterns": [
        "[the] [(real|default)|(fake|shown|displayed)] max[imum] player[s] [count|amount|number|size]",
        "[the] [(real|default)|(fake|shown|displayed)] max[imum] (count|amount|number|size) of players"
      ],
      "examples": [
        "on server list ping:",
        "\tset the max players count to (online players count + 1)"
      ],
      "events": null,
      "requirements": [
        "Paper 1.16+ (modify max real players)"
      ],
      "keywords": null
    },
    {
      "id": "ExprMaxStack",
      "name": "Maximum Stack Size",
      "since": [
        "2.1, 2.10 (changeable, inventories)"
      ],
      "deprecated": false,
      "description": [
        "The maximum stack size of an item (e.g. 64 for torches, 16 for buckets, 1 for swords, etc.) or inventory.",
        "In 1.20.5+, the maximum stack size of items can be changed to any integer from 1 to 99, and stacked up to the maximum stack size of the inventory they're in."
      ],
      "patterns": [
        "[the] max[imum] stack[[ ]size] of %item types/inventories%",
        "%item types/inventories%'[s] max[imum] stack[[ ]size]"
      ],
      "examples": [
        "send \"You can hold %max stack size of player's tool% of %type of player's tool% in a slot.\" to player",
        "set the maximum stack size of inventory of all players to 16",
        "add 8 to the maximum stack size of player's tool",
        "reset the maximum stack size of {_gui}"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.20.5+ (changeable)"
      ],
      "keywords": null
    },
    {
      "id": "ExprMetadata",
      "name": "Metadata",
      "since": [
        "2.2-dev36, 2.10 (add, remove)"
      ],
      "deprecated": false,
      "description": [
        "Metadata is a way to store temporary data on entities, blocks and more that disappears after a server restart."
      ],
      "patterns": [
        "metadata [(value|tag)[s]] %texts% of %metadata holders%",
        "%metadata holders%'[s] metadata [(value|tag)[s]] %text%"
      ],
      "examples": [
        "set metadata value \"healer\" of player to true",
        "broadcast \"%metadata value \"\"healer\"\" of player%\"",
        "clear metadata value \"healer\" of player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprMiddleOfLocation",
      "name": "Middle of Location",
      "since": [
        "2.6.1"
      ],
      "deprecated": false,
      "description": [
        "Returns the middle/center of a location. In other words, returns the middle of the X, Z coordinates and the floor value of the Y coordinate of a location."
      ],
      "patterns": [
        "[the] (middle|center) [point] of %location%",
        "%location%'[s] (middle|center) [point]"
      ],
      "examples": [
        "command /stuck:",
        "\texecutable by: players",
        "\ttrigger:",
        "\t\tteleport player to the center of player's location",
        "\t\tsend \"You're no longer stuck.\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprMinecartDerailedFlyingVelocity",
      "name": "Minecart Derailed / Flying Velocity",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "The velocity of a minecart as soon as it has been derailed or as soon as it starts flying."
      ],
      "patterns": [
        "[the] [minecart] (derailed|flying) velocity of %entities%",
        "%entities%'[s] [minecart] (derailed|flying) velocity"
      ],
      "examples": [
        "on right click on minecart:",
        "\tset derailed velocity of event-entity to vector 2, 10, 2"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprMoonPhase",
      "name": "Moon Phase",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "The current moon phase of a world."
      ],
      "patterns": [
        "[the] (lunar|moon) phase[s] of %worlds%",
        "%worlds%'[s] (lunar|moon) phase[s]"
      ],
      "examples": [
        "if moon phase of player's world is full moon:",
        "\tsend \"Watch for the wolves!\""
      ],
      "events": null,
      "requirements": [
        "Paper 1.16+"
      ],
      "keywords": null
    },
    {
      "id": "ExprNamed",
      "name": "Named Item/Inventory",
      "since": [
        "2.0, 2.2-dev34 (inventories)"
      ],
      "deprecated": false,
      "description": [
        "Directly names an item/inventory, useful for defining a named item/inventory in a script. If you want to (re)name existing items/inventories you can either use this expression or use <code>set <a href='#ExprName'>name of &lt;item/inventory&gt;</a> to &lt;text&gt;</code>."
      ],
      "patterns": [
        "%item type/inventory type% (named|with name[s]) %text%"
      ],
      "examples": [
        "give a diamond sword of sharpness 100 named \"&lt;gold&gt;Excalibur\" to the player",
        "set tool of player to the player's tool named \"&lt;gold&gt;Wand\"",
        "set the name of the player's tool to \"&lt;gold&gt;Wand\"",
        "open hopper inventory named \"Magic Hopper\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprNoDamageTicks",
      "name": "No Damage Ticks",
      "since": [
        "2.5, 2.11 (deprecated)"
      ],
      "deprecated": true,
      "description": [
        "The number of ticks that an entity is invulnerable to damage for."
      ],
      "patterns": [
        "[the] (invulnerability|invincibility|no damage) tick[s] [of %living entities%]",
        "%living entities%'[s] (invulnerability|invincibility|no damage) tick[s]"
      ],
      "examples": [
        "on damage:",
        "\tset victim's invulnerability ticks to 20 #Victim will not take damage for the next second"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprNoDamageTime",
      "name": "No Damage Time",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The amount of time an entity is invulnerable to any damage."
      ],
      "patterns": [
        "[the] (invulnerability|invincibility|no damage) time[[ ]span] [of %living entities%]",
        "%living entities%'[s] (invulnerability|invincibility|no damage) time[[ ]span]"
      ],
      "examples": [
        "on damage:",
        "\tset victim's invulnerability time to 20 ticks #Victim will not take damage for the next second",
        "",
        "if the no damage timespan of {_entity} is 0 seconds:",
        "\tset the invincibility time span of {_entity} to 1 minute"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprNode",
      "name": "Node (Experimental)",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns a node inside a config (or another section-node).",
        "Nodes in Skript configs are written in the format `key: value`.",
        "Section nodes can contain other nodes."
      ],
      "patterns": [
        "[the] node %text% (of|in) %node%",
        "%node%'[s] node %text%",
        "[the] nodes (of|in) %nodes%",
        "%node%'[s] nodes"
      ],
      "examples": [
        "set {_node} to node \"language\" in the skript config\nif text value of {_node} is \"french\":\n\tbroadcast \"Bonjour!\"\n",
        "set {_script} to the current script\nloop nodes of the current script:\n\tbroadcast name of loop-value"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprOnlinePlayersCount",
      "name": "Online Player Count",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "The amount of online players. This can be changed in a <a href='events.html#server_list_ping'>server list ping</a> event only to show fake online player amount.",
        "<code>real online player count</code> always return the real count of online players and can't be changed."
      ],
      "patterns": [
        "[the] [((real|default)|(fake|shown|displayed))] [online] player (count|amount|number)",
        "[the] [((real|default)|(fake|shown|displayed))] (count|amount|number|size) of online players"
      ],
      "examples": [
        "on server list ping:",
        "\t# This will make the max players count 5 if there are 4 players online.",
        "\tset the fake max players count to (online player count + 1)"
      ],
      "events": null,
      "requirements": [
        "Paper (fake count)"
      ],
      "keywords": null
    },
    {
      "id": "ExprOpenedInventory",
      "name": "Opened Inventory",
      "since": [
        "2.2-dev24, 2.2-dev35 (Just 'current inventory' works in player events)"
      ],
      "deprecated": false,
      "description": [
        "Return the currently opened inventory of a player.",
        "If no inventory is open, it returns the own player's crafting inventory."
      ],
      "patterns": [
        "[the] (current|open|top) inventory [of %players%]",
        "%players%'[s] (current|open|top) inventory"
      ],
      "examples": [
        "set slot 1 of player's current inventory to diamond sword"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPandaGene",
      "name": "Panda Gene",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The main or hidden gene of a panda."
      ],
      "patterns": [
        "[the] (main|hidden) gene[s] of %living entities%",
        "%living entities%'[s] (main|hidden) gene[s]"
      ],
      "examples": [
        "if the main gene of last spawned panda is lazy:\n\tset the main gene of last spawned panda to playful\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPassenger",
      "name": "Passenger",
      "since": [
        "2.0, 2.2-dev26 (Multiple passengers for 1.11.2+)"
      ],
      "deprecated": false,
      "description": [
        "The passenger of a vehicle, or the rider of a mob.",
        "For 1.11.2 and above, it returns a list of passengers and you can use all changers in it.",
        "See also: <a href='#ExprVehicle'>vehicle</a>"
      ],
      "patterns": [
        "[the] passenger[s] of %entities%",
        "%entities%'[s] passenger[s]"
      ],
      "examples": [
        "#for 1.11 and lower",
        "passenger of the minecart is a creeper or a cow",
        "the saddled pig's passenger is a player",
        "#for 1.11.2+",
        "passengers of the minecart contains a creeper or a cow",
        "the boat's passenger contains a pig",
        "add a cow and a zombie to passengers of last spawned boat",
        "set passengers of player's vehicle to a pig and a horse",
        "remove all pigs from player's vehicle",
        "clear passengers of boat"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPermissions",
      "name": "All Permissions",
      "since": [
        "2.2-dev33"
      ],
      "deprecated": false,
      "description": [
        "Returns all permissions of the defined player(s). Note that the modifications to resulting list do not actually change permissions."
      ],
      "patterns": [
        "[(all [[of] the]|the)] permissions (from|of) %players%",
        "[(all [[of] the]|the)] %players%'[s] permissions"
      ],
      "examples": [
        "set {_permissions::*} to all permissions of the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPickupDelay",
      "name": "Pickup Delay",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "The amount of time before a dropped item can be picked up by an entity."
      ],
      "patterns": [
        "[the] pick[ ]up delay of %entities%",
        "%entities%'[s] pick[ ]up delay"
      ],
      "examples": [
        "drop diamond sword at {_location} without velocity",
        "set pickup delay of last dropped item to 5 seconds"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPing",
      "name": "Ping",
      "since": [
        "2.2-dev36"
      ],
      "deprecated": false,
      "description": [
        "Pings of players, as Minecraft server knows them. Note that they will almost certainly be different from the ones you'd get from using ICMP echo requests. This expression is only supported on some server software (PaperSpigot)."
      ],
      "patterns": [
        "[the] ping of %players%",
        "%players%'[s] ping"
      ],
      "examples": [
        "command /ping <player=%player%>:",
        "\ttrigger:",
        "\t\tsend \"%arg-1%'s ping is %arg-1's ping%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPlayerChatCompletions",
      "name": "Player Chat Completions",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The custom chat completion suggestions. You can add, set, remove, and clear them. Removing the names of online players with this expression is ineffective.",
        "This expression will not return anything due to Bukkit limitations."
      ],
      "patterns": [
        "[the] [custom] chat completion[s] of %players%",
        "%players%'[s] [custom] chat completion[s]"
      ],
      "examples": [
        "add \"Skript\" and \"Njol\" to chat completions of all players",
        "remove \"text\" from {_p}'s chat completions",
        "clear player's chat completions"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.19+"
      ],
      "keywords": null
    },
    {
      "id": "ExprPlayerlistHeaderFooter",
      "name": "Player List Header and Footer",
      "since": [
        "2.4"
      ],
      "deprecated": false,
      "description": [
        "The message above and below the player list in the tab menu."
      ],
      "patterns": [
        "[the] (player|tab)[ ]list (header|footer) [(text|message)] of %players%",
        "%players%'[s] (player|tab)[ ]list (header|footer) [(text|message)]"
      ],
      "examples": [
        "set all players' tab list header to \"Welcome to the Server!\"",
        "send \"%the player's tab list header%\" to player",
        "reset all players' tab list header"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.13 or newer"
      ],
      "keywords": null
    },
    {
      "id": "ExprPlayerProtocolVersion",
      "name": "Player Protocol Version",
      "since": [
        "2.6.2"
      ],
      "deprecated": false,
      "description": [
        "Player's protocol version. For more information and list of protocol versions <a href='https://wiki.vg/Protocol_version_numbers'>visit wiki.vg</a>."
      ],
      "patterns": [
        "[the] protocol version of %players%",
        "%players%'[s] protocol version"
      ],
      "examples": [
        "command /protocolversion &ltplayer&gt:",
        "\ttrigger:",
        "\t\tsend \"Protocol version of %arg-1%: %protocol version of arg-1%\""
      ],
      "events": null,
      "requirements": [
        "Paper 1.12.2 or newer"
      ],
      "keywords": null
    },
    {
      "id": "ExprPortalCooldown",
      "name": "Portal Cooldown",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "The amount of time before an entity can use a portal. By default, it is 15 seconds after exiting a nether portal or end gateway.",
        "Players in survival/adventure get a cooldown of 0.5 seconds, while those in creative get no cooldown.",
        "Resetting will set the cooldown back to the default 15 seconds for non-player entities and 0.5 seconds for players."
      ],
      "patterns": [
        "[the] portal cooldown of %entities%",
        "%entities%'[s] portal cooldown"
      ],
      "examples": [
        "on portal:",
        "\twait 1 tick",
        "\tset portal cooldown of event-entity to 5 seconds"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprPotionEffects",
      "name": "Potion Effects",
      "since": [
        "2.5.2"
      ],
      "deprecated": false,
      "description": [
        "Represents the active potion effects of entities and itemtypes.",
        "You can clear all potion effects of an entity/itemtype and add/remove a potion effect/type to/from an entity/itemtype.",
        "Do note you will not be able to clear the base potion effects of a potion item. In that case, just set the item to a water bottle.",
        "When adding a potion effect type (rather than a potion effect), it will default to 15 seconds with tier 1."
      ],
      "patterns": [
        "[the] [(all [[of] the]|the)] [active] potion effects of %living entities/item types%",
        "%living entities/item types%'[s] [(all [[of] the]|the)] [active] potion effects"
      ],
      "examples": [
        "set {_p::*} to active potion effects of player",
        "clear all the potion effects of player",
        "clear all the potion effects of player's tool",
        "add potion effects of player to potion effects of player's tool",
        "add speed to potion effects of target entity",
        "remove speed and night vision from potion effects of player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprProjectileCriticalState",
      "name": "Projectile Critical State",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "A projectile's critical state. The only currently accepted projectiles are arrows and tridents."
      ],
      "patterns": [
        "[the] (projectile|arrow) critical (state|ability|mode) of %projectiles%",
        "%projectiles%'[s] (projectile|arrow) critical (state|ability|mode)"
      ],
      "examples": [
        "on shoot:",
        "\tevent-projectile is an arrow",
        "\tset projectile critical mode of event-projectile to true"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprQueueStartEnd",
      "name": "Queue Start/End (Experimental)",
      "since": [
        "2.10 (experimental)"
      ],
      "deprecated": false,
      "description": [
        "Requires the <code>using queues</code> experimental feature flag to be enabled.\n\nThe first or last element in a queue. Asking for this does <b>not</b> remove the element from the queue.\n\nThis is designed for use with the <code>add</code> changer: to add or remove elements from the start or the end of the queue.\n"
      ],
      "patterns": [
        "[the] (start|end) of %queue%",
        "%queue%'[s] (start|end)"
      ],
      "examples": [
        "set {queue} to a new queue\nadd \"hello\" to {queue}\nadd \"foo\" to the start of {queue}\nbroadcast the first element of {queue} # foo\nbroadcast the first element of {queue} # hello\n# queue is now empty"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprRedstoneBlockPower",
      "name": "Redstone Block Power",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Power of a redstone block"
      ],
      "patterns": [
        "[the] redstone power of %blocks%",
        "%blocks%'[s] redstone power"
      ],
      "examples": [
        "if redstone power of targeted block is 15:",
        "\tsend \"This block is very powerful!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprRemainingAir",
      "name": "Remaining Air",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "How much time a player has left underwater before starting to drown."
      ],
      "patterns": [
        "[the] remaining air of %living entities%",
        "%living entities%'[s] remaining air"
      ],
      "examples": [
        "if the player's remaining air is less than 3 seconds:",
        "\tsend \"hurry, get to the surface!\" to the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprResonatingTime",
      "name": "Resonating Time",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Returns the resonating time of a bell.",
        "A bell will start resonating five game ticks after being rung, and will continue to resonate for 40 game ticks."
      ],
      "patterns": [
        "[the] resonat(e|ing) time of %block%",
        "%block%'[s] resonat(e|ing) time"
      ],
      "examples": [
        "broadcast \"The bell has been resonating for %resonating time of target block%\""
      ],
      "events": null,
      "requirements": [
        "Spigot 1.19.4+"
      ],
      "keywords": null
    },
    {
      "id": "ExprRingingTime",
      "name": "Ringing Time",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Returns the ringing time of a bell.",
        "A bell typically rings for 50 game ticks."
      ],
      "patterns": [
        "[the] ring[ing] time of %block%",
        "%block%'[s] ring[ing] time"
      ],
      "examples": [
        "broadcast \"The bell has been ringing for %ringing time of target block%\""
      ],
      "events": null,
      "requirements": [
        "Spigot 1.19.4+"
      ],
      "keywords": null
    },
    {
      "id": "ExprRound",
      "name": "Rounding",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "Rounds numbers normally, up (ceiling) or down (floor) respectively."
      ],
      "patterns": [
        "[a|the] (round[ed] down|floored) %numbers%",
        "%numbers% (round[ed] down|floored)",
        "[a|the] round[ed] %numbers%",
        "%numbers% round[ed]",
        "[a|the] (round[ed] up|ceil[ing]ed) %numbers%",
        "%numbers% (round[ed] up|ceil[ing]ed)"
      ],
      "examples": [
        "set {var} to rounded health of player",
        "set line 1 of the block to rounded \"%(1.5 * player's level)%\"",
        "add rounded down argument to the player's health"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSaturation",
      "name": "Saturation",
      "since": [
        "2.2-Fixes-v10, 2.2-dev35 (fully modifiable), 2.6.2 (syntax pattern changed)"
      ],
      "deprecated": false,
      "description": [
        "The saturation of a player. If used in a player event, it can be omitted and will default to event-player."
      ],
      "patterns": [
        "[the] saturation of %players%",
        "%players%'[s] saturation"
      ],
      "examples": [
        "set saturation of player to 20"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprScoreboardTags",
      "name": "Scoreboard Tags",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Scoreboard tags are simple list of texts stored directly in the data of an <a href='classes.html#entity'>entity</a>.",
        "So this is a Minecraft related thing, not Bukkit, so the tags will not get removed when the server stops. You can visit <a href='https://minecraft.wiki/w/Scoreboard#Tags'>visit Minecraft Wiki</a> for more info.",
        "This is changeable and valid for any type of entity. Also you can use use the <a href='conditions.html#CondHasScoreboardTag'>Has Scoreboard Tag</a> condition to check whether an entity has the given tags.",
        "",
        "Requires Minecraft 1.11+ (actually added in 1.9 to the game, but added in 1.11 to Spigot)."
      ],
      "patterns": [
        "[(all [[of] the]|the)] scoreboard tags of %entities%",
        "%entities%'[s] scoreboard tags"
      ],
      "examples": [
        "on spawn of a monster:",
        "\tif the spawn reason is mob spawner:",
        "\t\tadd \"spawned by a spawner\" to the scoreboard tags of event-entity",
        "",
        "on death of a monster:",
        "\tif the attacker is a player:",
        "\t\tif the victim doesn't have the scoreboard tag \"spawned by a spawner\":",
        "\t\t\tadd 1$ to attacker's balance"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSeaLevel",
      "name": "Sea Level",
      "since": [
        "2.5.1"
      ],
      "deprecated": false,
      "description": [
        "Gets the sea level of a world."
      ],
      "patterns": [
        "[the] sea level of %worlds%",
        "%worlds%'[s] sea level"
      ],
      "examples": [
        "send \"The sea level in your world is %sea level in player's world%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSeaPickles",
      "name": "Sea Pickles",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "An expression to obtain or modify data relating to the pickles of a sea pickle block."
      ],
      "patterns": [
        "[the] [(min|max)[imum]] [sea] pickle(s| (count|amount)) of %blocks%",
        "%blocks%'[s] [(min|max)[imum]] [sea] pickle(s| (count|amount))"
      ],
      "examples": [
        "on block break:",
        "\ttype of block is sea pickle",
        "\tsend \"Wow! This stack of sea pickles contained %event-block's sea pickle count% pickles!\"",
        "\tsend \"It could've contained a maximum of %event-block's maximum sea pickle count% pickles!\"",
        "\tsend \"It had to have contained at least %event-block's minimum sea pickle count% pickles!\"",
        "\tcancel event",
        "\tset event-block's sea pickle count to event-block's maximum sea pickle count",
        "\tsend \"This bad boy is going to hold so many pickles now!!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSeed",
      "name": "World Seed",
      "since": [
        "2.2-dev35"
      ],
      "deprecated": false,
      "description": [
        "The seed of given world. Note that it will be returned as Minecraft internally treats seeds, not as you specified it in world configuration."
      ],
      "patterns": [
        "[the] seed[s] (from|of) %worlds%",
        "%worlds%'[s] seed[s]"
      ],
      "examples": [
        "broadcast \"Seed: %seed of player's world%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprServerIcon",
      "name": "Server Icon",
      "since": [
        "2.3"
      ],
      "deprecated": false,
      "description": [
        "Icon of the server in the server list. Can be set to an icon that loaded using the",
        "<a href='effects.html#EffLoadServerIcon'>load server icon</a> effect,",
        "or can be reset to the default icon in a <a href='events.html#server_list_ping'>server list ping</a>.",
        "'default server icon' returns the default server icon (server-icon.png) always and cannot be changed."
      ],
      "patterns": [
        "[the] [((default)|(shown|sent))] [server] icon"
      ],
      "examples": [
        "on script load:",
        "\tset {server-icons::default} to the default server icon"
      ],
      "events": null,
      "requirements": [
        "Paper 1.12.2 or newer"
      ],
      "keywords": null
    },
    {
      "id": "ExprSignText",
      "name": "Sign Text",
      "since": [
        "1.3"
      ],
      "deprecated": false,
      "description": [
        "A line of text on a sign. Can be changed, but remember that there is a 16 character limit per line (including color codes that use 2 characters each)."
      ],
      "patterns": [
        "[the] line %number% [of %block%]",
        "[the] (1st|first|2nd|second|3rd|third|4th|fourth) line [of %block%]"
      ],
      "examples": [
        "on rightclick on sign:",
        "\tline 2 of the clicked block is \"[Heal]\":",
        "\t\theal the player",
        "\tset line 3 to \"%player%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSimulationDistance",
      "name": "Simulation Distance",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The simulation distance of a world or a player.",
        "Simulation distance is the minimum distance in chunks for entities to tick.",
        "Simulation distance is capped to the current view distance of the world or player.",
        "The view distance is capped between 2 and 32 chunks.",
        "Paper is required to change the simulation distance for both worlds and players."
      ],
      "patterns": [
        "[the] simulation distance[s] of %worlds/players%",
        "%worlds/players%'[s] simulation distance[s]"
      ],
      "examples": [
        "set simulation distance of player to 10",
        "add 50 to the simulation distance of world \"world\"",
        "reset the simulation distance of player",
        "clear the simulation distance of world \"world\""
      ],
      "events": null,
      "requirements": [
        "Paper (change for players), Paper 1.21+ (change for worlds)"
      ],
      "keywords": null
    },
    {
      "id": "ExprSkull",
      "name": "Player Skull",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "Gets a skull item representing a player. Skulls for other entities are provided by the aliases."
      ],
      "patterns": [
        "[the] (head|skull) of %offline players%",
        "%offline players%'[s] (head|skull)"
      ],
      "examples": [
        "give the victim's skull to the attacker",
        "set the block at the entity to the entity's skull"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSkullOwner",
      "name": "Skull Owner",
      "since": [
        "2.9.0, 2.10 (of items)"
      ],
      "deprecated": false,
      "description": [
        "The skull owner of a player skull."
      ],
      "patterns": [
        "[the] (head|skull) owner of %slots/item types/item stacks/blocks%",
        "%slots/item types/item stacks/blocks%'[s] (head|skull) owner"
      ],
      "examples": [
        "set {_owner} to the skull owner of event-block",
        "set skull owner of {_block} to \"Njol\" parsed as offlineplayer",
        "set head owner of player's tool to {_player}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSlotIndex",
      "name": "Slot Index",
      "since": [
        "2.2-dev35, 2.8.0 (raw index)"
      ],
      "deprecated": false,
      "description": [
        "Index of an an inventory slot. Other types of slots may or may not have indices. Note that comparing slots with numbers is also possible; if index of slot is same as the number, comparisonsucceeds. This expression is mainly for the cases where you must for some reason save the slot numbers.",
        "",
        "Raw index of slot is unique for the view, see <a href=\"https://wiki.vg/Inventory\">Minecraft Wiki</a>"
      ],
      "patterns": [
        "[the] [(raw|unique)] index of %slots%",
        "%slots%'[s] [(raw|unique)] index"
      ],
      "examples": [
        "if index of event-slot is 10:",
        "\tsend \"You bought a pie!\"",
        "",
        "if display name of player's top inventory is \"Custom Menu\": # 3 rows inventory",
        "\tif raw index of event-slot > 27: # outside custom inventory",
        "\t\tcancel event"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSpawn",
      "name": "Spawn",
      "since": [
        "1.4.2"
      ],
      "deprecated": false,
      "description": [
        "The spawn point of a world."
      ],
      "patterns": [
        "[the] spawn[s] [(point|location)[s]] [of %worlds%]",
        "%worlds%'[s] spawn[s] [(point|location)[s]]"
      ],
      "examples": [
        "teleport all players to spawn",
        "set the spawn point of \"world\" to the player's location"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSpawnEggEntity",
      "name": "Spawn Egg Entity",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Gets or sets the entity snapshot that the provided spawn eggs will spawn when used."
      ],
      "patterns": [
        "[the] spawn egg entity of %item stacks/item types/slots%",
        "%item stacks/item types/slots%'[s] spawn egg entity"
      ],
      "examples": [
        "set {_item} to a zombie spawn egg",
        "broadcast the spawn egg entity of {_item}",
        "",
        "spawn a pig at location(0,0,0):",
        "\tset the max health of entity to 20",
        "\tset the health of entity to 20",
        "\tset {_snapshot} to the entity snapshot of entity",
        "\tclear entity",
        "set the spawn egg entity of {_item} to {_snapshot}",
        "if the spawn egg entity of {_item} is {_snapshot}: # Minecraft 1.20.5+",
        "",
        "set the spawn egg entity of {_item} to (random element out of all entities)",
        "",
        "set the spawn egg entity of {_item} to a zombie"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.20.2+, Minecraft 1.20.5+ (comparisons)"
      ],
      "keywords": null
    },
    {
      "id": "ExprSpawnerType",
      "name": "Spawner Type",
      "since": [
        "2.4, 2.9.2 (trial spawner)"
      ],
      "deprecated": false,
      "description": [
        "Retrieves, sets, or resets the spawner's entity type"
      ],
      "patterns": [
        "[the] (spawner|entity|creature) type[s] of %blocks%",
        "%blocks%'[s] (spawner|entity|creature) type[s]"
      ],
      "examples": [
        "on right click:",
        "\tif event-block is spawner:",
        "\t\tsend \"Spawner's type is %target block's entity type%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSpectatorTarget",
      "name": "Spectator Target",
      "since": [
        "2.4-alpha4, 2.7 (Paper Spectator Event)"
      ],
      "deprecated": false,
      "description": [
        "Grabs the spectator target entity of the players."
      ],
      "patterns": [
        "spectator target [of %players%]",
        "%players%'[s] spectator target"
      ],
      "examples": [
        "on player start spectating of player:",
        "\tmessage \"&c%spectator target% currently has %{game::kills::%spectator target%}% kills!\" to the player",
        "",
        "on player stop spectating:",
        "\tpast spectator target was a zombie",
        "\tset spectator target to the nearest skeleton"
      ],
      "events": null,
      "requirements": [
        "Paper"
      ],
      "keywords": null
    },
    {
      "id": "ExprSpeed",
      "name": "Speed",
      "since": [
        "<i>unknown</i> (before 2.1)"
      ],
      "deprecated": false,
      "description": [
        "A player's walking or flying speed. Both can be changed, but values must be between -1 and 1 (excessive values will be changed to -1 or 1 respectively). Negative values reverse directions.",
        "Please note that changing a player's speed will change their FOV just like potions do."
      ],
      "patterns": [
        "[the] (walk[ing]|fl(y[ing]|ight))[( |-)]speed of %players%",
        "%players%'[s] (walk[ing]|fl(y[ing]|ight))[( |-)]speed"
      ],
      "examples": [
        "set the player's walk speed to 1",
        "increase the argument's fly speed by 0.1"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprStringColor",
      "name": "String Colors",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Retrieve the first, the last, or all of the color objects or color codes of a string.",
        "The retrieved color codes of the string will be formatted with the color symbol."
      ],
      "patterns": [
        "[all [of the|the]|the] string colo[u]r[s] [code[s]] of %texts%",
        "[the] first string colo[u]r[s] [code[s]] of %texts%",
        "[the] last string colo[u]r[s] [code[s]] of %texts%"
      ],
      "examples": [
        "set {_colors::*} to the string colors of \"<red>hey<blue>yo\"",
        "",
        "set {_color} to the first string color code of \"&aGoodbye!\"",
        "send \"%{_color}%Howdy!\" to all players"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTarget",
      "name": "Target",
      "since": [
        "1.4.2, 2.7 (Reset), 2.8.0 (ignore blocks)"
      ],
      "deprecated": false,
      "description": [
        "For players this is the entity at the crosshair.",
        "For mobs and experience orbs this is the entity they are attacking/following (if any).",
        "Display entities have a hit box of 0, so you should use 'target display' to collect Display entities",
        "May grab entities in unloaded chunks."
      ],
      "patterns": [
        "[the] target[[ed] %*entity type%] [of %living entities%] [ignoring blocks] [[with|at] ray[ ]size %number%]",
        "%living entities%'[s] target[[ed] %*entity type%] [ignoring blocks] [[with|at] ray[ ]size %number%]"
      ],
      "examples": [
        "on entity target:",
        "\tif entity's target is a player:",
        "\t\tsend \"You're being followed by an %entity%!\" to target of entity",
        "",
        "reset target of entity # Makes the entity target-less",
        "delete targeted entity of player # for players it will delete the target",
        "delete target of last spawned zombie # for entities it will make them target-less"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTemperature",
      "name": "Temperature",
      "since": [
        "2.2-dev35"
      ],
      "deprecated": false,
      "description": [
        "Temperature at given block."
      ],
      "patterns": [
        "[the] temperature[s] of %blocks%",
        "%blocks%'[s] temperature[s]"
      ],
      "examples": [
        "message \"%temperature of the targeted block%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTime",
      "name": "Time",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The <a href='classes.html#time'>time</a> of a world.",
        "Use the \"minecraft <a href='classes.html#timespan'>timespan</a>\" syntax to change the time according to Minecraft's time intervals.",
        "Since Minecraft uses discrete intervals for time (ticks), changing the time by real-world minutes or real-world seconds only changes it approximately.",
        "Removing an amount of time from a world's time will move the clock forward a day."
      ],
      "patterns": [
        "[the] time[s] [([with]in|of) %worlds%]",
        "%worlds%'[s] time[s]"
      ],
      "examples": [
        "set time of world \"world\" to 2:00",
        "add 2 minecraft hours to time of world \"world\"",
        "add 54 real seconds to time of world \"world\" # approximately 1 minecraft hour"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTimePlayed",
      "name": "Time Played",
      "since": [
        "2.5, 2.7 (offline players)"
      ],
      "deprecated": false,
      "description": [
        "The amount of time a player has played for on the server. This info is stored in the player's statistics in the main world's data folder. Changing this will also change the player's stats which can be views in the client's statistics menu.",
        "Using this expression on offline players on Minecraft 1.14 and below will return nothing <code>&lt;none&gt;</code>."
      ],
      "patterns": [
        "[the] time played of %offline players%",
        "%offline players%'[s] time played"
      ],
      "examples": [
        "set {_t} to time played of player",
        "if player's time played is greater than 10 minutes:",
        "\tgive player a diamond sword",
        "",
        "set player's time played to 0 seconds"
      ],
      "events": null,
      "requirements": [
        "MC 1.15+ (offline players)"
      ],
      "keywords": null
    },
    {
      "id": "ExprTimeSince",
      "name": "Time Since/Until",
      "since": [
        "2.5, 2.10 (time until)"
      ],
      "deprecated": false,
      "description": [
        "The time since a date has passed or the time until a date will pass.",
        "This expression will return 0 seconds if the time since or time until would be negative, e.g. if one tries to get the time since a future date."
      ],
      "patterns": [
        "[the] time since %dates%",
        "[the] (time [remaining]|remaining time) until %dates%"
      ],
      "examples": [
        "send \"%time since 5 minecraft days ago% has passed since 5 minecraft days ago!\" to player",
        "send \"%time until {countdown::end}% until the game begins!\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTimespanDetails",
      "name": "Timespan Details",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Retrieve specific information of a <a href=\"/classes.html#timespan\">timespan</a> such as hours/minutes/etc."
      ],
      "patterns": [
        "[the] ((tick|second|minute|hour|day|week|month|year))s of %time spans%",
        "%time spans%'[s] ((tick|second|minute|hour|day|week|month|year))s"
      ],
      "examples": [
        "set {_t} to difference between now and {Payouts::players::%uuid of player%::last-date}",
        "send \"It has been %days of {_t}% day(s) since last payout.\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTimeState",
      "name": "Former/Future State",
      "since": [
        "1.1"
      ],
      "deprecated": false,
      "description": [
        "Represents the value of an expression before an event happened or the value it will have directly after the event, e.g. the old or new level respectively in a <a href='./events.html#level_change'>level change event</a>.",
        "Note: The past, future and present states of an expression are sometimes called 'time states' of an expression.",
        "Note 2: If you don't specify whether to use the past or future state of an expression that has different values, its default value will be used which is usually the value after the event."
      ],
      "patterns": [
        "[the] (former|past|old) [state] [of] %~objects%",
        "%~objects% before [the event]",
        "[the] (future|to-be|new) [state] [of] %~objects%",
        "%~objects%(-to-be| after[(wards| the event)])"
      ],
      "examples": [
        "on teleport:",
        "\tformer world was \"world_nether\" # or 'world was'",
        "\tworld will be \"world\" # or 'world after the event is'",
        "on tool change:",
        "\tpast tool is an axe",
        "\tthe tool after the event will be air",
        "on weather change:",
        "\tset {weather::%world%::old} to past weather",
        "\tset {weather::%world%::current} to the new weather"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTool",
      "name": "Tool",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The item an entity is holding in their main or off hand."
      ],
      "patterns": [
        "[the] (tool|held item|weapon) [of %living entities%]",
        "%living entities%'[s] (tool|held item|weapon)",
        "[the] off[ ]hand (tool|item) [of %living entities%]",
        "%living entities%'[s] off[ ]hand (tool|item)"
      ],
      "examples": [
        "player's tool is tagged with minecraft tag \"pickaxes\"",
        "player's off hand tool is a shield",
        "set tool of all players to a diamond sword",
        "set offhand tool of target entity to a bow"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTotalExperience",
      "name": "Total Experience",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "The total experience, in points, of players or experience orbs.",
        "Adding to a player's experience will trigger Mending, but setting their experience will not."
      ],
      "patterns": [
        "[the] [total] experience of %entities%",
        "%entities%'[s] [total] experience"
      ],
      "examples": [
        "set total experience of player to 100",
        "",
        "add 100 to player's experience",
        "",
        "if player's total experience is greater than 100:",
        "\tset player's total experience to 0",
        "\tgive player 1 diamond"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTypeOf",
      "name": "Type of",
      "since": [
        "1.4, 2.5.2 (potion effect), 2.7 (block datas), 2.10 (enchantment type)"
      ],
      "deprecated": false,
      "description": [
        "Type of a block, item, entity, inventory, potion effect or enchantment type.",
        "Types of items, blocks and block datas are item types similar to them but have amounts",
        "of one, no display names and, on Minecraft 1.13 and newer versions, are undamaged.",
        "Types of entities and inventories are entity types and inventory types known to Skript.",
        "Types of potion effects are potion effect types.",
        "Types of enchantment types are enchantments."
      ],
      "patterns": [
        "[the] type of %entity types/item types/inventories/potion effects/block datas/enchantment types%",
        "%entity types/item types/inventories/potion effects/block datas/enchantment types%'[s] type"
      ],
      "examples": [
        "on rightclick on an entity:",
        "\tmessage \"This is a %type of clicked entity%!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprUnbreakable",
      "name": "Unbreakable Items",
      "since": [
        "2.2-dev13b, 2.9.0 (breakable)"
      ],
      "deprecated": false,
      "description": [
        "Creates breakable or unbreakable copies of given items."
      ],
      "patterns": [
        "[un]breakable %item types%"
      ],
      "examples": [
        "set {_item} to unbreakable iron sword",
        "give breakable {_weapon} to all players"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprUnixDate",
      "name": "Unix Date",
      "since": [
        "2.5"
      ],
      "deprecated": false,
      "description": [
        "Converts given Unix timestamp to a date. The Unix timespan represents the number of seconds elapsed since 1 January 1970."
      ],
      "patterns": [
        "[the] unix date of %numbers%",
        "%numbers%'[s] unix date"
      ],
      "examples": [
        "unix date of 946684800 #1 January 2000 12:00 AM (UTC Time)"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprUnixTicks",
      "name": "Unix Timestamp",
      "since": [
        "2.2-dev31"
      ],
      "deprecated": false,
      "description": [
        "Converts given date to Unix timestamp. This is roughly how many seconds have elapsed since 1 January 1970."
      ],
      "patterns": [
        "[the] unix timestamp of %dates%",
        "%dates%'[s] unix timestamp"
      ],
      "examples": [
        "unix timestamp of now"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprUUID",
      "name": "UUID",
      "since": [
        "2.1.2, 2.2 (offline players' uuids), 2.2-dev24 (other entities' uuids)"
      ],
      "deprecated": false,
      "description": [
        "The UUID of a player, entity or world."
      ],
      "patterns": [
        "[the] UUID of %offline players/worlds/entities%",
        "%offline players/worlds/entities%'[s] UUID"
      ],
      "examples": [
        "# prevents people from joining the server if they use the name of a player",
        "# who has played on this server at least once since this script has been added",
        "on login:",
        "\tif {uuid::%name of player%} exists:",
        "\t\t{uuid::%name of player%} is not uuid of player",
        "\t\tkick player due to \"Someone with your name has played on this server before\"",
        "\telse:",
        "\t\tset {uuid::%name of player%} to uuid of player",
        "",
        "command /what-is-my-uuid:",
        "\ttrigger:",
        "\t\tset {_uuid} to uuid of player",
        "\t\tsend \"Your UUID is '%string within {_uuid}%'\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprValue",
      "name": "Value",
      "since": [
        "2.10 (Nodes), 2.10 (Any)"
      ],
      "deprecated": false,
      "description": [
        "Returns the value of something that has a value, e.g. a node in a config.",
        "The value is automatically converted to the specified type (e.g. text, number) where possible."
      ],
      "patterns": [
        "[the] %*type% value [at] %text% (from|in) %node%",
        "[the] %*type% value of %valued thing%",
        "[the] %*type% values of %valued things%",
        "%valued thing%'s %*type% value",
        "%valued things%'[s] %*type% values"
      ],
      "examples": [
        "set {_node} to node \"language\" in the skript config\nbroadcast the text value of {_node}",
        "set {_node} to node \"update check interval\" in the skript config\n\nbroadcast text value of {_node}\n# text value of {_node} = \"12 hours\" (text)\n\nwait for {_node}'s timespan value\n# timespan value of {_node} = 12 hours (duration)"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorFromDirection",
      "name": "Vectors - Create from Direction",
      "since": [
        "2.8.0"
      ],
      "deprecated": false,
      "description": [
        "Creates vectors from given directions.",
        "Relative directions are relative to the origin, (0, 0, 0). Therefore, the vector from the direction 'forwards' is (0, 0, 1)."
      ],
      "patterns": [
        "vector[s] [from] %directions%",
        "%directions% vector[s]"
      ],
      "examples": [
        "set {_v} to vector from direction upwards",
        "set {_v} to vector in direction of player",
        "set {_v} to vector in horizontal direction of player",
        "set {_v} to vector from facing of player",
        "set {_v::*} to vectors from north, south, east, and west"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorLength",
      "name": "Vectors - Length",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Gets or sets the length of a vector."
      ],
      "patterns": [
        "[the] (vector|standard|normal) length[s] of %vectors%",
        "%vectors%'[s] (vector|standard|normal) length[s]"
      ],
      "examples": [
        "send \"%standard length of vector 1, 2, 3%\"",
        "set {_v} to vector 1, 2, 3",
        "set standard length of {_v} to 2",
        "send \"%standard length of {_v}%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorOfLocation",
      "name": "Vectors - Vector from Location",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Creates a vector from a location."
      ],
      "patterns": [
        "[the] vector (of|from|to) %location%",
        "%location%'s vector"
      ],
      "examples": [
        "set {_v} to vector of {_loc}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVectorSquaredLength",
      "name": "Vectors - Squared Length",
      "since": [
        "2.2-dev28"
      ],
      "deprecated": false,
      "description": [
        "Gets the squared length of a vector."
      ],
      "patterns": [
        "[the] squared length[s] of %vectors%",
        "%vectors%'[s] squared length[s]"
      ],
      "examples": [
        "send \"%squared length of vector 1, 2, 3%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVehicle",
      "name": "Vehicle",
      "since": [
        "2.0"
      ],
      "deprecated": false,
      "description": [
        "The vehicle an entity is in, if any. This can actually be any entity, e.g. spider jockeys are skeletons that ride on a spider, so the spider is the 'vehicle' of the skeleton.",
        "See also: <a href='#ExprPassenger'>passenger</a>"
      ],
      "patterns": [
        "[the] vehicle[s] of %entities%",
        "%entities%'[s] vehicle[s]"
      ],
      "examples": [
        "vehicle of the player is a minecart"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVelocity",
      "name": "Vectors - Velocity",
      "since": [
        "2.2-dev31"
      ],
      "deprecated": false,
      "description": [
        "Gets or changes velocity of an entity."
      ],
      "patterns": [
        "[the] velocit(y|ies) of %entities%",
        "%entities%'[s] velocit(y|ies)"
      ],
      "examples": [
        "set player's velocity to {_v}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprViewDistance",
      "name": "View Distance",
      "since": [
        "2.4, 2.11 (worlds)"
      ],
      "deprecated": false,
      "description": [
        "The view distance of a world or a player.",
        "The view distance of a player is the distance in chunks sent by the server to the player. This has nothing to do with client side view distance settings.",
        "View distance is capped between 2 to 32 chunks.",
        "Paper is required to change the view distance for both worlds and players."
      ],
      "patterns": [
        "[the] view distance[s] of %players/worlds%",
        "%players/worlds%'[s] view distance[s]"
      ],
      "examples": [
        "set view distance of player to 10",
        "add 50 to the view distance of world \"world\"",
        "reset the view distance of player",
        "clear the view distance of world \"world\""
      ],
      "events": null,
      "requirements": [
        "Paper (change for players), Paper 1.21+ (change for worlds)"
      ],
      "keywords": null
    },
    {
      "id": "ExprVillagerLevel",
      "name": "Villager Level/Experience",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Represents the level/experience of a villager.",
        "The level will determine which trades are available to players (value between 1 and 5, defaults to 1).",
        "When a villager's level is 1, they may lose their profession if they don't have a workstation.",
        "Experience works along with the leveling system, determining which level the villager will move to.",
        "Experience must be greater than or equal to 0.",
        "Learn more about villager levels on <a href='https://minecraft.wiki/w/Trading#Level'>Minecraft Wiki</a>"
      ],
      "patterns": [
        "[the] villager (level|experience) of %living entities%",
        "%living entities%'[s] villager (level|experience)"
      ],
      "examples": [
        "set {_level} to villager level of {_villager}",
        "set villager level of last spawned villager to 2",
        "add 1 to villager level of target entity",
        "remove 1 from villager level of event-entity",
        "reset villager level of event-entity",
        "set villager experience of last spawned entity to 100"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVillagerProfession",
      "name": "Villager Profession",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Represents the profession of a villager/zombie villager."
      ],
      "patterns": [
        "[the] villager profession of %living entities%",
        "%living entities%'[s] villager profession"
      ],
      "examples": [
        "set {_p} to villager profession of event-entity",
        "villager profession of event-entity = nitwit profession",
        "set villager profession of {_villager} to librarian profession",
        "delete villager profession of event-entity"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprVillagerType",
      "name": "Villager Type",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Represents the type of a villager/zombie villager. This usually represents the biome the villager is from."
      ],
      "patterns": [
        "[the] villager type of %living entities%",
        "%living entities%'[s] villager type"
      ],
      "examples": [
        "set {_type} to villager type of {_villager}",
        "villager type of {_villager} = plains",
        "set villager type of event-entity to plains"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWardenAngryAt",
      "name": "Warden Most Angered At",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The entity a warden is most angry at.",
        "A warden can be angry towards multiple entities with different anger levels."
      ],
      "patterns": [
        "[the] most angered entity of %living entities%",
        "%living entities%'[s] most angered entity"
      ],
      "examples": [
        "if the most angered entity of last spawned warden is not player:",
        "\tset the most angered entity of last spawned warden to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWeather",
      "name": "Weather",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The weather of a world or player.",
        "Clearing or resetting the weather of a player will make the player's weather match the weather of the world.",
        "Clearing or resetting the weather of a world will make the weather clear."
      ],
      "patterns": [
        "[the] weather [(in|of) %players/worlds%]",
        "[the] (custom|client) weather [of %players%]",
        "%players/worlds%'[s] weather",
        "%players%'[s] (custom|client) weather"
      ],
      "examples": [
        "set weather to clear",
        "weather in \"world\" is rainy",
        "reset custom weather of player",
        "set weather of player to clear"
      ],
      "events": [
        "weather change"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWithFireResistance",
      "name": "With Fire Resistance",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Creates a copy of an item with (or without) fire resistance."
      ],
      "patterns": [
        "%item type% with[out] fire[ ]resistance",
        "fire resistant %item type%"
      ],
      "examples": [
        "set {_x} to diamond sword with fire resistance",
        "equip player with netherite helmet without fire resistance",
        "drop fire resistant stone at player"
      ],
      "events": null,
      "requirements": [
        "Spigot 1.20.5+"
      ],
      "keywords": null
    },
    {
      "id": "ExprWorld",
      "name": "World",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The world the event occurred in."
      ],
      "patterns": [
        "[the] world [of %locations/entities/chunk%]",
        "%locations/entities/chunk%'[s] world"
      ],
      "examples": [
        "world is \"world_nether\"",
        "teleport the player to the world's spawn",
        "set the weather in the player's world to rain",
        "set {_world} to world of event-chunk"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWorldBorder",
      "name": "World Border",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "Get the border of a world or a player.",
        "A player's world border is not persistent. Restarts, quitting, death or changing worlds will reset the border."
      ],
      "patterns": [
        "[the] world[ ]border [of %worlds/players%]",
        "%worlds/players%'[s] world[ ]border"
      ],
      "examples": [
        "set {_border} to world border of player's world"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWorldBorderCenter",
      "name": "Center of World Border",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The center of a world border."
      ],
      "patterns": [
        "[the] world[ ]border (center|middle) [of %worldborders%]",
        "%worldborders%'[s] world[ ]border (center|middle)"
      ],
      "examples": [
        "set world border center of {_worldborder} to location(10, 0, 20)"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWorldBorderDamageAmount",
      "name": "Damage Amount of World Border",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The amount of damage a player takes per second for each block they are outside the border plus the border buffer.",
        "Players only take damage when outside of the world's world border, and the damage value cannot be less than 0."
      ],
      "patterns": [
        "[the] world[ ]border damage amount [of %worldborders%]",
        "%worldborders%'[s] world[ ]border damage amount"
      ],
      "examples": [
        "set world border damage amount of {_worldborder} to 1"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWorldBorderDamageBuffer",
      "name": "Damage Buffer of World Border",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The amount of blocks a player may safely be outside the border before taking damage.",
        "Players only take damage when outside of the world's world border, and the damage buffer distance cannot be less than 0."
      ],
      "patterns": [
        "[the] world[ ]border damage buffer [of %worldborders%]",
        "%worldborders%'[s] world[ ]border damage buffer"
      ],
      "examples": [
        "set world border damage buffer of {_worldborder} to 10"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWorldBorderSize",
      "name": "Size of World Border",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The size of a world border.",
        "The size can not be smaller than 1."
      ],
      "patterns": [
        "[the] world[ ]border (size|diameter|radius) [of %worldborders%]",
        "%worldborders%'[s] world[ ]border (size|diameter|radius)"
      ],
      "examples": [
        "set world border radius of {_worldborder} to 10"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWorldBorderWarningDistance",
      "name": "Warning Distance of World Border",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The warning distance of a world border. The player's screen will be tinted red when they are within this distance of the border.",
        "Players only see a red tint when approaching a world's worldborder and the warning distance has to be an integer greater than or equal to 0."
      ],
      "patterns": [
        "[the] world[ ]border warning distance [of %worldborders%]",
        "%worldborders%'[s] world[ ]border warning distance"
      ],
      "examples": [
        "set world border warning distance of {_worldborder} to 1"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWorldBorderWarningTime",
      "name": "Warning Time of World Border",
      "since": [
        "2.11"
      ],
      "deprecated": false,
      "description": [
        "The warning time of a world border. If the border is shrinking, the player's screen will be tinted red once the border will catch the player within this time period."
      ],
      "patterns": [
        "[the] world[ ]border warning time [of %worldborders%]",
        "%worldborders%'[s] world[ ]border warning time"
      ],
      "examples": [
        "set world border warning time of {_worldborder} to 1 second"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprWorldEnvironment",
      "name": "World Environment",
      "since": [
        "2.7"
      ],
      "deprecated": false,
      "description": [
        "The environment of a world"
      ],
      "patterns": [
        "[the] [world] environment of %worlds%",
        "%worlds%'[s] [world] environment"
      ],
      "examples": [
        "if environment of player's world is nether:",
        "\tapply fire resistance to player for 10 minutes"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprXYZComponent",
      "name": "Vector/Quaternion - WXYZ Component",
      "since": [
        "2.2-dev28, 2.10 (quaternions)"
      ],
      "deprecated": false,
      "description": [
        "Gets or changes the W, X, Y or Z component of <a href='classes.html#vector'>vectors</a>/<a href='classes.html#quaternion'>quaternions</a>.",
        "You cannot use the W component with vectors; it is for quaternions only."
      ],
      "patterns": [
        "[the] [vector|quaternion] (w|x|y|z) [component[s]] of %vectors/quaternions%",
        "%vectors/quaternions%'[s] [vector|quaternion] (w|x|y|z) [component[s]]"
      ],
      "examples": [
        "set {_v} to vector 1, 2, 3",
        "send \"%x of {_v}%, %y of {_v}%, %z of {_v}%\"",
        "add 1 to x of {_v}",
        "add 2 to y of {_v}",
        "add 3 to z of {_v}",
        "send \"%x of {_v}%, %y of {_v}%, %z of {_v}%\"",
        "set x component of {_v} to 1",
        "set y component of {_v} to 2",
        "set z component of {_v} to 3",
        "send \"%x component of {_v}%, %y component of {_v}%, %z component of {_v}%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprYawPitch",
      "name": "Yaw / Pitch",
      "since": [
        "2.0, 2.2-dev28 (vector yaw/pitch), 2.9.0 (entity changers)"
      ],
      "deprecated": false,
      "description": [
        "The yaw or pitch of a location or vector.",
        "A yaw of 0 or 360 represents the positive z direction. Adding a positive number to the yaw of a player will rotate it clockwise.",
        "A pitch of 90 represents the negative y direction, or downward facing. A pitch of -90 represents upward facing. Adding a positive number to the pitch will rotate the direction downwards.",
        "Only Paper 1.19+ users may directly change the yaw/pitch of players."
      ],
      "patterns": [
        "[the] (yaw|pitch) of %entities/locations/vectors%",
        "%entities/locations/vectors%'[s] (yaw|pitch)"
      ],
      "examples": [
        "log \"%player%: %location of player%, %player's yaw%, %player's pitch%\" to \"playerlocs.log\"",
        "set {_yaw} to yaw of player",
        "set {_p} to pitch of target entity",
        "set pitch of player to -90 # Makes the player look upwards, Paper 1.19+ only",
        "add 180 to yaw of target of player # Makes the target look behind themselves"
      ],
      "events": null,
      "requirements": [
        "Paper 1.19+ (player changers)"
      ],
      "keywords": null
    },
    {
      "id": "ExprItemOfEntity",
      "name": "Item of an Entity",
      "since": [
        "2.2-dev35, 2.2-dev36 (improved), 2.5.2 (throwable projectiles), 2.10 (item displays)"
      ],
      "deprecated": false,
      "description": [
        "An item associated with an entity. For dropped item entities, it gets the item that was dropped.",
        "For item frames, the item inside the frame is returned.",
        "For throwable projectiles (snowballs, enderpearls etc.) or item displays, it gets the displayed item.",
        "Other entities do not have items associated with them."
      ],
      "patterns": [
        "[the] item [inside] of %entities%",
        "%entities%'[s] item [inside]"
      ],
      "examples": [
        "item of event-entity",
        "",
        "set the item inside of event-entity to a diamond sword named \"Example\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprQuaternionAxisAngle",
      "name": "Rotation Axis/Angle",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the axis or angle that a quaternion will rotate by/around.",
        "All quaternions can be represented by a rotation of some amount around some axis, so this expression provides the ability to get that angle/axis."
      ],
      "patterns": [
        "[the] rotation (angle|axis) of %quaternions%",
        "%quaternions%'[s] rotation (angle|axis)"
      ],
      "examples": [
        "set {_quaternion} to axisAngle(45, vector(1, 2, 3))",
        "send rotation axis of {_quaternion} # 1, 2, 3",
        "send rotation angle of {_quaternion} # 45",
        "set rotation angle of {_quaternion} to 135",
        "set rotation axis of {_quaternion} to vector(0, 1, 0)"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTextOf",
      "name": "Text Of",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the <a href='classes.html#string'>text/string</a> of <a href='classes.html#display'>displays</a>.",
        "Note that currently you can only use Skript chat codes when running Paper."
      ],
      "patterns": [
        "[the] text[s] of %displays%",
        "%displays%'[s] text[s]"
      ],
      "examples": [
        "set text of the last spawned text display to \"example\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLoveTime",
      "name": "Love Time",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The amount of time the animals have been in love for. Using a value of 30 seconds is equivalent to using an item to breed them.",
        "Only works on animals that can be bred and returns '0 seconds' for animals that can't be bred."
      ],
      "patterns": [
        "[the] love[d] time of %living entities%",
        "%living entities%'[s] love[d] time"
      ],
      "examples": [
        "on right click:",
        "\tsend \"%event-entity% has been in love for %love time of event-entity% more than you!\" to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDisplayBillboard",
      "name": "Display Billboard",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the <a href='classes.html#billboard'>billboard</a> setting of <a href='classes.html#display'>displays</a>.",
        "This describes the axes/points around which the display can pivot.",
        "Displays spawn with the 'fixed' billboard by default. Resetting this expression will also set it to 'fixed'."
      ],
      "patterns": [
        "[the] bill[ |-]board[ing] [setting] [of %displays%]",
        "%displays%'[s] bill[ |-]board[ing] [setting]"
      ],
      "examples": [
        "set billboard of the last spawned text display to center"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDisplayBrightness",
      "name": "Display Brightness",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the brightness override of <a href='classes.html#display'>displays</a>.",
        "Unmodified displays will not have a brightness override value set. Resetting or deleting this value will remove the override.",
        "Use the 'block' or 'sky' options to get/change specific values or get both values as a list by using neither option.",
        "NOTE: setting only one of the sky/block light overrides of a display without an existing override will set both sky and block light to the given value. Make sure to set both block and sky levels to your desired values for the best results. Likewise, you can only clear the brightness override, you cannot clear/reset the sky/block values individually."
      ],
      "patterns": [
        "[the] [block|sky] (light [level]|brightness) override[s] of %displays%",
        "%displays%'[s] [block|sky] (light [level]|brightness) override[s]"
      ],
      "examples": [
        "set sky light override of the last spawned text display to 7",
        "subtract 3 from the block light level override of the last spawned text display",
        "if sky light level override of {_display} is 5:",
        "\tclear brightness override of {_display}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDisplayGlowOverride",
      "name": "Display Glow Color Override",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the glowing color override of <a href='classes.html#display'>displays</a>.",
        "This overrides whatever color is already set for the scoreboard team of the displays."
      ],
      "patterns": [
        "[the] glow[ing] colo[u]r[s] override[s] [of %displays%]",
        "%displays%'[s] glow[ing] colo[u]r[s] override[s]"
      ],
      "examples": [
        "set glow color override of the last spawned text display to blue"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDisplayHeightWidth",
      "name": "Display Height/Width",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the height or width of <a href='classes.html#display'>displays</a>.",
        "The rendering culling bounding box spans horizontally width/2 from entity position, which determines the point at which the display will be frustum culled (no longer rendered because the game determines you are no longer able to see it).",
        "If set to 0, no culling will occur on both the vertical and horizontal directions. Default is 0.0."
      ],
      "patterns": [
        "[the] display (height|width) [of %displays%]",
        "%displays%'[s] display (height|width)"
      ],
      "examples": [
        "set display height of the last spawned text display to 2.5"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDisplayInterpolation",
      "name": "Display Interpolation Delay/Duration",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the interpolation delay/duration of <a href='classes.html#display'>displays</a>.",
        "Interpolation duration is the amount of time a display will take to interpolate, or shift, between its current state and a new state.",
        "Interpolation delay is the amount of ticks before client-side interpolation will commence.Setting to 0 seconds will make it immediate.",
        "Resetting either value will return that value to 0."
      ],
      "patterns": [
        "[the] interpolation (delay|duration)[s] [of %displays%]",
        "%displays%'[s] interpolation (delay|duration)[s]"
      ],
      "examples": [
        "set interpolation delay of the last spawned text display to 2 ticks"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDisplayShadow",
      "name": "Display Shadow Radius/Strength",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the shadow radius/strength of <a href='classes.html#display'>displays</a>."
      ],
      "patterns": [
        "[the] shadow (radius|strength) [of %displays%]",
        "%displays%'[s] shadow (radius|strength)"
      ],
      "examples": [
        "set shadow radius of the last spawned text display to 1.75"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDisplayTeleportDuration",
      "name": "Display Teleport Duration",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The teleport duration of displays is the amount of time it takes to get between locations.",
        "0 means that updates are applied immediately.",
        "1 means that the display entity will move from current position to the updated one over one tick.",
        "Higher values spread the movement over multiple ticks. Max of 59 ticks."
      ],
      "patterns": [
        "[the] teleport[ation] duration[s] [of %displays%]",
        "%displays%'[s] teleport[ation] duration[s]"
      ],
      "examples": [
        "set teleport duration of the last spawned text display to 2 ticks",
        "teleport last spawned text display to {_location}",
        "wait 2 ticks",
        "message \"display entity has arrived at %{_location}%\""
      ],
      "events": null,
      "requirements": [
        "Spigot 1.20.4+"
      ],
      "keywords": null
    },
    {
      "id": "ExprDisplayTransformationRotation",
      "name": "Display Transformation Rotation",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the transformation rotation of <a href='classes.html#display'>displays</a>.",
        "The left rotation is applied first, with the right rotation then being applied based on the rotated axis."
      ],
      "patterns": [
        "[the] (left|right) [transformation] rotation [of %displays%]",
        "%displays%'[s] (left|right) [transformation] rotation"
      ],
      "examples": [
        "set left transformation rotation of last spawned block display to quaternion(1, 0, 0, 0) # reset block display"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDisplayTransformationScaleTranslation",
      "name": "Display Transformation Scale/Translation",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the transformation scale or translation of <a href='classes.html#display'>displays</a>."
      ],
      "patterns": [
        "[the] (display|[display] transformation) (scale|translation) of %displays%",
        "%displays%'[s] (display|[display] transformation) (scale|translation)"
      ],
      "examples": [
        "set transformation translation of display to vector from -0.5, -0.5, -0.5 # Center the display in the same position as a block"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprDisplayViewRange",
      "name": "Display View Range",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the view range of <a href='classes.html#display'>displays</a>.",
        "Default value is 1.0. This value is then multiplied by 64 and the player's entity view distance setting to determine the actual range.",
        "For example, a player with 150% entity view distance will see a block display with a view range of 1.2 at 1.2 * 64 * 150% = 115.2 blocks away."
      ],
      "patterns": [
        "[the] [display] view (range|radius) [of %displays%]",
        "%displays%'[s] [display] view (range|radius)"
      ],
      "examples": [
        "set view range of the last spawned text display to 2.9"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprItemDisplayTransform",
      "name": "Item Display Transform",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the <a href='classes.html#itemdisplaytransform'>item display transform</a> of <a href='classes.html#display'>item displays</a>."
      ],
      "patterns": [
        "[the] item [display] transform [of %displays%]",
        "%displays%'[s] item [display] transform"
      ],
      "examples": [
        "set the item transform of the last spawned item display to first person left handed",
        "set the item transform of the last spawned item display to no transform # Reset to default"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTextDisplayAlignment",
      "name": "Text Display Alignment",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the <a href='classes.html#textalignment'>alignment</a> setting of <a href='classes.html#display'>text displays</a>."
      ],
      "patterns": [
        "[the] text alignment[s] [of %displays%]",
        "%displays%'[s] text alignment[s]"
      ],
      "examples": [
        "set text alignment of the last spawned text display to left aligned"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTextDisplayLineWidth",
      "name": "Text Display Line Width",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the line width of <a href='classes.html#display'>text displays</a>. Default is 200."
      ],
      "patterns": [
        "[the] line width [of %displays%]",
        "%displays%'[s] line width"
      ],
      "examples": [
        "set the line width of the last spawned text display to 300"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTextDisplayOpacity",
      "name": "Text Display Opacity",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns or changes the opacity of <a href='classes.html#display'>text displays</a>.",
        "Values are between -127 and 127. The value of 127 represents it being completely opaque."
      ],
      "patterns": [
        "[the] [display] opacity [of %displays%]",
        "%displays%'[s] [display] opacity"
      ],
      "examples": [
        "set the opacity of the last spawned text display to -1 # Reset"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprCurrentInputKeys",
      "name": "Player Input Keys",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Get the current input keys of a player."
      ],
      "patterns": [
        "[the] [current] (inputs|input keys) of %players%",
        "%players%'[s] [current] (inputs|input keys)"
      ],
      "examples": [
        "broadcast \"%player% is pressing %current input keys of player%\""
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.21.2+"
      ],
      "keywords": null
    },
    {
      "id": "ExprTagContents",
      "name": "Tags Contents",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns all the values that a tag contains.",
        "For item and block tags, this will return items. For entity tags, it will return entity datas (a creeper, a zombie)."
      ],
      "patterns": [
        "[the] tag (contents|values) of %minecraft tag%",
        "%minecraft tag%'[s] tag (contents|values)"
      ],
      "examples": [
        "broadcast tag values of minecraft tag \"dirt\"",
        "broadcast (first element of player's tool's block tags)'s tag contents"
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "blocks",
        "minecraft tag",
        "type",
        "category"
      ]
    },
    {
      "id": "ExprTagKey",
      "name": "Tag Namespaced Key",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The namespaced key of a minecraft tag. This takes the form of \"namespace:key\", e.g. \"minecraft:dirt\"."
      ],
      "patterns": [
        "[the] [namespace[d]] key[s] of %minecraft tags%",
        "%minecraft tags%'[s] [namespace[d]] key[s]"
      ],
      "examples": [
        "broadcast namespaced keys of the tags of player's tool",
        "if the key of {_my-tag} is \"minecraft:stone\":",
        "\treturn true"
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "minecraft tag",
        "type",
        "key",
        "namespace"
      ]
    },
    {
      "id": "ExprTagsOf",
      "name": "Tags of X",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns all the tags of an item, block, or entity.",
        "`minecraft tag` will return only the vanilla tags, `datapack tag` will return only datapack-provided tags, `paper tag` will return only Paper's custom tags (if you are running Paper), and `custom tag` will look in the \"skript\" namespace for custom tags you've registered.",
        "You can also filter by tag types using \"item\", \"block\", or \"entity\"."
      ],
      "patterns": [
        "[all [[of] the]|the] [minecraft|datapack|paper|(custom|skript)] [item|block|entity [type]] tags of %item type/entity/entity type%",
        "%item type/entity/entity type%'[s] [minecraft|datapack|paper|(custom|skript)] [item|block|entity [type]] tags"
      ],
      "examples": [
        "broadcast minecraft tags of dirt",
        "send true if paper item tags of target block contains paper tag \"doors\"",
        "broadcast the block tags of player's tool"
      ],
      "events": null,
      "requirements": [
        "Paper (paper tags)"
      ],
      "keywords": [
        "blocks",
        "minecraft tag",
        "type",
        "category"
      ]
    },
    {
      "id": "ExprFurnaceEventItems",
      "name": "Furnace Event Items",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Represents the different items in furnace events.",
        "Only 'smelting item' can be changed."
      ],
      "patterns": [
        "[the] (smelted item|result[ item])",
        "[the] extracted item[s]",
        "[the] smelting item",
        "[the] burned (fuel|item)"
      ],
      "examples": [
        "on furnace smelt:",
        "\tbroadcast smelted item",
        "\t# Or 'result'",
        "on furnace extract:",
        "\tbroadcast extracted item",
        "on fuel burn:",
        "\tbroadcast burned fuel",
        "on smelting start:",
        "\tbroadcast smelting item",
        "\tclear smelting item"
      ],
      "events": [
        "smelt",
        "fuel burn",
        "smelting start",
        "furnace extract"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFurnaceSlot",
      "name": "Furnace Slot",
      "since": [
        "1.0, 2.8.0 (syntax rework)"
      ],
      "deprecated": false,
      "description": [
        "A slot of a furnace, i.e. either the ore, fuel or result slot."
      ],
      "patterns": [
        "[the] (ore|input) slot[s] [of %blocks%]",
        "%blocks%'[s] (ore|input) slot[s]",
        "[the] fuel slot[s] [of %blocks%]",
        "%blocks%'[s] fuel slot[s]",
        "[the] (result|output) slot[s] [of %blocks%]",
        "%blocks%'[s] (result|output) slot[s]"
      ],
      "examples": [
        "set the fuel slot of the clicked block to a lava bucket",
        "set the block's ore slot to 64 iron ore",
        "clear the result slot of the block",
        "on smelt:",
        "\tif the fuel slot is charcoal:",
        "\t\tadd 5 seconds to the burn time"
      ],
      "events": [
        "smelt",
        "fuel burn"
      ],
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprFurnaceTime",
      "name": "Furnace Times",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "The cook time, total cook time, and burn time of a furnace. Can be changed.",
        "<ul>",
        "<li>cook time: The amount of time an item has been smelting for.</li>",
        "<li>total cook time: The amount of time required to finish smelting an item.</li>",
        "<li>burn time: The amount of time left for the current fuel until consumption of another fuel item.</li>",
        "</ul>"
      ],
      "patterns": [
        "[the] [furnace] cook[ing] time [of %blocks%]",
        "%blocks%'[s]cook[ing] time",
        "[the] [furnace] total cook[ing] time [of %blocks%]",
        "%blocks%'[s]total cook[ing] time",
        "[the] [furnace] fuel burn[ing] time [of %blocks%]",
        "%blocks%'[s]fuel burn[ing] time"
      ],
      "examples": [
        "set the cooking time of {_block} to 10",
        "set the total cooking time of {_block} to 50",
        "set the fuel burning time of {_block} to 100",
        "on smelt:",
        "\tif the fuel slot is charcoal:",
        "\t\tadd 5 seconds to the fuel burn time"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLootContextEntity",
      "name": "Looted Entity of Loot Context",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the looted entity of a loot context."
      ],
      "patterns": [
        "[the] looted entity [of %loot contexts%]",
        "%loot contexts%'[s] looted entity"
      ],
      "examples": [
        "set {_entity} to looted entity of {_context}",
        "",
        "set {_context} to a loot context at player:",
        "\tset loot luck value to 10",
        "\tset looter to player",
        "\tset looted entity to last spawned pig"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLootContextLocation",
      "name": "Loot Location of Loot Context",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the loot location of a loot context."
      ],
      "patterns": [
        "[the] loot[ing] [context] location [of %loot contexts%]",
        "%loot contexts%'[s] loot[ing] [context] location"
      ],
      "examples": [
        "set {_player} to player",
        "set {_context} to a loot context at player:",
        "\tif {_player} is in \"world_nether\":",
        "\t\tset loot location to location of last spawned pig",
        "send loot location of {_context} to player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLootContextLooter",
      "name": "Looter of Loot Context",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the looter of a loot context. Note that setting the looter will read the looter's tool enchantments (e.g. looting) when generating loot."
      ],
      "patterns": [
        "[the] (looter|looting player) [of %loot contexts%]",
        "%loot contexts%'[s] (looter|looting player)"
      ],
      "examples": [
        "set {_killer} to looter of {_context}",
        "",
        "set {_context} to a loot context at player:",
        "\tset loot luck value to 10",
        "\tset looter to player",
        "\tset looted entity to last spawned pig"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLootContextLuck",
      "name": "Luck of Loot Context",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the luck of a loot context as a float. This represents the luck potion effect that an entity can have."
      ],
      "patterns": [
        "[the] loot[ing] [context] luck [value|factor] [of %loot contexts%]",
        "%loot contexts%'[s] loot[ing] [context] luck [value|factor]"
      ],
      "examples": [
        "set {_luck} to loot luck value of {_context}",
        "",
        "set {_context} to a loot context at player:",
        "\tset loot luck value to 10",
        "\tset looter to player",
        "\tset looted entity to last spawned pig"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLootTable",
      "name": "Loot Table",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the loot table of an entity or block.",
        "Setting the loot table of a block will update the block state, and once opened will generate loot of the specified loot table. Please note that doing so may cause warnings in the console due to over-filling the chest.",
        "Please note that resetting/deleting the loot table of an ENTITY will reset the entity's loot table to its default."
      ],
      "patterns": [
        "[the] loot[ ]table[s] of %entities/blocks%",
        "%entities/blocks%'[s] loot[ ]table[s]"
      ],
      "examples": [
        "set loot table of event-entity to \"minecraft:entities/ghast\"",
        "# this will set the loot table of the entity to a ghast's loot table, thus dropping ghast tears and gunpowder",
        "",
        "set loot table of event-block to \"minecraft:chests/simple_dungeon\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprLootTableSeed",
      "name": "Seed of Loot Table",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Returns the seed of a loot table. Setting the seed of a block or entity that does not have a loot table will not do anything."
      ],
      "patterns": [
        "[the] loot[[ ]table] seed[s] of %entities/blocks%",
        "%entities/blocks%'[s] loot[[ ]table] seed[s]"
      ],
      "examples": [
        "set {_seed} loot table seed of block",
        "set loot table seed of entity to 123456789"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprBalance",
      "name": "Money",
      "since": [
        "2.0, 2.5 (offline players)"
      ],
      "deprecated": false,
      "description": [
        "How much virtual money a player has (can be changed)."
      ],
      "patterns": [
        "[the] (money|balance|[bank] account) of %offline players%",
        "%offline players%'[s] (money|balance|[bank] account)"
      ],
      "examples": [
        "message \"You have %player's money%\" # the currency name will be added automatically",
        "remove 20$ from the player's balance # replace '$' by whatever currency you use",
        "add 200 to the player's account # or omit the currency altogether"
      ],
      "events": null,
      "requirements": [
        "Vault",
        "an economy plugin that supports Vault"
      ],
      "keywords": null
    },
    {
      "id": "ExprPrefixSuffix",
      "name": "Prefix/Suffix",
      "since": [
        "2.0, 2.10 (delete)"
      ],
      "deprecated": false,
      "description": [
        "The prefix or suffix as defined in the server's chat plugin."
      ],
      "patterns": [
        "[the] [chat] (prefix|suffix) of %players%",
        "%players%'[s] [chat] (prefix|suffix)"
      ],
      "examples": [
        "on chat:",
        "\tcancel event",
        "\tbroadcast \"%player's prefix%%player's display name%%player's suffix%: %message%\" to the player's world",
        "",
        "set the player's prefix to \"[&lt;red&gt;Admin<reset>] \"",
        "",
        "clear player's prefix"
      ],
      "events": null,
      "requirements": [
        "Vault",
        "a chat plugin that supports Vault"
      ],
      "keywords": null
    },
    {
      "id": "ExprGroup",
      "name": "Group",
      "since": [
        "2.2-dev35"
      ],
      "deprecated": false,
      "description": [
        "The primary group or all groups of a player. This expression requires Vault and a compatible permissions plugin to be installed.",
        "If you have LuckPerms, ensure you have vault integration enabled in the luck perms configurations."
      ],
      "patterns": [
        "[the] group[s] of %offline players%",
        "%offline players%'[s] group[s]"
      ],
      "examples": [
        "on join:",
        "\tbroadcast \"%group of player%\" # this is the player's primary group",
        "\tbroadcast \"%groups of player%\" # this is all of the player's groups"
      ],
      "events": null,
      "requirements": [
        "Vault",
        "a permission plugin that supports Vault"
      ],
      "keywords": null
    },
    {
      "id": "ExprMembersOfRegion",
      "name": "Region Members & Owners",
      "since": [
        "2.1"
      ],
      "deprecated": false,
      "description": [
        "A list of members or owners of a <a href='./classes.html#region'>region</a>.",
        "This expression requires a supported regions plugin to be installed."
      ],
      "patterns": [
        "[(all|the)] (members|owner[s]) of [[the] region[s]] %regions%",
        "[[the] region[s]] %regions%'[s] (members|owner[s])"
      ],
      "examples": [
        "on entering of a region:",
        "\tmessage \"You're entering %region% whose owners are %owners of region%\""
      ],
      "events": null,
      "requirements": [
        "Supported regions plugin"
      ],
      "keywords": null
    },
    {
      "id": "ExprRegionsAt",
      "name": "Regions At",
      "since": [
        "2.1"
      ],
      "deprecated": false,
      "description": [
        "All <a href='./classes.html#region'>regions</a> at a particular <a href='./classes/#location'>location</a>.",
        "This expression requires a supported regions plugin to be installed."
      ],
      "patterns": [
        "[the] region[(s)] %direction% %locations%"
      ],
      "examples": [
        "On click on a sign:",
        "\tline 1 of the clicked block is \"[region info]\"",
        "\tset {_regions::*} to regions at the clicked block",
        "\tif {_regions::*} is empty:",
        "\t\tmessage \"No regions exist at this sign.\"",
        "\telse:",
        "\t\tmessage \"Regions containing this sign: &lt;gold&gt;%{_regions::*}%<r>.\""
      ],
      "events": null,
      "requirements": [
        "Supported regions plugin"
      ],
      "keywords": null
    },
    {
      "id": "ExprArithmetic",
      "name": "Arithmetic",
      "since": [
        "1.4.2"
      ],
      "deprecated": false,
      "description": [
        "Arithmetic expressions, e.g. 1 + 2, (health of player - 2) / 3, etc."
      ],
      "patterns": [
        "\\(%object%\\)[ ]+[ ]\\(%object%\\)",
        "\\(%object%\\)[ ]+[ ]%object%",
        "%object%[ ]+[ ]\\(%object%\\)",
        "%object%[ ]+[ ]%object%",
        "\\(%object%\\)[ ]-[ ]\\(%object%\\)",
        "\\(%object%\\)[ ]-[ ]%object%",
        "%object%[ ]-[ ]\\(%object%\\)",
        "%object%[ ]-[ ]%object%",
        "\\(%object%\\)[ ]*[ ]\\(%object%\\)",
        "\\(%object%\\)[ ]*[ ]%object%",
        "%object%[ ]*[ ]\\(%object%\\)",
        "%object%[ ]*[ ]%object%",
        "\\(%object%\\)[ ]/[ ]\\(%object%\\)",
        "\\(%object%\\)[ ]/[ ]%object%",
        "%object%[ ]/[ ]\\(%object%\\)",
        "%object%[ ]/[ ]%object%",
        "\\(%object%\\)[ ]^[ ]\\(%object%\\)",
        "\\(%object%\\)[ ]^[ ]%object%",
        "%object%[ ]^[ ]\\(%object%\\)",
        "%object%[ ]^[ ]%object%"
      ],
      "examples": [
        "set the player's health to 10 - the player's health",
        "loop (argument + 2) / 5 times:",
        "\tmessage \"Two useless numbers: %loop-num * 2 - 5%, %2^loop-num - 1%\"",
        "message \"You have %health of player * 2% half hearts of HP!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprAnyOf",
      "name": "Any Of",
      "since": null,
      "deprecated": false,
      "description": [
        "Returns an 'or list' composed of the given objects. For example, `any of (1, 2, and 3)` is equivalent to `1, 2, or 3`",
        "Useful when doing comparisons with variable lists."
      ],
      "patterns": [
        "(any [one]|one) of [the] %objects%"
      ],
      "examples": [
        "if any of {_numbers::*} are 1:",
        "if any of {teamA::*} are within location(0, 0, 0) and location(10, 10, 10):"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEntities",
      "name": "Entities",
      "since": [
        "1.2.1, 2.5 (chunks), 2.10 (within)"
      ],
      "deprecated": false,
      "description": [
        "All entities in all worlds, in a specific world, in a chunk, in a radius around a certain location or within two locations. e.g. <code>all players</code>, <code>all creepers in the player's world</code>, or <code>players in radius 100 of the player</code>."
      ],
      "patterns": [
        "[(all [[of] the]|the)] %*entity types% [(in|of) ([world[s]] %worlds%|%chunks%)]",
        "[(all [[of] the]|the)] entities of type[s] %entity types% [(in|of) ([world[s]] %worlds%|%chunks%)]",
        "[(all [[of] the]|the)] %*entity types% (within|[with]in radius) %number% [(block[s]|met(er|re)[s])] (of|around) %location%",
        "[(all [[of] the]|the)] entities of type[s] %entity types% in radius %number% (of|around) %location%",
        "[(all [[of] the]|the)] %*entity types% within %location% and %location%",
        "[(all [[of] the]|the)] entities of type[s] %entity types% within %location% and %location%"
      ],
      "examples": [
        "kill all creepers in the player's world",
        "send \"Psst!\" to all players within 100 meters of the player",
        "give a diamond to all ops",
        "heal all tamed wolves in radius 2000 around {town center}",
        "delete all monsters in chunk at player",
        "size of all players within {_corner::1} and {_corner::2}}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprEntity",
      "name": "Creature/Entity/Player/Projectile/Villager/Powered Creeper/etc.",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "The entity involved in an event (an entity is a player, a creature or an inanimate object like ignited TNT, a dropped item or an arrow).",
        "You can use the specific type of the entity that's involved in the event, e.g. in a 'death of a creeper' event you can use 'the creeper' instead of 'the entity'."
      ],
      "patterns": [
        "[the] [event-]<.+>"
      ],
      "examples": [
        "give a diamond sword of sharpness 3 to the player",
        "kill the creeper",
        "kill all powered creepers in the wolf's world",
        "projectile is an arrow"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprSets",
      "name": "Sets",
      "since": [
        "1.0 pre-5, 2.7 (classinfo)"
      ],
      "deprecated": false,
      "description": [
        "Returns a list of all the values of a type. Useful for looping."
      ],
      "patterns": [
        "[all [[of] the]|the|every] %*type%"
      ],
      "examples": [
        "loop all attribute types:",
        "\tset loop-value attribute of player to 10",
        "\tmessage \"Set attribute %loop-value% to 10!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprTransform",
      "name": "Transformed List",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Transforms (or 'maps') a list's values using a given expression. This is akin to looping over the list and getting a modified version of each value.",
        "Indices cannot be retained with this expression. To retain indices, see the transform effect."
      ],
      "patterns": [
        "%objects% (transformed|mapped) (using|with) \\[<.+>\\]",
        "%objects% (transformed|mapped) (using|with) \\(<.+>\\)"
      ],
      "examples": [
        "set {_a::*} to (1, 2, and 3) transformed using (input * 2 - 1, input * 2)",
        "# {_a::*} is now 1, 2, 3, 4, 5, and 6",
        "",
        "# get a list of the sizes of all clans without manually looping",
        "set {_clan-sizes::*} to indices of {clans::*} transformed using [{clans::%input%::size}]"
      ],
      "events": null,
      "requirements": null,
      "keywords": [
        "input"
      ]
    },
    {
      "id": "ExprWhether",
      "name": "Whether",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "A shorthand for returning the result of a condition (true or false). This is functionally identical to using `true if <condition> else false`."
      ],
      "patterns": [
        "whether <.+>"
      ],
      "examples": [
        "set {fly} to whether player can fly",
        "broadcast \"Flying: %whether player is flying%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "ExprXOf",
      "name": "X of Item",
      "since": [
        "1.2"
      ],
      "deprecated": false,
      "description": [
        "An expression to be able to use a certain amount of items where the amount can be any expression. Please note that this expression is not stable and might be replaced in the future."
      ],
      "patterns": [
        "%number% of %item stacks/item types/entity type%"
      ],
      "examples": [
        "give level of player of iron pickaxes to the player"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    }
  ],
  "events": [
    {
      "id": "at_time",
      "name": "At Time",
      "since": "1.3.4",
      "cancellable": false,
      "patterns": [
        "at %time% [in %worlds%]"
      ],
      "description": [
        "An event that occurs at a given <a href='./classes.html#time'>minecraft time</a> in every world or only in specific worlds."
      ],
      "requirements": null,
      "examples": [
        "at 18:00",
        "at 7am in \"world\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "beacon_effect",
      "name": "On Beacon Effect",
      "since": "2.10",
      "cancellable": true,
      "patterns": [
        "[primary|secondary] beacon effect [of %potion effect types%]",
        "application of [primary|secondary] beacon effect [of %potion effect types%]",
        "[primary|secondary] beacon effect apply [of %potion effect types%]"
      ],
      "description": [
        "Called when a player gets an effect from a beacon."
      ],
      "requirements": [
        "Paper"
      ],
      "examples": [
        "on beacon effect:",
        "\tbroadcast applied effect",
        "\tbroadcast event-player",
        "\tbroadcast event-block",
        "on primary beacon effect apply of haste:",
        "on application of secondary beacon effect:",
        "on beacon effect of speed:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "beacon_toggle",
      "name": "On Beacon Toggle",
      "since": "2.10",
      "cancellable": false,
      "patterns": [
        "beacon toggle",
        "beacon activat(e|ion)",
        "beacon deactivat(e|ion)"
      ],
      "description": [
        "Called when a beacon is activated or deactivated."
      ],
      "requirements": [
        "Paper"
      ],
      "examples": [
        "on beacon toggle:",
        "on beacon activate:",
        "on beacon deactivate:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "break_mine",
      "name": "On Break / Mine",
      "since": "1.0 (break), <i>unknown</i> (mine), 2.6 (BlockData support)",
      "cancellable": true,
      "patterns": [
        "[block] (break[ing]|min(e|ing)) [[of] %item types/block datas%]"
      ],
      "description": [
        "Called when a block is broken by a player. If you use 'on mine', only events where the broken block dropped something will call the trigger."
      ],
      "requirements": null,
      "examples": [
        "on mine:",
        "on break of stone:",
        "on break of chest[facing=north]:",
        "on break of potatoes[age=7]:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "block",
          "name": "future block"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "block",
          "name": "past block"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "burn",
      "name": "On Burn",
      "since": "1.0, 2.6 (BlockData support)",
      "cancellable": true,
      "patterns": [
        "[block] burn[ing] [[of] %item types/block datas%]"
      ],
      "description": [
        "Called when a block is destroyed by fire."
      ],
      "requirements": null,
      "examples": [
        "on burn:",
        "on burn of oak wood, oak fences, or chests:",
        "on burn of oak_log[axis=y]:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "place",
      "name": "On Place",
      "since": "1.0, 2.6 (BlockData support)",
      "cancellable": true,
      "patterns": [
        "[block] (plac(e|ing)|build[ing]) [[of] %item types/block datas%]"
      ],
      "description": [
        "Called when a player places a block."
      ],
      "requirements": null,
      "examples": [
        "on place:",
        "on place of a furnace, crafting table or chest:",
        "on break of chest[type=right] or chest[type=left]"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "itemstack",
          "name": "past item stack"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemstack",
          "name": "future item stack"
        },
        {
          "id": "direction",
          "name": "direction"
        },
        {
          "id": "block",
          "name": "past block"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "fade",
      "name": "On Fade",
      "since": "1.0, 2.6 (BlockData support)",
      "cancellable": true,
      "patterns": [
        "[block] fad(e|ing) [[of] %item types/block datas%]"
      ],
      "description": [
        "Called when a block 'fades away', e.g. ice or snow melts."
      ],
      "requirements": null,
      "examples": [
        "on fade of snow or blue ice:",
        "on fade of snow[layers=2]"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "block",
          "name": "future block"
        },
        {
          "id": "block",
          "name": "past block"
        }
      ],
      "keywords": null
    },
    {
      "id": "form",
      "name": "On Form",
      "since": "1.0, 2.6 (BlockData support)",
      "cancellable": true,
      "patterns": [
        "[block] form[ing] [[of] %item types/block datas%]"
      ],
      "description": [
        "Called when a block is created, but not by a player, e.g. snow forms due to snowfall, water freezes in cold biomes. This isn't called when block spreads (mushroom growth, water physics etc.), as it has its own event (see <a href='#spread'>spread event</a>)."
      ],
      "requirements": null,
      "examples": [
        "on form of snow:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "block",
          "name": "past block"
        }
      ],
      "keywords": null
    },
    {
      "id": "block_drop",
      "name": "On Block Drop",
      "since": "2.10",
      "cancellable": true,
      "patterns": [
        "block drop[ping] [[of] %item types/block datas%]"
      ],
      "description": [
        "Called when a block broken by a player drops something.",
        "<ul>",
        "<li>event-player: The player that broke the block</li>",
        "<li>past event-block: The block that was broken</li>",
        "<li>event-block: The block after being broken</li>",
        "<li>event-items (or drops): The drops of the block</li>",
        "<li>event-entities: The entities of the dropped items</li>",
        "</ul>",
        "",
        "If the breaking of the block leads to others being broken, such as torches, they will appearin \"event-items\" and \"event-entities\"."
      ],
      "requirements": null,
      "examples": [
        "on block drop:",
        "\tbroadcast event-player",
        "\tbroadcast past event-block",
        "\tbroadcast event-block",
        "\tbroadcast event-items",
        "\tbroadcast event-entities",
        "on block drop of oak log:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "itemstack",
          "name": "item stacks"
        },
        {
          "id": "entity",
          "name": "entities"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "block",
          "name": "past block"
        }
      ],
      "keywords": null
    },
    {
      "id": "book_edit",
      "name": "On Book Edit",
      "since": "2.2-dev31",
      "cancellable": true,
      "patterns": [
        "book (edit|change|write)"
      ],
      "description": [
        "Called when a player edits a book."
      ],
      "requirements": null,
      "examples": [
        "on book edit:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "string",
          "name": "texts"
        },
        {
          "id": "string",
          "name": "past texts"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemstack",
          "name": "past item stack"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "book_sign",
      "name": "On Book Sign",
      "since": "2.2-dev31",
      "cancellable": true,
      "patterns": [
        "book sign[ing]"
      ],
      "description": [
        "Called when a player signs a book."
      ],
      "requirements": null,
      "examples": [
        "on book sign:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "string",
          "name": "texts"
        },
        {
          "id": "string",
          "name": "past texts"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemstack",
          "name": "past item stack"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "click",
      "name": "On Click",
      "since": "1.0, 2.10 (blockdata)",
      "cancellable": true,
      "patterns": [
        "[(right|left)[( |-)]][mouse[( |-)]]click[ing] [on %entity type/item type/block data%] [(with|using|holding) %item type%]",
        "[(right|left)[( |-)]][mouse[( |-)]]click[ing] (with|using|holding) %item type% on %entity type/item type/block data%"
      ],
      "description": [
        "Called when a user clicks on a block, an entity or air with or without an item in their hand.",
        "Please note that rightclick events with an empty hand while not looking at a block are not sent to the server, so there's no way to detect them.",
        "Also note that a leftclick on an entity is an attack and thus not covered by the 'click' event, but the 'damage' event."
      ],
      "requirements": null,
      "examples": [
        "on click:",
        "on rightclick holding a fishing rod:",
        "on leftclick on a stone or obsidian:",
        "on rightclick on a creeper:",
        "on click with a sword:",
        "on click on chest[facing=north]:",
        "on click on campfire[lit=true]:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "direction",
          "name": "direction"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "command",
      "name": "On Command",
      "since": "2.0",
      "cancellable": true,
      "patterns": [
        "command [%texts%]"
      ],
      "description": [
        "Called when a player enters a command (not necessarily a Skript command) but you can check if command is a skript command, see <a href='conditions.html#CondIsSkriptCommand'>Is a Skript command condition</a>."
      ],
      "requirements": null,
      "examples": [
        "on command:",
        "on command \"/stop\":",
        "on command \"pm Njol \":"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "damage",
      "name": "On Damage",
      "since": "1.0, 2.7 (by entity)",
      "cancellable": true,
      "patterns": [
        "damag(e|ing) [of %entity type%] [by %entity type%]"
      ],
      "description": [
        "Called when an entity receives damage, e.g. by an attack from another entity, lava, fire, drowning, fall, suffocation, etc."
      ],
      "requirements": null,
      "examples": [
        "on damage:",
        "on damage of a player:",
        "on damage of player by zombie:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "damagecause",
          "name": "damage cause"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "death",
      "name": "On Death",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "death [of %entity types%]"
      ],
      "description": [
        "Called when a living entity (including players) dies."
      ],
      "requirements": null,
      "examples": [
        "on death:",
        "on death of player:",
        "on death of a wither or ender dragon:",
        "\tbroadcast \"A %entity% has been slain in %world%!\""
      ],
      "eventValues": [
        {
          "id": "damagecause",
          "name": "damage cause"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "itemstack",
          "name": "item stacks"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "projectile",
          "name": "projectile"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "spawn",
      "name": "On Spawn",
      "since": "1.0, 2.5.1 (non-living entities)",
      "cancellable": true,
      "patterns": [
        "spawn[ing] [of %entity types%]"
      ],
      "description": [
        "Called when an entity spawns (excluding players)."
      ],
      "requirements": null,
      "examples": [
        "on spawn of a zombie:",
        "on spawn of an ender dragon:",
        "\tbroadcast \"A dragon has been sighted in %world%!\""
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "endermansheepsilverfishfalling_block",
      "name": "On Enderman/Sheep/Silverfish/Falling Block",
      "since": "<i>unknown</i>, 2.5.2 (falling block), 2.8.0 (any entity support)",
      "cancellable": true,
      "patterns": [
        "enderman place",
        "enderman pickup",
        "sheep eat",
        "silverfish enter",
        "silverfish exit",
        "falling block fall[ing]",
        "falling block land[ing]",
        "(entity|%*-entitydatas%) chang(e|ing) block[s]"
      ],
      "description": [
        "Called when an enderman places or picks up a block, a sheep eats grass, a silverfish boops into/out of a block or a falling block lands and turns into a block respectively.",
        "event-block represents the old block and event-blockdata represents the new replacement that'll be applied to the block."
      ],
      "requirements": null,
      "examples": [
        "on sheep eat:",
        "\tkill event-entity",
        "\tbroadcast \"A sheep stole some grass!\"",
        "",
        "on falling block land:",
        "\tevent-entity is a falling dirt",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "blockdata",
          "name": "future block data"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "blockdata",
          "name": "block data"
        },
        {
          "id": "block",
          "name": "past block"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "entity_potion_effect",
      "name": "On Entity Potion Effect",
      "since": "2.10",
      "cancellable": true,
      "patterns": [
        "entity potion effect [modif[y|ication]] [[of] %potion effect types%] [due to %entity potion cause%]"
      ],
      "description": [
        "Called when an entity's potion effect is modified.",
        "This modification can include adding, removing or changing their potion effect."
      ],
      "requirements": null,
      "examples": [
        "on entity potion effect modification:",
        "\t\tbroadcast \"A potion effect was added to %event-entity%!\" ",
        "",
        "on entity potion effect modification of night vision:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitypotioncause",
          "name": "entity potion cause"
        },
        {
          "id": "potioneffect",
          "name": "potion effect"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "potioneffecttype",
          "name": "potion effect type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "potioneffect",
          "name": "past potion effect"
        }
      ],
      "keywords": null
    },
    {
      "id": "entity_shoot_bow",
      "name": "On Entity Shoot Bow",
      "since": "2.11",
      "cancellable": true,
      "patterns": [
        "%entity types% shoot[ing] (bow|projectile)"
      ],
      "description": [
        "Called when an entity shoots a bow.\nevent-entity refers to the shot projectile/entity.\n"
      ],
      "requirements": null,
      "examples": [
        "on player shoot bow:\n\tchance of 30%:\n\t\tdamage event-slot by 10\n\t\tsend \"Your bow has taken increased damage!\" to shooter\n\non stray shooting bow:\n\tset {_e} to event-entity\n\tspawn a cow at {_e}:\n\t\tset velocity of entity to velocity of {_e}\n\tset event-entity to last spawned entity\n"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "slot",
          "name": "slot"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "target",
      "name": "On Target",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "[entity] target",
        "[entity] un[-]target"
      ],
      "description": [
        "Called when a mob starts/stops following/attacking another entity, usually a player."
      ],
      "requirements": null,
      "examples": [
        "on entity target:",
        "\ttarget is a player"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "entity_transform",
      "name": "On Entity Transform",
      "since": "2.8.0",
      "cancellable": true,
      "patterns": [
        "(entit(y|ies)|%*-entitydatas%) transform[ing] [due to %transform reasons%]"
      ],
      "description": [
        "Called when an entity is about to be replaced by another entity.",
        "Examples when it's called include; when a zombie gets cured and a villager spawns, an entity drowns in water like a zombie that turns to a drown, an entity that gets frozen in powder snow, a mooshroom that when sheared, spawns a new cow."
      ],
      "requirements": null,
      "examples": [
        "on a zombie transforming due to curing:",
        "on mooshroom transforming:",
        "on zombie, skeleton or slime transform:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entities"
        },
        {
          "id": "transformreason",
          "name": "transform reason"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": [
        "entity transform"
      ]
    },
    {
      "id": "experience_change",
      "name": "On Experience Change",
      "since": "2.7",
      "cancellable": false,
      "patterns": [
        "[player] (level progress|[e]xp|experience) (change|update|increase|decrease)"
      ],
      "description": [
        "Called when a player's experience changes."
      ],
      "requirements": null,
      "examples": [
        "on level progress change:",
        "\tset {_xp} to event-experience",
        "\tbroadcast \"%{_xp}%\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "experience",
          "name": "experience point"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "experience_spawn",
      "name": "On Experience Spawn",
      "since": "2.0",
      "cancellable": true,
      "patterns": [
        "[e]xp[erience] [orb] spawn",
        "spawn of [a[n]] [e]xp[erience] [orb]"
      ],
      "description": [
        "Called whenever experience is about to spawn.",
        "Please note that this event will not fire for xp orbs spawned by plugins (including Skript) with Bukkit."
      ],
      "requirements": null,
      "examples": [
        "on xp spawn:",
        "\tworld is \"minigame_world\"",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "experience",
          "name": "experience point"
        }
      ],
      "keywords": null
    },
    {
      "id": "firework_explode",
      "name": "On Firework Explode",
      "since": "2.4",
      "cancellable": true,
      "patterns": [
        "[a] firework explo(d(e|ing)|sion) [colo[u]red %colors%]"
      ],
      "description": [
        "Called when a firework explodes."
      ],
      "requirements": null,
      "examples": [
        "on firework explode:",
        "\tif event-colors contains red:",
        "on firework exploding colored red, light green and black:",
        "on firework explosion colored rgb 0, 255, 0:",
        "\tbroadcast \"A firework colored %colors% was exploded at %location%!\""
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "fireworkeffect",
          "name": "firework effect"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "color",
          "name": "colors"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "first_join",
      "name": "On First Join",
      "since": "1.3.7",
      "cancellable": false,
      "patterns": [
        "first (join|login)"
      ],
      "description": [
        "Called when a player joins the server for the first time."
      ],
      "requirements": null,
      "examples": [
        "on first join:",
        "\tbroadcast \"Welcome %player% to the server!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "gamemode_change",
      "name": "On Gamemode Change",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "game[ ]mode change [to %gamemode%]"
      ],
      "description": [
        "Called when a player's <a href='./classes.html#gamemode'>gamemode</a> changes."
      ],
      "requirements": null,
      "examples": [
        "on gamemode change:",
        "on gamemode change to adventure:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "grow",
      "name": "On Grow",
      "since": "1.0, 2.2-dev20 (plants), 2.8.0 (from, into, blockdata)",
      "cancellable": true,
      "patterns": [
        "grow[th] [of (%tree types%|%item types/block datas%)]",
        "grow[th] from %item types/block datas%",
        "grow[th] [in]to (%tree types%|%item types/block datas%)",
        "grow[th] from %item types/block datas% [in]to (%tree types%|%item types/block datas%)"
      ],
      "description": [
        "Called when a tree, giant mushroom or plant grows to next stage.",
        "\"of\" matches any grow event, \"from\" matches only the old state, \"into\" matches only the new state,and \"from into\" requires matching both the old and new states.",
        "Using \"and\" lists in this event is equivalent to using \"or\" lists. The event will trigger if any one of the elements is what grew."
      ],
      "requirements": null,
      "examples": [
        "on grow:",
        "on grow of tree:",
        "on grow of wheat[age=7]:",
        "on grow from a sapling:",
        "on grow into tree:",
        "on grow from a sapling into tree:",
        "on grow of wheat, carrots, or potatoes:",
        "on grow into tree, giant mushroom, cactus:",
        "on grow from wheat[age=0] to wheat[age=1] or wheat[age=2]:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "block",
          "name": "future block"
        },
        {
          "id": "block",
          "name": "blocks"
        },
        {
          "id": "block",
          "name": "future blocks"
        },
        {
          "id": "block",
          "name": "past block"
        }
      ],
      "keywords": null
    },
    {
      "id": "heal",
      "name": "On Heal",
      "since": "1.0, 2.9.0 (by reason)",
      "cancellable": true,
      "patterns": [
        "heal[ing] [of %entity types%] [(from|due to|by) %heal reasons%]",
        "%entity types% heal[ing] [(from|due to|by) %heal reasons%]"
      ],
      "description": [
        "Called when an entity is healed, e.g. by eating (players), being fed (pets), or by the effect of a potion of healing (overworld mobs) or harm (nether mobs)."
      ],
      "requirements": null,
      "examples": [
        "on heal:",
        "on player healing from a regeneration potion:",
        "on healing of a zombie, cow or a wither:",
        "\theal reason is healing potion",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "healreason",
          "name": "heal reason"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "dispense",
      "name": "On Dispense",
      "since": "<i>unknown</i> (before 2.1)",
      "cancellable": true,
      "patterns": [
        "dispens(e|ing) [[of] %item types%]"
      ],
      "description": [
        "Called when a dispenser dispenses an item."
      ],
      "requirements": null,
      "examples": [
        "on dispense of iron block:",
        "\tsend \"that'd be 19.99 please!\""
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "item_spawn",
      "name": "On Item Spawn",
      "since": "<i>unknown</i> (before 2.1)",
      "cancellable": true,
      "patterns": [
        "item spawn[ing] [[of] %item types%]"
      ],
      "description": [
        "Called whenever an item stack is spawned in a world, e.g. as drop of a block or mob, a player throwing items out of their inventory, or a dispenser dispensing an item (not shooting it)."
      ],
      "requirements": null,
      "examples": [
        "on item spawn of iron sword:",
        "\tbroadcast \"Someone dropped an iron sword!\""
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "drop",
      "name": "On Drop",
      "since": "<i>unknown</i> (before 2.1), 2.7 (entity)",
      "cancellable": true,
      "patterns": [
        "[player|entity] drop[ping] [[of] %item types%]"
      ],
      "description": [
        "Called when a player drops an item from their inventory, or an entity drops an item, such as a chicken laying an egg."
      ],
      "requirements": null,
      "examples": [
        "on drop:",
        "\tif event-item is compass:",
        "\t\tcancel event",
        "",
        "on entity drop of an egg:",
        "\tif event-entity is a chicken:",
        "\t\tset item of event-dropped item to a diamond"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "itementity",
          "name": "dropped item"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "prepare_craft",
      "name": "On Prepare Craft",
      "since": "2.2-Fixes-V10",
      "cancellable": false,
      "patterns": [
        "[player] (preparing|beginning) craft[ing] [[of] %item types%]"
      ],
      "description": [
        "Called just before displaying crafting result to player. Note that setting the result item might or might not work due to Bukkit bugs."
      ],
      "requirements": null,
      "examples": [
        "on preparing craft of torch:"
      ],
      "eventValues": [
        {
          "id": "slot",
          "name": "slot"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "string",
          "name": "text"
        },
        {
          "id": "inventory",
          "name": "inventory"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "craft",
      "name": "On Craft",
      "since": "<i>unknown</i> (before 2.1)",
      "cancellable": true,
      "patterns": [
        "[player] craft[ing] [[of] %item types%]"
      ],
      "description": [
        "Called when a player crafts an item."
      ],
      "requirements": null,
      "examples": [
        "on craft:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "slot",
          "name": "slot"
        },
        {
          "id": "inventoryaction",
          "name": "inventory action"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "string",
          "name": "text"
        },
        {
          "id": "clicktype",
          "name": "click type"
        },
        {
          "id": "inventory",
          "name": "inventory"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "pick_up",
      "name": "On Pick Up",
      "since": "<i>unknown</i> (before 2.1), 2.5 (entity)",
      "cancellable": true,
      "patterns": [
        "[(player|entity)] (pick[ ]up|picking up) [[of] %item types%]"
      ],
      "description": [
        "Called when a player/entity picks up an item. Please note that the item is still on the ground when this event is called."
      ],
      "requirements": null,
      "examples": [
        "on pick up:",
        "on entity pickup of wheat:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "itementity",
          "name": "dropped item"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemtype",
          "name": "item type"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": [
        "pickup"
      ]
    },
    {
      "id": "consume",
      "name": "On Consume",
      "since": "2.0",
      "cancellable": true,
      "patterns": [
        "[player] ((eat|drink)[ing]|consum(e|ing)) [[of] %item types%]"
      ],
      "description": [
        "Called when a player is done eating/drinking something, e.g. an apple, bread, meat, milk or a potion."
      ],
      "requirements": null,
      "examples": [
        "on consume:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "inventory_click",
      "name": "On Inventory Click",
      "since": "2.2-Fixes-V10",
      "cancellable": true,
      "patterns": [
        "[player] inventory(-| )click[ing] [[at] %item types%]"
      ],
      "description": [
        "Called when clicking on inventory slot."
      ],
      "requirements": null,
      "examples": [
        "on inventory click:",
        "\tif event-item is stone:",
        "\t\tgive player 1 stone",
        "\t\tremove 20$ from player's balance"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "slot",
          "name": "slot"
        },
        {
          "id": "inventoryaction",
          "name": "inventory action"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "clicktype",
          "name": "click type"
        },
        {
          "id": "inventory",
          "name": "inventory"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "item_despawn",
      "name": "On Item Despawn",
      "since": "2.2-dev35",
      "cancellable": true,
      "patterns": [
        "(item[ ][stack]|[item] %item types%) despawn[ing]",
        "[item[ ][stack]] despawn[ing] [[of] %item types%]"
      ],
      "description": [
        "Called when an item is about to be despawned from the world, usually 5 minutes after it was dropped."
      ],
      "requirements": null,
      "examples": [
        "on item despawn of diamond:",
        "\tsend \"Not my precious!\"",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "itementity",
          "name": "dropped item"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "item_merge",
      "name": "On Item Merge",
      "since": "2.2-dev35",
      "cancellable": true,
      "patterns": [
        "(item[ ][stack]|[item] %item types%) merg(e|ing)",
        "item[ ][stack] merg(e|ing) [[of] %item types%]"
      ],
      "description": [
        "Called when dropped items merge into a single stack. event-entity will be the entity which is trying to merge, and future event-entity will be the entity which is being merged into."
      ],
      "requirements": null,
      "examples": [
        "on item merge of gold blocks:",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "itementity",
          "name": "future dropped item"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "itementity",
          "name": "dropped item"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "inventory_item_move",
      "name": "On Inventory Item Move",
      "since": "2.8.0",
      "cancellable": true,
      "patterns": [
        "inventory item (move|transport)",
        "inventory (mov(e|ing)|transport[ing]) [an] item"
      ],
      "description": [
        "Called when an entity or block (e.g. hopper) tries to move items directly from one inventory to another.",
        "When this event is called, the initiator may have already removed the item from the source inventory and is ready to move it into the destination inventory.",
        "If this event is cancelled, the items will be returned to the source inventory."
      ],
      "requirements": null,
      "examples": [
        "on inventory item move:",
        "\tbroadcast \"%holder of past event-inventory% is transporting %event-item% to %holder of event-inventory%!\""
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "inventory",
          "name": "future inventory"
        },
        {
          "id": "block",
          "name": "future block"
        },
        {
          "id": "inventory",
          "name": "inventory"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "stonecutter_recipe_select",
      "name": "On Stonecutter Recipe Select",
      "since": "2.8.0",
      "cancellable": true,
      "patterns": [
        "stonecutting [[of] %item types%]"
      ],
      "description": [
        "Called when a player selects a recipe in a stonecutter."
      ],
      "requirements": [
        "Paper 1.16+"
      ],
      "examples": [
        "on stonecutting stone slabs",
        "\tcancel the event",
        "",
        "on stonecutting:",
        "\tbroadcast \"%player% is using stonecutter to craft %event-item%!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "leash_unleash",
      "name": "On Leash / Unleash",
      "since": "2.10",
      "cancellable": true,
      "patterns": [
        "[player] [un]leash[ing] [of %entity types%]"
      ],
      "description": [
        "Called when an entity is leashed or unleashed. Cancelling these events will prevent the leashing or unleashing from occurring."
      ],
      "requirements": null,
      "examples": [
        "on player leash of a sheep:",
        "\tsend \"Baaaaa--\" to player",
        "",
        "on player leash:",
        "\tsend \"<%event-entity%> Let me go!\" to player",
        "",
        "on unleash:",
        "\tbroadcast \"<%event-entity%> I'm free\"",
        "",
        "on player unleash:",
        "\tsend \"<%event-entity%> Thanks for freeing me!\" to player"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "unleashreason",
          "name": "unleash reason"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "level_change",
      "name": "On Level Change",
      "since": "1.0, 2.4 (level up/down)",
      "cancellable": false,
      "patterns": [
        "[player] level (change|up|down)"
      ],
      "description": [
        "Called when a player's <a href='expressions.html#ExprLevel'>level</a> changes, e.g. by gathering experience or by enchanting something."
      ],
      "requirements": null,
      "examples": [
        "on level change:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "move_rotate",
      "name": "On Move / Rotate",
      "since": "2.6, 2.8.0 (turn around)",
      "cancellable": true,
      "patterns": [
        "%entity type% (move|walk|step|(turn[ing] around|rotate))",
        "%entity type% (move|walk|step) or (turn[ing] around|rotate)",
        "%entity type% (turn[ing] around|rotate) or (move|walk|step)"
      ],
      "description": [
        "Called when a player or entity moves or rotates their head.",
        "NOTE: Move event will only be called when the entity/player moves position, keyword 'turn around' is for orientation (ie: looking around), and the combined syntax listens for both.",
        "NOTE: These events can be performance heavy as they are called quite often."
      ],
      "requirements": [
        "Paper 1.16.5+ (entity move)"
      ],
      "examples": [
        "on player move:",
        "\tif player does not have permission \"player.can.move\":",
        "\t\tcancel event",
        "on skeleton move:",
        "\tif event-entity is not in world \"world\":",
        "\t\tkill event-entity",
        "on player turning around:",
        "\tsend action bar \"You are currently turning your head around!\" to player"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "location",
          "name": "future location"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "chunk",
          "name": "past chunk"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "location",
          "name": "past location"
        },
        {
          "id": "chunk",
          "name": "chunk"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "pressure_plate_trip",
      "name": "On Pressure Plate / Trip",
      "since": "1.0 (pressure plate), 1.4.4 (tripwire)",
      "cancellable": true,
      "patterns": [
        "[step[ping] on] [a] [pressure] plate",
        "(trip|[step[ping] on] [a] tripwire)"
      ],
      "description": [
        "Called when a <i>player</i> steps on a pressure plate or tripwire respectively."
      ],
      "requirements": null,
      "examples": [
        "on step on pressure plate:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "direction",
          "name": "direction"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "move_on",
      "name": "On Move On",
      "since": "2.0",
      "cancellable": true,
      "patterns": [
        "(step|walk)[ing] (on|over) %*item types%"
      ],
      "description": [
        "Called when a player moves onto a certain type of block.",
        "Please note that using this event can cause lag if there are many players online."
      ],
      "requirements": null,
      "examples": [
        "on walking on dirt or grass:",
        "on stepping on stone:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "chunk",
          "name": "past chunk"
        },
        {
          "id": "location",
          "name": "past location"
        },
        {
          "id": "chunk",
          "name": "chunk"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "periodical",
      "name": "Periodical",
      "since": "1.0",
      "cancellable": false,
      "patterns": [
        "every %time span%"
      ],
      "description": [
        "An event that is called periodically."
      ],
      "requirements": null,
      "examples": [
        "every 2 seconds:",
        "every minecraft hour:",
        "every tick: # can cause lag depending on the code inside the event",
        "every minecraft days:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "eventperiodical",
      "name": "Periodical",
      "since": "1.0",
      "cancellable": false,
      "patterns": [
        "every %time span% in [world[s]] %worlds%"
      ],
      "description": [
        "An event that is called periodically."
      ],
      "requirements": null,
      "examples": [
        "every 2 seconds in \"world\":",
        "every minecraft hour in \"flatworld\":",
        "every tick in \"world\": # can cause lag depending on the code inside the event",
        "every minecraft days in \"plots\":"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "block_growth",
      "name": "On Block Growth",
      "since": "2.2-Fixes-V10",
      "cancellable": true,
      "patterns": [
        "(plant|crop|block) grow[(th|ing)] [[of] %item types%]"
      ],
      "description": [
        "Called when a crop grows. Alternative to new form of generic grow event."
      ],
      "requirements": null,
      "examples": [
        "on crop growth:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "block",
          "name": "past block"
        }
      ],
      "keywords": null
    },
    {
      "id": "armor_change",
      "name": "On Armor Change",
      "since": "2.5, 2.11 (equipment slots)",
      "cancellable": false,
      "patterns": [
        "[player] armo[u]r change[d]",
        "[player] %equipment slot% change[d]"
      ],
      "description": [
        "Called when armor pieces of a player are changed."
      ],
      "requirements": [
        "Paper"
      ],
      "examples": [
        "on armor change:",
        "\tbroadcast the old armor item",
        "on helmet change:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "slot",
          "name": "slot"
        },
        {
          "id": "itemstack",
          "name": "past item stack"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemstack",
          "name": "future item stack"
        },
        {
          "id": "equipmentslot",
          "name": "equipment slot"
        }
      ],
      "keywords": [
        "armor",
        "armour"
      ]
    },
    {
      "id": "player_chunk_enter",
      "name": "On Player Chunk Enter",
      "since": "2.7",
      "cancellable": true,
      "patterns": [
        "[player] (enter[s] [a] chunk|chunk enter[ing])"
      ],
      "description": [
        "Called when a player enters a chunk. Note that this event is based on 'player move' event, and may be called frequent internally."
      ],
      "requirements": null,
      "examples": [
        "on player enters a chunk:",
        "\tsend \"You entered a chunk: %past event-chunk% -> %event-chunk%!\" to player"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "chunk",
          "name": "past chunk"
        },
        {
          "id": "location",
          "name": "past location"
        },
        {
          "id": "chunk",
          "name": "chunk"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "send_command_list",
      "name": "On Send Command List",
      "since": "2.8.0",
      "cancellable": false,
      "patterns": [
        "send[ing] [of [the]] [server] command[s] list",
        "[server] command list send"
      ],
      "description": [
        "Called when the server sends a list of commands to the player. This usually happens on join. The sent commands can be modified via the <a href='expressions.html#ExprSentCommands'>sent commands expression</a>.",
        "Modifications will affect what commands show up for the player to tab complete. They will not affect what commands the player can actually run.",
        "Adding new commands to the list is illegal behavior and will be ignored."
      ],
      "requirements": null,
      "examples": [
        "on send command list:",
        "\tset command list to command list where [input does not contain \":\"]",
        "\tremove \"help\" from command list"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "system_time",
      "name": "On System Time",
      "since": "2.11",
      "cancellable": false,
      "patterns": [
        "at %times% [in] real time"
      ],
      "description": [
        "Called when the local time of the system the server is running on reaches the provided real-life time."
      ],
      "requirements": null,
      "examples": [
        "at 14:20 in real time:",
        "at 2:30am real time:",
        "at 6:10 pm in real time:",
        "at 5:00 am and 5:00 pm in real time:",
        "at 5:00 and 17:00 in real time:"
      ],
      "eventValues": null,
      "keywords": null
    },
    {
      "id": "resource_pack_request_response",
      "name": "On Resource Pack Request Response",
      "since": "2.4",
      "cancellable": false,
      "patterns": [
        "resource pack [request] response",
        "resource pack [request] %resource pack states%"
      ],
      "description": [
        "Called when a player takes action on a resource pack request sent via the ",
        "<a href='effects.html#EffSendResourcePack'>send resource pack</a> effect. ",
        "The <a href='conditions.html#CondResourcePack'>resource pack</a> condition can be used ",
        "to check the resource pack state.",
        "",
        "This event will be triggered once when the player accepts or declines the resource pack request, ",
        "and once when the resource pack is successfully installed or failed to download."
      ],
      "requirements": null,
      "examples": [
        "on resource pack request response:",
        "\tif the resource pack was declined or failed to download:",
        "",
        "on resource pack deny:",
        "\tkick the player due to \"You have to install the resource pack to play in this server!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "script_loadunload",
      "name": "On Script Load/Unload",
      "since": "2.0",
      "cancellable": false,
      "patterns": [
        "[async] [script] (load|init|enable)",
        "[async] [script] (unload|stop|disable)"
      ],
      "description": [
        "Called directly after the trigger is loaded, or directly before the whole script is unloaded.",
        "The keyword 'async' indicates the trigger can be ran asynchronously, "
      ],
      "requirements": null,
      "examples": [
        "on load:",
        "\tset {running::%script%} to true",
        "on unload:",
        "\tset {running::%script%} to false"
      ],
      "eventValues": [
        {
          "id": "commandsender",
          "name": "command sender"
        }
      ],
      "keywords": null
    },
    {
      "id": "server_startstop",
      "name": "On Server Start/Stop",
      "since": "2.0",
      "cancellable": false,
      "patterns": [
        "(server|skript) (start|load|enable)",
        "(server|skript) (stop|unload|disable)"
      ],
      "description": [
        "Called when the server starts or stops (actually, when Skript starts or stops, so a /reload will trigger these events as well)."
      ],
      "requirements": null,
      "examples": [
        "on skript start:",
        "on server stop:"
      ],
      "eventValues": [
        {
          "id": "commandsender",
          "name": "command sender"
        }
      ],
      "keywords": null
    },
    {
      "id": "spectate",
      "name": "On Spectate",
      "since": "2.7",
      "cancellable": true,
      "patterns": [
        "[player] stop spectating [(of|from) %*entity types%]",
        "[player] (swap|switch) spectating [(of|from) %*entity types%]",
        "[player] start spectating [of %*entity types%]"
      ],
      "description": [
        "Called with a player starts, stops or swaps spectating an entity."
      ],
      "requirements": [
        "Paper"
      ],
      "examples": [
        "on player start spectating of a zombie:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "teleport",
      "name": "On Teleport",
      "since": "1.0, 2.9.0 (entity teleport)",
      "cancellable": true,
      "patterns": [
        "[%entity types%] teleport[ing]"
      ],
      "description": [
        "This event can be used to listen to teleports from non-players or player entities respectively.",
        "When teleporting entities, the event may also be called due to a result of natural causes, such as an enderman or shulker teleporting, or wolves teleporting to players.",
        "When teleporting players, the event can be called by teleporting through a nether/end portal, or by other means (e.g. plugins)."
      ],
      "requirements": null,
      "examples": [
        "on teleport:",
        "on player teleport:",
        "on creeper teleport:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "chunk",
          "name": "past chunk"
        },
        {
          "id": "location",
          "name": "past location"
        },
        {
          "id": "teleportcause",
          "name": "teleport cause"
        },
        {
          "id": "chunk",
          "name": "chunk"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "vehicle_collision",
      "name": "On Vehicle Collision",
      "since": "2.10",
      "cancellable": true,
      "patterns": [
        "vehicle collision [(with|of) [a[n]] %item types/block datas/entity types%]",
        "vehicle block collision [(with|of) [a[n]] %item types/block datas%]",
        "vehicle entity collision [(with|of) [a[n]] %entity types%]"
      ],
      "description": [
        "Called when a vehicle collides with a block or entity."
      ],
      "requirements": null,
      "examples": [
        "on vehicle collision:",
        "on vehicle collision with obsidian:",
        "on vehicle collision with a zombie:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "vehicle",
          "name": "vehicle"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "weather_change",
      "name": "On Weather Change",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "weather change [to %weather types%]"
      ],
      "description": [
        "Called when a world's weather changes."
      ],
      "requirements": null,
      "examples": [
        "on weather change:",
        "on weather change to sunny:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "world_save",
      "name": "On World Save",
      "since": "1.0, 2.8.0 (defining worlds)",
      "cancellable": false,
      "patterns": [
        "world sav(e|ing) [of %worlds%]"
      ],
      "description": [
        "Called when a world is saved to disk. Usually all worlds are saved simultaneously, but world management plugins could change this."
      ],
      "requirements": null,
      "examples": [
        "on world save of \"world\":",
        "\tbroadcast \"The world %event-world% has been saved\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "world_init",
      "name": "On World Init",
      "since": "1.0, 2.8.0 (defining worlds)",
      "cancellable": false,
      "patterns": [
        "world init[ialization] [of %worlds%]"
      ],
      "description": [
        "Called when a world is initialized. As all default worlds are initialized before",
        "any scripts are loaded, this event is only called for newly created worlds.",
        "World management plugins might change the behaviour of this event though."
      ],
      "requirements": null,
      "examples": [
        "on world init of \"world_the_end\":"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "world_unload",
      "name": "On World Unload",
      "since": "1.0, 2.8.0 (defining worlds)",
      "cancellable": true,
      "patterns": [
        "world unload[ing] [of %worlds%]"
      ],
      "description": [
        "Called when a world is unloaded. This event will never be called if you don't have a world management plugin."
      ],
      "requirements": null,
      "examples": [
        "on world unload:",
        "\tbroadcast \"the %event-world% has been unloaded!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "world_load",
      "name": "On World Load",
      "since": "1.0, 2.8.0 (defining worlds)",
      "cancellable": false,
      "patterns": [
        "world load[ing] [of %worlds%]"
      ],
      "description": [
        "Called when a world is loaded. As with the world init event, this event will not be called for the server's default world(s)."
      ],
      "requirements": null,
      "examples": [
        "on world load of \"world_nether\":",
        "\tbroadcast \"The world %event-world% has been loaded!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "can_build_check",
      "name": "On Can Build Check",
      "since": "1.0 (basic), 2.0 ([un]cancellable)",
      "cancellable": true,
      "patterns": [
        "[block] can build check"
      ],
      "description": [
        "Called when a player rightclicks on a block while holding a block or a placeable item. You can either cancel the event to prevent the block from being built, or uncancel it to allow it.",
        "Please note that the <a href='expressions.html#ExprDurability'>data value</a> of the block to be placed is not available in this event, only its <a href='expressions.html#ExprIdOf'>ID</a>."
      ],
      "requirements": null,
      "examples": [
        "on block can build check:",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "block",
          "name": "past block"
        }
      ],
      "keywords": null
    },
    {
      "id": "block_damage",
      "name": "On Block Damage",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "block damag(ing|e)"
      ],
      "description": [
        "Called when a player starts to break a block. You can usually just use the leftclick event for this."
      ],
      "requirements": null,
      "examples": [
        "on block damaging:",
        "\tif block is tagged with minecraft tag \"logs\":",
        "\t\tsend \"You can't break the holy log!\""
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "flow",
      "name": "On Flow",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "[block] flow[ing]",
        "block mov(e|ing)"
      ],
      "description": [
        "Called when a blocks flows or teleports to another block. This not only applies to water and lava, but teleporting dragon eggs as well."
      ],
      "requirements": null,
      "examples": [
        "on block flow:",
        "\tif event-block is water:",
        "\t\tbroadcast \"Build more dams! It's starting to get wet in here\""
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "block",
          "name": "future block"
        }
      ],
      "keywords": null
    },
    {
      "id": "ignition",
      "name": "On Ignition",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "[block] ignit(e|ion)"
      ],
      "description": [
        "Called when a block starts burning, i.e. a fire block is placed next to it and this block is flammable.",
        "The <a href='#burn'>burn event</a> will be called when the block is about do be destroyed by the fire."
      ],
      "requirements": null,
      "examples": [
        "on block ignite:",
        "\tif event-block is a ladder:",
        "\t\tcancel event"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "physics",
      "name": "On Physics",
      "since": "1.4.6",
      "cancellable": true,
      "patterns": [
        "[block] physics"
      ],
      "description": [
        "Called when a physics check is done on a block. By cancelling this event you can prevent some things from happening, e.g. sand falling, dirt turning into grass, torches dropping if their supporting block is destroyed, etc.Please note that using this event might cause quite some lag since it gets called extremely often."
      ],
      "requirements": null,
      "examples": [
        "# prevents sand from falling",
        "on block physics:",
        "\tblock is sand",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "piston_extend",
      "name": "On Piston Extend",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "piston extend[ing]"
      ],
      "description": [
        "Called when a piston is about to extend."
      ],
      "requirements": null,
      "examples": [
        "on piston extend:",
        "\tbroadcast \"A piston is extending!\""
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "piston_retract",
      "name": "On Piston Retract",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "piston retract[ing]"
      ],
      "description": [
        "Called when a piston is about to retract."
      ],
      "requirements": null,
      "examples": [
        "on piston retract:",
        "\tbroadcast \"A piston is retracting!\""
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "redstone",
      "name": "On Redstone",
      "since": "1.0",
      "cancellable": false,
      "patterns": [
        "redstone [current] [chang(e|ing)]"
      ],
      "description": [
        "Called when the redstone current of a block changes. This event is of not much use yet."
      ],
      "requirements": null,
      "examples": [
        "on redstone change:",
        "\tsend \"someone is using redstone\" to console"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "spread",
      "name": "On Spread",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "spread[ing]"
      ],
      "description": [
        "Called when a new block <a href='#form'>forms</a> as a result of a block that can spread, e.g. water or mushrooms."
      ],
      "requirements": null,
      "examples": [
        "on spread:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "block",
          "name": "past block"
        }
      ],
      "keywords": null
    },
    {
      "id": "chunk_load",
      "name": "On Chunk Load",
      "since": "1.0",
      "cancellable": false,
      "patterns": [
        "chunk load[ing]"
      ],
      "description": [
        "Called when a chunk loads. The chunk might or might not contain mobs when it's loaded."
      ],
      "requirements": null,
      "examples": [
        "on chunk load:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "chunk",
          "name": "chunk"
        }
      ],
      "keywords": null
    },
    {
      "id": "chunk_generate",
      "name": "On Chunk Generate",
      "since": "1.0",
      "cancellable": false,
      "patterns": [
        "chunk (generat|populat)(e|ing)"
      ],
      "description": [
        "Called after a new chunk was generated."
      ],
      "requirements": null,
      "examples": [
        "on chunk generate:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "chunk",
          "name": "chunk"
        }
      ],
      "keywords": null
    },
    {
      "id": "chunk_unload",
      "name": "On Chunk Unload",
      "since": "1.0",
      "cancellable": false,
      "patterns": [
        "chunk unload[ing]"
      ],
      "description": [
        "Called when a chunk is unloaded due to not being near any player."
      ],
      "requirements": null,
      "examples": [
        "on chunk unload:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "chunk",
          "name": "chunk"
        }
      ],
      "keywords": null
    },
    {
      "id": "creeper_power",
      "name": "On Creeper Power",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "creeper power"
      ],
      "description": [
        "Called when a creeper is struck by lighting and gets powered. Cancel the event to prevent the creeper from being powered."
      ],
      "requirements": null,
      "examples": [
        "on creeper power:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "zombie_break_door",
      "name": "On Zombie Break Door",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "zombie break[ing] [a] [wood[en]] door"
      ],
      "description": [
        "Called when a zombie is done breaking a wooden door. Can be cancelled to prevent the zombie from breaking the door."
      ],
      "requirements": null,
      "examples": [
        "on zombie breaking a wood door:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "blockdata",
          "name": "future block data"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "blockdata",
          "name": "block data"
        },
        {
          "id": "block",
          "name": "past block"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "combust",
      "name": "On Combust",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "combust[ing]"
      ],
      "description": [
        "Called when an entity is set on fire, e.g. by fire or lava, a fireball, or by standing in direct sunlight (zombies, skeletons)."
      ],
      "requirements": null,
      "examples": [
        "on combust:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "explode",
      "name": "On Explode",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "explo(d(e|ing)|sion)"
      ],
      "description": [
        "Called when an entity (a primed TNT or a creeper) explodes."
      ],
      "requirements": null,
      "examples": [
        "on explosion:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "portal_enter",
      "name": "On Portal Enter",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "portal enter[ing]",
        "entering [a] portal"
      ],
      "description": [
        "Called when an entity enters a nether portal or an end portal. Please note that this event will be fired many times for a nether portal."
      ],
      "requirements": null,
      "examples": [
        "on portal enter:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "tame",
      "name": "On Tame",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "[entity] tam(e|ing)"
      ],
      "description": [
        "Called when a player tames a wolf or ocelot. Can be cancelled to prevent the entity from being tamed."
      ],
      "requirements": null,
      "examples": [
        "on tame:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "explosion_prime",
      "name": "On Explosion Prime",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "explosion prime"
      ],
      "description": [
        "Called when an explosive is primed, i.e. an entity will explode shortly. Creepers can abort the explosion if the player gets too far away, while TNT will explode for sure after a short time."
      ],
      "requirements": null,
      "examples": [
        "on explosion prime:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "hunger_meter_change",
      "name": "On Hunger Meter Change",
      "since": "1.4.4",
      "cancellable": true,
      "patterns": [
        "(food|hunger) (level|met(er|re)|bar) chang(e|ing)"
      ],
      "description": [
        "Called when the hunger bar of a player changes, i.e. either increases by eating or decreases over time."
      ],
      "requirements": null,
      "examples": [
        "on food bar change:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "leaves_decay",
      "name": "On Leaves Decay",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "leaves decay[ing]"
      ],
      "description": [
        "Called when a leaf block decays due to not being connected to a tree."
      ],
      "requirements": null,
      "examples": [
        "on leaves decay:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "lightning_strike",
      "name": "On Lightning Strike",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "lightning [strike]"
      ],
      "description": [
        "Called when lightning strikes."
      ],
      "requirements": null,
      "examples": [
        "on lightning:",
        "\tspawn a zombie at location of event-entity"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "pig_zap",
      "name": "On Pig Zap",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "pig[ ]zap"
      ],
      "description": [
        "Called when a pig is stroke by lightning and transformed into a zombie pigman. Cancel the event to prevent the transformation."
      ],
      "requirements": null,
      "examples": [
        "on pig zap:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entities"
        },
        {
          "id": "transformreason",
          "name": "transform reason"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "bed_enter",
      "name": "On Bed Enter",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "bed enter[ing]",
        "[player] enter[ing] [a] bed"
      ],
      "description": [
        "Called when a player starts sleeping."
      ],
      "requirements": null,
      "examples": [
        "on bed enter:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "bed_leave",
      "name": "On Bed Leave",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "bed leav(e|ing)",
        "[player] leav(e|ing) [a] bed"
      ],
      "description": [
        "Called when a player leaves a bed."
      ],
      "requirements": null,
      "examples": [
        "on player leaving a bed:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "bucket_empty",
      "name": "On Bucket Empty",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "bucket empty[ing]",
        "[player] empty[ing] [a] bucket"
      ],
      "description": [
        "Called when a player empties a bucket. You can also use the <a href='#place'>place event</a> with a check for water or lava."
      ],
      "requirements": null,
      "examples": [
        "on bucket empty:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "block",
          "name": "past block"
        }
      ],
      "keywords": null
    },
    {
      "id": "bucket_fill",
      "name": "On Bucket fill",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "bucket fill[ing]",
        "[player] fill[ing] [a] bucket"
      ],
      "description": [
        "Called when a player fills a bucket."
      ],
      "requirements": null,
      "examples": [
        "on player filling a bucket:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "block",
          "name": "future block"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "egg_throw",
      "name": "On Egg Throw",
      "since": "1.0",
      "cancellable": false,
      "patterns": [
        "throw[ing] [of] [an] egg",
        "[player] egg throw"
      ],
      "description": [
        "Called when a player throws an egg and it lands. You can just use the <a href='#shoot'>shoot event</a> in most cases. However, this event allows modification of properties like the hatched entity type and the number of entities to hatch."
      ],
      "requirements": null,
      "examples": [
        "on throw of an egg:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "item_break",
      "name": "On Item Break",
      "since": "2.1.1",
      "cancellable": false,
      "patterns": [
        "[player] tool break[ing]",
        "[player] break[ing] [(a|the)] tool"
      ],
      "description": [
        "Called when a player breaks their tool because its damage reached the maximum value.",
        "This event cannot be cancelled."
      ],
      "requirements": null,
      "examples": [
        "on tool break:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "item_damage",
      "name": "On Item Damage",
      "since": "2.5",
      "cancellable": true,
      "patterns": [
        "item damag(e|ing)"
      ],
      "description": [
        "Called when an item is damaged. Most tools are damaged by using them; armor is damaged when the wearer takes damage."
      ],
      "requirements": null,
      "examples": [
        "on item damage:",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "tool_change",
      "name": "On Tool Change",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "[player['s]] (tool|item held|held item) chang(e|ing)"
      ],
      "description": [
        "Called whenever a player changes their held item by selecting a different slot (e.g. the keys 1-9 or the mouse wheel), <i>not</i> by dropping or replacing the item in the current slot."
      ],
      "requirements": null,
      "examples": [
        "on player's held item change:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "slot",
          "name": "past slot"
        },
        {
          "id": "slot",
          "name": "slot"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "join",
      "name": "On Join",
      "since": "1.0",
      "cancellable": false,
      "patterns": [
        "[player] (login|logging in|join[ing])"
      ],
      "description": [
        "Called when the player joins the server. The player is already in a world when this event is called, so if you want to prevent players from joining you should prefer <a href='#connect'>on connect</a> over this event."
      ],
      "requirements": null,
      "examples": [
        "on join:",
        "\tmessage \"Welcome on our awesome server!\"",
        "\tbroadcast \"%player% just joined the server!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "connect",
      "name": "On Connect",
      "since": "2.0",
      "cancellable": false,
      "patterns": [
        "[player] connect[ing]"
      ],
      "description": [
        "Called when the player connects to the server. This event is called before the player actually joins the server, so if you want to prevent players from joining you should prefer this event over <a href='#join'>on join</a>."
      ],
      "requirements": null,
      "examples": [
        "on connect:",
        "\tplayer doesn't have permission \"VIP\"",
        "\tnumber of players is greater than 15",
        "\tkick the player due to \"The last 5 slots are reserved for VIP players.\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "kick",
      "name": "On Kick",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "[player] (kick|being kicked)"
      ],
      "description": [
        "Called when a player is kicked from the server. You can change the <a href='expressions.html#ExprMessage'>kick message</a> or <a href='effects.html#EffCancelEvent'>cancel the event</a> entirely."
      ],
      "requirements": null,
      "examples": [
        "on kick:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "entity_portal",
      "name": "On Entity Portal",
      "since": "2.5.3",
      "cancellable": true,
      "patterns": [
        "entity portal"
      ],
      "description": [
        "Called when an entity uses a nether or end portal. <a href='effects.html#EffCancelEvent'>Cancel the event</a> to prevent the entity from teleporting."
      ],
      "requirements": null,
      "examples": [
        "on entity portal:",
        "\tbroadcast \"A %type of event-entity% has entered a portal!"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "location",
          "name": "past location"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "portal",
      "name": "On Portal",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "[player] portal"
      ],
      "description": [
        "Called when a player uses a nether or end portal. <a href='effects.html#EffCancelEvent'>Cancel the event</a> to prevent the player from teleporting."
      ],
      "requirements": null,
      "examples": [
        "on player portal:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "chunk",
          "name": "past chunk"
        },
        {
          "id": "location",
          "name": "past location"
        },
        {
          "id": "teleportcause",
          "name": "teleport cause"
        },
        {
          "id": "chunk",
          "name": "chunk"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "quit",
      "name": "On Quit",
      "since": "1.0 (simple disconnection)",
      "cancellable": false,
      "patterns": [
        "(quit[ting]|disconnect[ing]|log[ ]out|logging out|leav(e|ing))"
      ],
      "description": [
        "Called when a player leaves the server."
      ],
      "requirements": null,
      "examples": [
        "on quit:",
        "on disconnect:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "quitreason",
          "name": "quit reason"
        }
      ],
      "keywords": null
    },
    {
      "id": "respawn",
      "name": "On Respawn",
      "since": "1.0",
      "cancellable": false,
      "patterns": [
        "[player] respawn[ing]"
      ],
      "description": [
        "Called when a player respawns. You should prefer this event over the <a href='#death'>death event</a> as the player is technically alive when this event is called."
      ],
      "requirements": null,
      "examples": [
        "on respawn:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "sneak_toggle",
      "name": "On Sneak Toggle",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "[player] toggl(e|ing) sneak",
        "[player] sneak toggl(e|ing)"
      ],
      "description": [
        "Called when a player starts or stops sneaking. Use <a href='conditions.html#CondIsSneaking'>is sneaking</a> to get whether the player was sneaking before the event was called."
      ],
      "requirements": null,
      "examples": [
        "# make players that stop sneaking jump",
        "on sneak toggle:",
        "\tplayer is sneaking",
        "\tpush the player upwards at speed 0.5"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "sprint_toggle",
      "name": "On Sprint Toggle",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "[player] toggl(e|ing) sprint",
        "[player] sprint toggl(e|ing)"
      ],
      "description": [
        "Called when a player starts or stops sprinting. Use <a href='conditions.html#CondIsSprinting'>is sprinting</a> to get whether the player was sprinting before the event was called."
      ],
      "requirements": null,
      "examples": [
        "on sprint toggle:",
        "\tplayer is not sprinting",
        "\tsend \"Run!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "portal_create",
      "name": "On Portal Create",
      "since": "1.0, 2.5.3 (event-entity support)",
      "cancellable": true,
      "patterns": [
        "portal creat(e|ion)"
      ],
      "description": [
        "Called when a portal is created, either by a player or mob lighting an obsidian frame on fire, or by a nether portal creating its teleportation target in the nether/overworld.",
        "In Minecraft 1.14+, you can use <a href='expressions.html#ExprEntity'>the player</a> in this event.",
        "Please note that there may not always be a player (or other entity) in this event."
      ],
      "requirements": [
        "Minecraft 1.14+ (event-entity support)"
      ],
      "examples": [
        "on portal create:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "block",
          "name": "blocks"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "projectile_hit",
      "name": "On Projectile Hit",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "projectile hit"
      ],
      "description": [
        "Called when a projectile hits an entity or a block."
      ],
      "requirements": null,
      "examples": [
        "on projectile hit:",
        "\tif victim's health <= 3:",
        "\t\tdelete event-projectile"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "projectile",
          "name": "projectile"
        },
        {
          "id": "direction",
          "name": "direction"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "projectile_collide",
      "name": "On Projectile Collide",
      "since": "2.5",
      "cancellable": true,
      "patterns": [
        "projectile collide"
      ],
      "description": [
        "Called when a projectile collides with an entity."
      ],
      "requirements": [
        "Paper"
      ],
      "examples": [
        "on projectile collide:",
        "\tteleport shooter of event-projectile to event-entity"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "projectile",
          "name": "projectile"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "shoot",
      "name": "On Shoot",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "[projectile] shoot"
      ],
      "description": [
        "Called whenever a <a href='classes.html#projectile'>projectile</a> is shot. Use the <a href='expressions.html#ExprShooter'>shooter expression</a> to get who shot the projectile."
      ],
      "requirements": null,
      "examples": [
        "on shoot:",
        "\tif projectile is an arrow:",
        "\t\tsend \"you shot an arrow!\" to shooter"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "projectile",
          "name": "projectile"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "sign_change",
      "name": "On Sign Change",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "sign (chang[e]|edit)[ing]",
        "[player] (chang[e]|edit)[ing] [a] sign"
      ],
      "description": [
        "As signs are placed empty, this event is called when a player is done editing a sign."
      ],
      "requirements": null,
      "examples": [
        "on sign change:",
        "\tline 2 is empty",
        "\tset line 1 to \"&lt;red&gt;%line 1%\""
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "string",
          "name": "texts"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "spawn_change",
      "name": "On Spawn Change",
      "since": "1.0",
      "cancellable": false,
      "patterns": [
        "[world] spawn change"
      ],
      "description": [
        "Called when the spawn point of a world changes."
      ],
      "requirements": null,
      "examples": [
        "on spawn change:",
        "\tbroadcast \"someone changed the spawn!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "vehicle_create",
      "name": "On Vehicle Create",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "vehicle create",
        "creat(e|ing|ion of) [a] vehicle"
      ],
      "description": [
        "Called when a new vehicle is created, e.g. when a player places a boat or minecart."
      ],
      "requirements": null,
      "examples": [
        "on vehicle create:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "vehicle",
          "name": "vehicle"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "vehicle_damage",
      "name": "On Vehicle Damage",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "vehicle damage",
        "damag(e|ing) [a] vehicle"
      ],
      "description": [
        "Called when a vehicle gets damage. Too much damage will <a href='#vehicle_destroy'>destroy</a> the vehicle."
      ],
      "requirements": null,
      "examples": [
        "on vehicle damage:"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "vehicle",
          "name": "vehicle"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "vehicle_destroy",
      "name": "On Vehicle Destroy",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "vehicle destroy",
        "destr(oy[ing]|uction of) [a] vehicle"
      ],
      "description": [
        "Called when a vehicle is destroyed. Any <a href='expressions.html#ExprPassenger'>passenger</a> will be ejected and the vehicle might drop some item(s)."
      ],
      "requirements": null,
      "examples": [
        "on vehicle destroy:",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "vehicle",
          "name": "vehicle"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "vehicle_enter",
      "name": "On Vehicle Enter",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "vehicle enter",
        "enter[ing] [a] vehicle"
      ],
      "description": [
        "Called when an <a href='classes.html#entity'>entity</a> enters a vehicle, either deliberately (players) or by falling into them (mobs)."
      ],
      "requirements": null,
      "examples": [
        "on vehicle enter:",
        "\tentity is a player",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "vehicle",
          "name": "vehicle"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "vehicle_exit",
      "name": "On Vehicle Exit",
      "since": "1.0",
      "cancellable": true,
      "patterns": [
        "vehicle exit",
        "exit[ing] [a] vehicle"
      ],
      "description": [
        "Called when an entity exits a vehicle."
      ],
      "requirements": null,
      "examples": [
        "on vehicle exit:",
        "\tif event-entity is a spider:",
        "\t\tkill event-entity"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "livingentity",
          "name": "living entity"
        },
        {
          "id": "vehicle",
          "name": "vehicle"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "entity_mount",
      "name": "On Entity Mount",
      "since": "2.2-dev13b",
      "cancellable": true,
      "patterns": [
        "mount[ing]"
      ],
      "description": [
        "Called when entity starts riding another."
      ],
      "requirements": null,
      "examples": [
        "on mount:",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "entity_dismount",
      "name": "On Entity Dismount",
      "since": "2.2-dev13b",
      "cancellable": true,
      "patterns": [
        "dismount[ing]"
      ],
      "description": [
        "Called when an entity dismounts."
      ],
      "requirements": null,
      "examples": [
        "on dismount:",
        "\tkill event-entity"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "gliding_state_change",
      "name": "On Gliding State Change",
      "since": "2.2-dev21",
      "cancellable": true,
      "patterns": [
        "(gliding state change|toggl(e|ing) gliding)"
      ],
      "description": [
        "Called when an entity toggles glider on or off, or when server toggles gliding state of an entity forcibly."
      ],
      "requirements": null,
      "examples": [
        "on toggling gliding:",
        "\tcancel the event # bad idea, but you CAN do it!"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "aoe_cloud_effect",
      "name": "On AoE Cloud Effect",
      "since": "2.2-dev21",
      "cancellable": true,
      "patterns": [
        "(area|AoE) [cloud] effect"
      ],
      "description": [
        "Called when area effect cloud applies its potion effect. This happens every 5 ticks by default."
      ],
      "requirements": null,
      "examples": [
        "on area cloud effect:"
      ],
      "eventValues": [
        {
          "id": "livingentity",
          "name": "living entities"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "potioneffecttype",
          "name": "potion effect type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "sheep_regrow_wool",
      "name": "On Sheep Regrow Wool",
      "since": "2.2-dev21",
      "cancellable": true,
      "patterns": [
        "sheep [re]grow[ing] wool"
      ],
      "description": [
        "Called when sheep regrows its sheared wool back."
      ],
      "requirements": null,
      "examples": [
        "on sheep grow wool:",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "inventory_open",
      "name": "On Inventory Open",
      "since": "2.2-dev21",
      "cancellable": true,
      "patterns": [
        "inventory open[ed]"
      ],
      "description": [
        "Called when an inventory is opened for player."
      ],
      "requirements": null,
      "examples": [
        "on inventory open:",
        "\tclose player's inventory"
      ],
      "eventValues": [
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "inventory",
          "name": "inventory"
        }
      ],
      "keywords": null
    },
    {
      "id": "inventory_close",
      "name": "On Inventory Close",
      "since": "2.2-dev21",
      "cancellable": false,
      "patterns": [
        "inventory clos(ing|e[d])"
      ],
      "description": [
        "Called when player's currently viewed inventory is closed."
      ],
      "requirements": null,
      "examples": [
        "on inventory close:",
        "\tif player's location is {location}:",
        "\t\tsend \"You exited the shop!\""
      ],
      "eventValues": [
        {
          "id": "inventoryclosereason",
          "name": "inventory close reason"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "inventory",
          "name": "inventory"
        }
      ],
      "keywords": null
    },
    {
      "id": "slime_split",
      "name": "On Slime Split",
      "since": "2.2-dev26",
      "cancellable": true,
      "patterns": [
        "slime split[ting]"
      ],
      "description": [
        "Called when a slime splits. Usually this happens when a big slime dies."
      ],
      "requirements": null,
      "examples": [
        "on slime split:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "resurrect_attempt",
      "name": "On Resurrect Attempt",
      "since": "2.2-dev28",
      "cancellable": true,
      "patterns": [
        "[entity] resurrect[ion] [attempt]"
      ],
      "description": [
        "Called when an entity dies, always. If they are not holding a totem, this is cancelled - you can, however, uncancel it."
      ],
      "requirements": null,
      "examples": [
        "on resurrect attempt:",
        "\tentity is player",
        "\tentity has permission \"admin.undying\"",
        "\tuncancel the event"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "slot",
          "name": "slot"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "player_world_change",
      "name": "On Player World Change",
      "since": "2.2-dev28",
      "cancellable": false,
      "patterns": [
        "[player] world chang(ing|e[d])"
      ],
      "description": [
        "Called when a player enters a world. Does not work with other entities!"
      ],
      "requirements": null,
      "examples": [
        "on player world change:",
        "\tworld is \"city\"",
        "\tsend \"Welcome to the City!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "world",
          "name": "past world"
        }
      ],
      "keywords": null
    },
    {
      "id": "flight_toggle",
      "name": "On Flight Toggle",
      "since": "2.2-dev36",
      "cancellable": true,
      "patterns": [
        "[player] flight toggl(e|ing)",
        "[player] toggl(e|ing) flight"
      ],
      "description": [
        "Called when a players stops/starts flying."
      ],
      "requirements": null,
      "examples": [
        "on flight toggle:",
        "\tif {game::%player%::playing} exists:",
        "\t\tcancel event"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "language_change",
      "name": "On Language Change",
      "since": "2.3",
      "cancellable": false,
      "patterns": [
        "[player] (language|locale) chang(e|ing)",
        "[player] chang(e|ing) (language|locale)"
      ],
      "description": [
        "Called after a player changed their language in the game settings. You can use the <a href='expressions.html#ExprLanguage'>language</a> expression to get the current language of the player.",
        "This event requires Minecraft 1.12+."
      ],
      "requirements": null,
      "examples": [
        "on language change:",
        "\tif player's language starts with \"en\":",
        "\t\tsend \"Hello!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "jump",
      "name": "On Jump",
      "since": "2.3",
      "cancellable": true,
      "patterns": [
        "[player] jump[ing]"
      ],
      "description": [
        "Called whenever a player jumps.",
        "This event requires PaperSpigot."
      ],
      "requirements": null,
      "examples": [
        "on jump:",
        "\tevent-player does not have permission \"jump\"",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "hand_item_swap",
      "name": "On Hand Item Swap",
      "since": "2.3",
      "cancellable": true,
      "patterns": [
        "swap[ping of] [(hand|held)] item[s]"
      ],
      "description": [
        "Called whenever a player swaps the items in their main- and offhand slots.",
        "Works also when one or both of the slots are empty.",
        "The event is called before the items are actually swapped,",
        "so when you use the player's tool or player's offtool expressions,",
        "they will return the values before the swap -",
        "this enables you to cancel the event before anything happens."
      ],
      "requirements": null,
      "examples": [
        "on swap hand items:",
        "\tevent-player's tool is a diamond sword",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "server_list_ping",
      "name": "On Server List Ping",
      "since": "2.3",
      "cancellable": true,
      "patterns": [
        "server [list] ping"
      ],
      "description": [
        "Called when a server list ping is coming in, generally when a Minecraft client pings the server to show its information in the server list.",
        "The <a href='expressions.html#ExprIP'>IP</a> expression can be used to get the IP adress of the pinger.",
        "This event can be cancelled on PaperSpigot 1.12.2+ only and this means the player will see the server as offline (but still can join).",
        "",
        "Also you can use <a href='expressions.html#ExprMOTD'>MOTD</a>, <a href='expressions.html#ExprMaxPlayers'>Max Players</a>, <a href='expressions.html#ExprOnlinePlayersCount'>Online Players Count</a>, <a href='expressions.html#ExprProtocolVersion'>Protocol Version</a>, <a href='expressions.html#ExprVersionString'>Version String</a>, <a href='expressions.html#ExprHoverList'>Hover List</a> and <a href='expressions.html#ExprServerIcon'>Server Icon</a> expressions, and <a href='effects.html#EffPlayerInfoVisibility'>Player Info Visibility</a> and <a href='effects.html#EffHidePlayerFromServerList'>Hide Player from Server List</a> effects to modify the server list."
      ],
      "requirements": null,
      "examples": [
        "on server list ping:",
        "\tset the motd to \"Welcome %{player-by-IP::%ip%}%! Join now!\" if {player-by-IP::%ip%} is set, else \"Join now!\"",
        "\tset the fake max players count to (online players count + 1)",
        "\tset the shown icon to a random server icon out of {server-icons::*}"
      ],
      "eventValues": null,
      "keywords": null
    },
    {
      "id": "swim_toggle",
      "name": "On Swim Toggle",
      "since": "2.3",
      "cancellable": true,
      "patterns": [
        "[entity] toggl(e|ing) swim",
        "[entity] swim toggl(e|ing)"
      ],
      "description": [
        "Called when an entity swims or stops swimming."
      ],
      "requirements": [
        "1.13 or newer"
      ],
      "examples": [
        "on swim toggle:",
        "\tevent-entity does not have permission \"swim\"",
        "\tcancel event"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "riptide",
      "name": "On Riptide",
      "since": "2.5",
      "cancellable": false,
      "patterns": [
        "[use of] riptide [enchant[ment]]"
      ],
      "description": [
        "Called when the player activates the riptide enchantment, using their trident to propel them through the air.",
        "Note: the riptide action is performed client side, so manipulating the player in this event may have undesired effects."
      ],
      "requirements": null,
      "examples": [
        "on riptide:",
        "\tsend \"You are riptiding!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "sponge_absorb",
      "name": "On Sponge Absorb",
      "since": "2.5",
      "cancellable": true,
      "patterns": [
        "sponge absorb"
      ],
      "description": [
        "Called when a sponge absorbs blocks."
      ],
      "requirements": [
        "Minecraft 1.13 or newer"
      ],
      "examples": [
        "on sponge absorb:",
        "\tloop absorbed blocks:",
        "\t\tbroadcast \"%loop-block% was absorbed by a sponge\"!"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "enchant_prepare",
      "name": "On Enchant Prepare",
      "since": "2.5",
      "cancellable": true,
      "patterns": [
        "[item] enchant prepare"
      ],
      "description": [
        "Called when a player puts an item into enchantment table. This event may be called multiple times.",
        " To get the enchant item, see the <a href='expressions.html#ExprEnchantEventsEnchantItem'>enchant item expression</a>"
      ],
      "requirements": null,
      "examples": [
        "on enchant prepare:",
        "\tset enchant offer 1 to sharpness 1",
        "\tset the cost of enchant offer 1 to 10 levels"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "inventory",
          "name": "inventory"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "enchant",
      "name": "On Enchant",
      "since": "2.5",
      "cancellable": true,
      "patterns": [
        "[item] enchant"
      ],
      "description": [
        "Called when a player successfully enchants an item.",
        " To get the enchanted item, see the <a href='expressions.html#ExprEnchantEventsEnchantItem'>enchant item expression</a>"
      ],
      "requirements": null,
      "examples": [
        "on enchant:",
        "\tif the clicked button is 1: # offer 1",
        "\t\tset the applied enchantments to sharpness 10 and unbreaking 10"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "enchantmenttype",
          "name": "enchantment types"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "inventory",
          "name": "inventory"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "inventory_pickup",
      "name": "On Inventory Pickup",
      "since": "2.5.1",
      "cancellable": true,
      "patterns": [
        "inventory pick[ ]up"
      ],
      "description": [
        "Called when an inventory (a hopper, a hopper minecart, etc.) picks up an item"
      ],
      "requirements": null,
      "examples": [
        "on inventory pickup:"
      ],
      "eventValues": [
        {
          "id": "itementity",
          "name": "dropped item"
        },
        {
          "id": "inventory",
          "name": "inventory"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "horse_jump",
      "name": "On Horse Jump",
      "since": "2.5.1",
      "cancellable": true,
      "patterns": [
        "horse jump"
      ],
      "description": [
        "Called when a horse jumps."
      ],
      "requirements": null,
      "examples": [
        "on horse jump:",
        "\tpush event-entity upwards at speed 2"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "block_fertilize",
      "name": "On Block Fertilize",
      "since": "2.5",
      "cancellable": true,
      "patterns": [
        "[block] fertilize"
      ],
      "description": [
        "Called when a player fertilizes blocks."
      ],
      "requirements": [
        "Minecraft 1.13 or newer"
      ],
      "examples": [
        "on block fertilize:",
        "\tsend \"Fertilized %size of fertilized blocks% blocks got fertilized.\""
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "block",
          "name": "blocks"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "arm_swing",
      "name": "On Arm Swing",
      "since": "2.5.1",
      "cancellable": true,
      "patterns": [
        "[player] arm swing"
      ],
      "description": [
        "Called when a player swings their arm."
      ],
      "requirements": null,
      "examples": [
        "on arm swing:",
        "\tsend \"You swung your arm!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "item_mend",
      "name": "On Item Mend",
      "since": "2.5.1",
      "cancellable": true,
      "patterns": [
        "item mend[ing]"
      ],
      "description": [
        "Called when a player has an item repaired via the Mending enchantment."
      ],
      "requirements": [
        "Minecraft 1.13 or newer"
      ],
      "examples": [
        "on item mend:",
        "\tchance of 50%:",
        "\t\tcancel the event",
        "\t\tsend \"Oops! Mending failed!\" to player"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "anvil_prepare",
      "name": "On Anvil Prepare",
      "since": "2.7",
      "cancellable": false,
      "patterns": [
        "anvil prepar(e|ing)"
      ],
      "description": [
        "Called when an item is put in a slot for repair by an anvil. Please note that this event is called multiple times in a single item slot move."
      ],
      "requirements": null,
      "examples": [
        "on anvil prepare:",
        "\tevent-item is set # result item",
        "\tchance of 5%:",
        "\t\tset repair cost to repair cost * 50%",
        "\t\tsend \"You're LUCKY! You got 50% discount.\" to player"
      ],
      "eventValues": [
        {
          "id": "inventory",
          "name": "inventory"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "player_trade",
      "name": "On Player Trade",
      "since": "2.7",
      "cancellable": true,
      "patterns": [
        "player trad(e|ing)"
      ],
      "description": [
        "Called when a player has traded with a villager."
      ],
      "requirements": [
        "Paper 1.16.5+"
      ],
      "examples": [
        "on player trade:",
        "\tchance of 50%:",
        "\t\tcancel event",
        "\t\tsend \"The trade was somehow denied!\" to player"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "entity_jump",
      "name": "On Entity Jump",
      "since": "2.7",
      "cancellable": true,
      "patterns": [
        "entity jump[ing]"
      ],
      "description": [
        "Called when an entity jumps."
      ],
      "requirements": [
        "Paper 1.15.2+"
      ],
      "examples": [
        "on entity jump:",
        "\tif entity is a wither skeleton:",
        "\t\tcancel event"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "anvil_damage",
      "name": "On Anvil Damage",
      "since": "2.7",
      "cancellable": true,
      "patterns": [
        "anvil damag(e|ing)"
      ],
      "description": [
        "Called when an anvil is damaged/broken from being used to repair/rename items.",
        "Note: this does not include anvil damage from falling."
      ],
      "requirements": [
        "Paper"
      ],
      "examples": [
        "on anvil damage:",
        "\tcancel the event"
      ],
      "eventValues": [
        {
          "id": "inventory",
          "name": "inventory"
        }
      ],
      "keywords": null
    },
    {
      "id": "stop_using_item",
      "name": "On Stop Using Item",
      "since": "2.8.0",
      "cancellable": false,
      "patterns": [
        "[player] (stop|end) (using item|item use)"
      ],
      "description": [
        "Called when a player stops using an item. For example, when the player releases the interact button when holding a bow, an edible item, or a spyglass.",
        "Note that event-timespan will return the time the item was used for."
      ],
      "requirements": [
        "Paper 1.18.2+"
      ],
      "examples": [
        "on player stop using item:",
        "\tbroadcast \"%player% used %event-item% for %event-timespan%.\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "timespan",
          "name": "time span"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemtype",
          "name": "item type"
        }
      ],
      "keywords": null
    },
    {
      "id": "ready_arrow",
      "name": "On Ready Arrow",
      "since": "2.8.0",
      "cancellable": true,
      "patterns": [
        "[player] ((ready|choose|draw|load) arrow|arrow (choose|draw|load))"
      ],
      "description": [
        "Called when a player is firing a bow and the server is choosing an arrow to use.",
        "Cancelling this event will skip the current arrow item and fire a new event for the next arrow item.",
        "The arrow and bow in the event can be accessed with the Readied Arrow/Bow expression."
      ],
      "requirements": [
        "Paper"
      ],
      "examples": [
        "on player ready arrow:",
        "\tselected bow's name is \"Spectral Bow\"",
        "\tif selected arrow is not a spectral arrow:",
        "\t\tcancel event"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "inventory_slot_change",
      "name": "On Inventory Slot Change",
      "since": "2.7",
      "cancellable": false,
      "patterns": [
        "[player] inventory slot chang(e|ing)"
      ],
      "description": [
        "Called when a slot in a player's inventory is changed.",
        "Warning: setting the event-slot to a new item can result in an infinite loop."
      ],
      "requirements": [
        "Paper 1.19.2+"
      ],
      "examples": [
        "on inventory slot change:",
        "\tif event-item is a diamond:",
        "\t\tsend \"You obtained a diamond!\" to player"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "slot",
          "name": "slot"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemstack",
          "name": "past item stack"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "chat",
      "name": "On Chat",
      "since": "1.4.1",
      "cancellable": true,
      "patterns": [
        "chat"
      ],
      "description": [
        "Called whenever a player chats.",
        "Use <a href='./expressions.html#ExprChatFormat'>chat format</a> to change message format.",
        "Use <a href='./expressions.html#ExprChatRecipients'>chat recipients</a> to edit chat recipients."
      ],
      "requirements": null,
      "examples": [
        "on chat:",
        "\tif player has permission \"owner\":",
        "\t\tset chat format to \"&lt;red&gt;[player]&lt;light gray&gt;: &lt;light red&gt;[message]\"",
        "\telse if player has permission \"admin\":",
        "\t\tset chat format to \"&lt;light red&gt;[player]&lt;light gray&gt;: &lt;orange&gt;[message]\"",
        "\telse: #default message format",
        "\t\tset chat format to \"&lt;orange&gt;[player]&lt;light gray&gt;: &lt;white&gt;[message]\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "player_deep_sleep",
      "name": "On Player Deep Sleep",
      "since": "2.7",
      "cancellable": true,
      "patterns": [
        "[player] deep sleep[ing]"
      ],
      "description": [
        "Called when a player has slept long enough to count as passing the night/storm.",
        "Cancelling this event will prevent the player from being counted as deeply sleeping unless they exit and re-enter the bed."
      ],
      "requirements": [
        "Paper 1.16+"
      ],
      "examples": [
        "on player deep sleeping:",
        "\tsend \"Zzzz..\" to player"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "player_pickup_arrow",
      "name": "On Player Pickup Arrow",
      "since": "2.8.0",
      "cancellable": true,
      "patterns": [
        "[player] (pick[ing| ]up [an] arrow|arrow pick[ing| ]up)"
      ],
      "description": [
        "Called when a player picks up an arrow from the ground."
      ],
      "requirements": [
        "Minecraft 1.14+ (event-projectile)"
      ],
      "examples": [
        "on arrow pickup:",
        "\tcancel the event",
        "\tteleport event-projectile to block 5 above event-projectile"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "itementity",
          "name": "dropped item"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "projectile",
          "name": "projectile"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "inventory_drag",
      "name": "On Inventory Drag",
      "since": "2.7",
      "cancellable": true,
      "patterns": [
        "inventory drag[ging]"
      ],
      "description": [
        "Called when a player drags an item in their cursor across the inventory."
      ],
      "requirements": null,
      "examples": [
        "on inventory drag:",
        "\tif player's current inventory is {_gui}:",
        "\t\tsend \"You can't drag your items here!\" to player",
        "\t\tcancel event"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "inventory",
          "name": "inventories"
        },
        {
          "id": "itemstack",
          "name": "item stacks"
        },
        {
          "id": "itemstack",
          "name": "past item stack"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "slot",
          "name": "slots"
        },
        {
          "id": "clicktype",
          "name": "click type"
        },
        {
          "id": "inventory",
          "name": "inventory"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "piglin_barter",
      "name": "On Piglin Barter",
      "since": "2.10",
      "cancellable": true,
      "patterns": [
        "piglin (barter[ing]|trad(e|ing))"
      ],
      "description": [
        "Called when a piglin finishes bartering. A piglin may start bartering after picking up an item on its bartering list.",
        "Cancelling will prevent piglins from dropping items, but will still make them pick up the input."
      ],
      "requirements": [
        "Minecraft 1.16+"
      ],
      "examples": [
        "on piglin barter:",
        "\tif barter drops contain diamond:",
        "\t\tsend \"Diamonds belong in the money pit!\" to player",
        "\t\tcancel event"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "bell_ring",
      "name": "On Bell Ring",
      "since": "2.9.0",
      "cancellable": true,
      "patterns": [
        "bell ring[ing]"
      ],
      "description": [
        "Called when a bell is rung."
      ],
      "requirements": [
        "Spigot 1.19.4+ or Paper 1.16.5+ (no event-direction)"
      ],
      "examples": [
        "on bell ring:",
        "\tsend \"<gold>Ding-dong!<reset>\" to all players in radius 10 of event-block"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "direction",
          "name": "direction"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "bell_resonate",
      "name": "On Bell Resonate",
      "since": "2.9.0",
      "cancellable": false,
      "patterns": [
        "bell resonat(e|ing)"
      ],
      "description": [
        "Called when a bell resonates, highlighting nearby raiders."
      ],
      "requirements": [
        "Spigot 1.19.4+"
      ],
      "examples": [
        "on bell resonate:",
        "\tsend \"<red>Raiders are nearby!\" to all players in radius 32 around event-block"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entity",
          "name": "entities"
        }
      ],
      "keywords": null
    },
    {
      "id": "enderman_enrage",
      "name": "On Enderman Enrage",
      "since": "2.9.0",
      "cancellable": true,
      "patterns": [
        "enderman (enrage|anger)"
      ],
      "description": [
        "Called when an enderman gets mad because a player looked at them.",
        "Note: This does not stop enderman from targeting the player as a result of getting damaged."
      ],
      "requirements": [
        "Paper"
      ],
      "examples": [
        "# Stops endermen from getting angry players with the permission \"safeFrom.enderman\"",
        "on enderman enrage:",
        "\tif player has permission \"safeFrom.enderman\":",
        "\t\tcancel event"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "beacon_change_effect",
      "name": "On Beacon Change Effect",
      "since": "2.10",
      "cancellable": true,
      "patterns": [
        "beacon change effect",
        "beacon effect change",
        "player chang(e[s]|ing) [of] beacon effect"
      ],
      "description": [
        "Called when a player changes the effects of a beacon."
      ],
      "requirements": [
        "Paper"
      ],
      "examples": [
        "on beacon effect change:",
        "\tbroadcast event-player",
        "\tbroadcast event-block",
        "\tbroadcast primary beacon effect",
        "\tbroadcast secondary beacon effect",
        "on beacon change effect:",
        "on player change beacon effect:"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "broadcast",
      "name": "On Broadcast",
      "since": "2.10",
      "cancellable": true,
      "patterns": [
        "broadcast"
      ],
      "description": [
        "Called when a message is broadcasted."
      ],
      "requirements": null,
      "examples": [
        "on broadcast:",
        "\tset broadcast-message to \"&c[BROADCAST] %broadcasted message%\""
      ],
      "eventValues": null,
      "keywords": null
    },
    {
      "id": "experience_cooldown_change",
      "name": "On Experience Cooldown Change",
      "since": "2.10",
      "cancellable": false,
      "patterns": [
        "player (experience|[e]xp) cooldown change"
      ],
      "description": [
        "Called when a player's experience cooldown changes.",
        "Experience cooldown is how long until a player can pick up another orb of experience."
      ],
      "requirements": null,
      "examples": [
        "on player experience cooldown change:",
        "\tbroadcast event-player",
        "\tbroadcast event-timespan",
        "\tbroadcast past event-timespan",
        "\tbroadcast xp cooldown change reason"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "timespan",
          "name": "time span"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "experiencecooldownchangereason",
          "name": "experience cooldown change reason"
        },
        {
          "id": "timespan",
          "name": "past time span"
        }
      ],
      "keywords": null
    },
    {
      "id": "vehicle_move",
      "name": "On Vehicle Move",
      "since": "2.10",
      "cancellable": false,
      "patterns": [
        "vehicle move"
      ],
      "description": [
        "Called when a vehicle moves.",
        "Please note that using this event can cause lag if there are multiple vehicle entities, i.e. Horse, Pig, Boat, Minecart"
      ],
      "requirements": null,
      "examples": [
        "on vehicle move:",
        "\tbroadcast past event-location",
        "\tbroadcast event-location"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "location",
          "name": "past location"
        },
        {
          "id": "vehicle",
          "name": "vehicle"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "elytra_boost",
      "name": "On Elytra Boost",
      "since": "2.10",
      "cancellable": true,
      "patterns": [
        "elytra boost"
      ],
      "description": [
        "Called when a player uses a firework to boost their fly speed when flying with an elytra."
      ],
      "requirements": [
        "Paper"
      ],
      "examples": [
        "on elytra boost:",
        "\tif the used firework will be consumed:",
        "\t\tprevent the used firework from being consume"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "bat_toggle_sleep",
      "name": "On Bat Toggle Sleep",
      "since": "2.11",
      "cancellable": true,
      "patterns": [
        "bat toggle sleep"
      ],
      "description": [
        "Called when a bat attempts to go to sleep or wakes up."
      ],
      "requirements": null,
      "examples": [
        "on bat toggle sleep:"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "world_border_bounds_change",
      "name": "On World Border Bounds Change",
      "since": "2.11",
      "cancellable": true,
      "patterns": [
        "world[ ]border [bounds] chang(e|ing)"
      ],
      "description": [
        "Called when a world border changes its bounds, either over time, or instantly.",
        "This event does not get called for virtual borders."
      ],
      "requirements": [
        "Paper 1.16+"
      ],
      "examples": [
        "on worldborder bounds change:",
        "\tbroadcast \"The diameter of %event-worldborder% is changing from %past event-number% to %event-number% over the next %event-timespan%\""
      ],
      "eventValues": [
        {
          "id": "number",
          "name": "number"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "timespan",
          "name": "time span"
        },
        {
          "id": "worldborder",
          "name": "worldborder"
        },
        {
          "id": "number",
          "name": "past number"
        }
      ],
      "keywords": null
    },
    {
      "id": "world_border_bounds_finish_change",
      "name": "On World Border Bounds Finish Change",
      "since": "2.11",
      "cancellable": false,
      "patterns": [
        "world[ ]border [bounds] finish chang(e|ing)"
      ],
      "description": [
        "Called when a moving world border has finished its move.",
        "This event does not get called for virtual borders."
      ],
      "requirements": [
        "Paper 1.16+"
      ],
      "examples": [
        "on worldborder bounds finish change:",
        "\tbroadcast \"Over the past %event-timespan%, the diameter of %event-worldborder% went from %past event-number% to %event-number%\""
      ],
      "eventValues": [
        {
          "id": "number",
          "name": "number"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "timespan",
          "name": "time span"
        },
        {
          "id": "worldborder",
          "name": "worldborder"
        },
        {
          "id": "number",
          "name": "past number"
        }
      ],
      "keywords": null
    },
    {
      "id": "world_border_center_change",
      "name": "On World Border Center Change",
      "since": "2.11",
      "cancellable": true,
      "patterns": [
        "world[ ]border center chang(e|ing)"
      ],
      "description": [
        "Called when a world border's center has changed.",
        "This event does not get called for virtual borders."
      ],
      "requirements": [
        "Paper 1.16+"
      ],
      "examples": [
        "on worldborder center change:",
        "\tbroadcast \"The center of %event-worldborder% has moved from %past event-location% to %event-location%\""
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "location",
          "name": "past location"
        },
        {
          "id": "worldborder",
          "name": "worldborder"
        }
      ],
      "keywords": null
    },
    {
      "id": "vault_display_item",
      "name": "On Vault Display Item",
      "since": "INSERT VERSION",
      "cancellable": true,
      "patterns": [
        "vault display[ing] item"
      ],
      "description": [
        "Called when a vault in a trial chamber is about to display an item."
      ],
      "requirements": [
        "Minecraft 1.21.1+"
      ],
      "examples": [
        "on vault display item:\n\tset event-item to a netherite ingot\n"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "villager_career_change",
      "name": "On Villager Career Change",
      "since": "INSERT VERSION",
      "cancellable": true,
      "patterns": [
        "villager career chang(e[d]|ing)"
      ],
      "description": [
        "Called when a villager changes its career. Can be caused by being employed or losing their job."
      ],
      "requirements": null,
      "examples": [
        "on villager career change:\n\tif all:\n\t\tevent-career change reason is employment\n\t\tevent-villager profession is armorer profession\n\tthen:\n\t\tcancel event\n"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "villagerprofession",
          "name": "villager profession"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "villagerprofession",
          "name": "past villager profession"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "villagercareerchangereason",
          "name": "villager career change reason"
        }
      ],
      "keywords": null
    },
    {
      "id": "bucket_catch_entity",
      "name": "On Bucket Catch Entity",
      "since": null,
      "cancellable": true,
      "patterns": [
        "bucket (catch[ing]|captur(e|ing)) [[of] %entity types%]"
      ],
      "description": null,
      "requirements": null,
      "examples": null,
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "itemstack",
          "name": "future item stack"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "fishing",
      "name": "On Fishing",
      "since": "2.10, 2.11 (state change)",
      "cancellable": true,
      "patterns": [
        "[fishing] (line|rod) cast",
        "fish (caught|catch)",
        "entity (hook[ed]|caught|catch)",
        "(bobber|hook) (in|hit) ground",
        "fish (escape|get away)",
        "[fishing] (rod|line) reel in",
        "fish bit(e|ing)",
        "(fish approach[ing]|(bobber|hook) lure[d])",
        "fishing state change[d]"
      ],
      "description": [
        "Called when a player triggers a fishing event.",
        "An entity hooked event is triggered when an entity gets caught by a fishing rod.",
        "A fish escape event is called when the player fails to click on time, and the fish escapes.",
        "A fish approaching event is when the bobber is waiting to be hooked, and a fish is approaching.",
        "A fishing state change event is triggered whenever the fishing state changes."
      ],
      "requirements": [
        "Paper (bobber lured)"
      ],
      "examples": [
        "on fishing line cast:",
        "\tsend \"You caught a fish!\" to player",
        "on entity caught:",
        "\tpush event-entity vector from entity to player",
        "on fishing state change:",
        "\tif event-fishing state is fish caught:",
        "\t\tbroadcast \"A fish has been caught!\""
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "fishingstate",
          "name": "fishing state"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "entity_breed",
      "name": "On Entity Breed",
      "since": "2.10",
      "cancellable": true,
      "patterns": [
        "[entity] breed[ing] [of %entity types%]"
      ],
      "description": [
        "Called whenever two animals begin to conceive a child. The type can be specified."
      ],
      "requirements": null,
      "examples": [
        "on breeding of llamas:",
        "\tsend \"When a %breeding mother% and %breeding father% love each other very much they make %offspring%\" to breeder"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        },
        {
          "id": "itemstack",
          "name": "item stack"
        }
      ],
      "keywords": null
    },
    {
      "id": "love_mode_enter",
      "name": "On Love Mode Enter",
      "since": "2.10",
      "cancellable": true,
      "patterns": [
        "[entity] enter[s] love mode",
        "[entity] love mode [enter]"
      ],
      "description": [
        "Called whenever an entity enters a state of being in love."
      ],
      "requirements": null,
      "examples": [
        "on love mode enter:",
        "\tcancel event # No one is allowed love here"
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "livingentity",
          "name": "living entity"
        },
        {
          "id": "entitydata",
          "name": "entity type"
        },
        {
          "id": "commandsender",
          "name": "command sender"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "player_input",
      "name": "On Player Input",
      "since": "2.10",
      "cancellable": false,
      "patterns": [
        "[player] (toggle|toggling|press[ing]|release|releasing) of (%input keys%|(an|any) input key)",
        "([player] %input keys%|[an|player] input key) (toggle|toggling|press[ing]|release|releasing)"
      ],
      "description": [
        "Called when a player sends an updated input to the server.",
        "Note: The input keys event value is the set of keys the player is currently pressing, not the keys that were pressed or released."
      ],
      "requirements": [
        "Minecraft 1.21.3+"
      ],
      "examples": [
        "on input key press:",
        "\tsend \"You are pressing: %event-inputkeys%\" to player"
      ],
      "eventValues": [
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "inputkey",
          "name": "past input keys"
        },
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "inputkey",
          "name": "input keys"
        }
      ],
      "keywords": null
    },
    {
      "id": "smelt",
      "name": "On Smelt",
      "since": "1.0, 2.10 (specific item)",
      "cancellable": true,
      "patterns": [
        "[furnace] [ore] smelt[ed|ing] [of %item types%]",
        "[furnace] smelt[ed|ing] of ore"
      ],
      "description": [
        "Called when a furnace smelts an item in its <a href='expressions.html#ExprFurnaceSlot'>input slot</a>."
      ],
      "requirements": null,
      "examples": [
        "on smelt:",
        "\tclear the smelted item",
        "on smelt of raw iron:",
        "\tbroadcast smelted item",
        "\tset the smelted item to iron block"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "fuel_burn",
      "name": "On Fuel Burn",
      "since": "1.0, 2.10 (specific item)",
      "cancellable": true,
      "patterns": [
        "[furnace] fuel burn[ing] [of %item types%]"
      ],
      "description": [
        "Called when a furnace burns an item from its <a href='expressions.html#ExprFurnaceSlot'>fuel slot</a>."
      ],
      "requirements": null,
      "examples": [
        "on fuel burning:",
        "\tbroadcast fuel burned",
        "\tif burned fuel is coal:",
        "\t\tadd 20 seconds to burn time"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "furnace_item_extract",
      "name": "On Furnace Item Extract",
      "since": "2.10",
      "cancellable": false,
      "patterns": [
        "furnace [item] extract[ion] [of %item types%]"
      ],
      "description": [
        "Called when a player takes any item out of the furnace."
      ],
      "requirements": null,
      "examples": [
        "on furnace extract:",
        "\tif event-items is an iron ingot:",
        "\t\tremove event-items from event-player's inventory"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "itemstack",
          "name": "item stacks"
        },
        {
          "id": "player",
          "name": "player"
        }
      ],
      "keywords": null
    },
    {
      "id": "start_smelt",
      "name": "On Start Smelt",
      "since": "2.10",
      "cancellable": false,
      "patterns": [
        "[furnace] start [of] smelt[ing] [[of] %item types%]",
        "[furnace] smelt[ing] start [of %item types%]"
      ],
      "description": [
        "Called when a furnace starts smelting an item in its ore slot."
      ],
      "requirements": null,
      "examples": [
        "on smelting start:",
        "\tif the smelting item is raw iron:",
        "\t\tset total cook time to 1 second",
        "on smelting start of raw iron:",
        "\tadd 20 seconds to total cook time"
      ],
      "eventValues": [
        {
          "id": "block",
          "name": "block"
        },
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        }
      ],
      "keywords": null
    },
    {
      "id": "loot_generate",
      "name": "On Loot Generate",
      "since": "2.7",
      "cancellable": true,
      "patterns": [
        "loot generat(e|ing)"
      ],
      "description": [
        "Called when a loot table of an inventory is generated in the world.",
        "For example, when opening a shipwreck chest."
      ],
      "requirements": [
        "MC 1.16+"
      ],
      "examples": [
        "on loot generate:",
        "\tchance of 10%",
        "\tadd 64 diamonds to the loot",
        "\tsend \"You hit the jackpot at %event-location%!\""
      ],
      "eventValues": [
        {
          "id": "location",
          "name": "location"
        },
        {
          "id": "world",
          "name": "world"
        },
        {
          "id": "loottable",
          "name": "loot table"
        },
        {
          "id": "lootcontext",
          "name": "loot context"
        },
        {
          "id": "entity",
          "name": "entity"
        }
      ],
      "keywords": null
    },
    {
      "id": "region_enterleave",
      "name": "On Region Enter/Leave",
      "since": "2.1",
      "cancellable": true,
      "patterns": [
        "(enter[ing]|leav(e|ing)|exit[ing]) [of] ([a] region|[[the] region] %regions%)",
        "region (enter[ing]|leav(e|ing)|exit[ing])"
      ],
      "description": [
        "Called when a player enters or leaves a <a href='./classes.html#region'>region</a>.",
        "This event requires a supported regions plugin to be installed."
      ],
      "requirements": [
        "Supported regions plugin"
      ],
      "examples": [
        "on region exit:",
        "\tmessage \"Leaving %region%.\""
      ],
      "eventValues": [
        {
          "id": "player",
          "name": "player"
        },
        {
          "id": "region",
          "name": "region"
        }
      ],
      "keywords": null
    }
  ],
  "classes": [
    {
      "id": "boolean",
      "name": "Boolean",
      "since": "1.0",
      "patterns": [
        "true/yes/on or false/no/off"
      ],
      "description": [
        "A boolean is a value that is either true or false. Other accepted names are 'on' and 'yes' for true, and 'off' and 'no' for false."
      ],
      "requirements": null,
      "examples": [
        "set {config.%player%.use mod} to false"
      ]
    },
    {
      "id": "string",
      "name": "Text",
      "since": "1.0",
      "patterns": [
        "simple: \"...\"",
        "quotes: \"...\"\"...\"",
        "expressions: \"...%expression%...\"",
        "percent  \"...%%...\""
      ],
      "description": [
        "Text is simply text, i.e. a sequence of characters, which can optionally contain expressions which will be replaced with a meaningful representation (e.g. %player% will be replaced with the player's name).",
        "Because scripts are also text, you have to put text into double quotes to tell Skript which part of the line is an effect/expression and which part is the text.",
        "Please read the article on <a href='./text.html'>Texts and Variable Names</a> to learn more."
      ],
      "requirements": null,
      "examples": [
        "broadcast \"Hello World!\"",
        "message \"Hello %player%\"",
        "message \"The id of \"\"%type of tool%\"\" is %id of tool%.\""
      ]
    },
    {
      "id": "quaternion",
      "name": "Quaternion",
      "since": "2.10",
      "patterns": null,
      "description": [
        "Quaternions are four dimensional vectors, often used for representing rotations."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "uuid",
      "name": "UUID",
      "since": "2.11",
      "patterns": null,
      "description": [
        "UUIDs are unique identifiers that ensure things can be reliably distinguished from each other. They are generated in a way that makes it practically impossible for duplicates to occur.",
        "Read more about UUIDs and how they are used in Minecraft in <a href='https://minecraft.wiki/w/UUID'>the wiki entry about UUIDs</a>."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "weathertype",
      "name": "Weather Type",
      "since": "1.0",
      "patterns": [
        "clear/sun/sunny, rain/rainy/raining, and thunder/thundering/thunderstorm"
      ],
      "description": [
        "The weather types sunny, rainy, and thundering."
      ],
      "requirements": null,
      "examples": [
        "is raining",
        "is sunny in the player's world",
        "message \"It is %weather in the argument's world% in %world of the argument%\""
      ]
    },
    {
      "id": "time",
      "name": "Time",
      "since": "1.0",
      "patterns": [
        "##:##",
        "##[##][ ]am/pm"
      ],
      "description": [
        "A time is a point in a minecraft day's time (i.e. ranges from 0:00 to 23:59), which can vary per world.",
        "See <a href='#date'>date</a> and <a href='#timespan'>timespan</a> for the other time types of Skript."
      ],
      "requirements": null,
      "examples": [
        "at 20:00:",
        "\ttime is 8 pm",
        "\tbroadcast \"It's %time%\""
      ]
    },
    {
      "id": "timeperiod",
      "name": "Timeperiod",
      "since": "1.0",
      "patterns": [
        "##:## - ##",
        "dusk/day/dawn/night"
      ],
      "description": [
        "A period of time between two <a href='#time'>times</a>. Mostly useful since you can use this to test for whether it's day, night, dusk or dawn in a specific world.",
        "This type might be removed in the future as you can use 'time of world is between x and y' as a replacement."
      ],
      "requirements": null,
      "examples": [
        "time in world is night"
      ]
    },
    {
      "id": "date",
      "name": "Date",
      "since": "1.4",
      "patterns": null,
      "description": [
        "A date is a certain point in the real world's time which can be obtained with <a href='./expressions.html#ExprNow'>now expression</a>, <a href='./expressions.html#ExprUnixDate'>unix date expression</a> and <a href='./functions.html#date'>date function</a>.",
        "See <a href='#time'>time</a> and <a href='#timespan'>timespan</a> for the other time types of Skript."
      ],
      "requirements": null,
      "examples": [
        "set {_yesterday} to now",
        "subtract a day from {_yesterday}",
        "# now {_yesterday} represents the date 24 hours before now"
      ]
    },
    {
      "id": "direction",
      "name": "Direction",
      "since": "2.0",
      "patterns": [
        "see <a href='./expressions.html#ExprDirection'>direction (expression)</a>"
      ],
      "description": [
        "A direction, e.g. north, east, behind, 5 south east, 1.3 meters to the right, etc.",
        "<a href='#location'>Locations</a> and some <a href='#block'>blocks</a> also have a direction, but without a length.",
        "Please note that directions have changed extensively in the betas and might not work perfectly. They can also not be used as command arguments."
      ],
      "requirements": null,
      "examples": [
        "set the block below the victim to a chest",
        "loop blocks from the block infront of the player to the block 10 below the player:",
        "\tset the block behind the loop-block to water"
      ]
    },
    {
      "id": "slot",
      "name": "Slot",
      "since": "",
      "patterns": null,
      "description": [
        "Represents a single slot of an <a href='#inventory'>inventory</a>. Notable slots are the <a href='./expressions.html#ExprArmorSlot'>armour slots</a> and <a href='./expressions/#ExprFurnaceSlot'>furnace slots</a>. ",
        "The most important property that distinguishes a slot from an <a href='#itemstack'>item</a> is its ability to be changed, e.g. it can be set, deleted, enchanted, etc. (Some item expressions can be changed as well, e.g. items stored in variables. For that matter: slots are never saved to variables, only the items they represent at the time when the variable is set).",
        "Please note that <a href='./expressions.html#ExprTool'>tool</a> can be regarded a slot, but it can actually change it's position, i.e. doesn't represent always the same slot."
      ],
      "requirements": null,
      "examples": [
        "set tool of player to dirt",
        "delete helmet of the victim",
        "set the color of the player's tool to green",
        "enchant the player's chestplate with projectile protection 5"
      ]
    },
    {
      "id": "color",
      "name": "Color",
      "since": "",
      "patterns": [
        "black, dark grey/dark gray, grey/light grey/gray/light gray/silver, white, blue/dark blue, cyan/aqua/dark cyan/dark aqua, light blue/light cyan/light aqua, green/dark green, light green/lime/lime green, yellow/light yellow, orange/gold/dark yellow, red/dark red, pink/light red, purple/dark purple, magenta/light purple, brown/indigo"
      ],
      "description": [
        "Wool, dye and chat colors."
      ],
      "requirements": null,
      "examples": [
        "color of the sheep is red or black",
        "set the color of the block to green",
        "message \"You're holding a <%color of tool%>%color of tool%<reset> wool block\""
      ]
    },
    {
      "id": "structuretype",
      "name": "Tree Type",
      "since": "",
      "patterns": [
        "[any] &lt;general tree/mushroom type&gt;, e.g. tree/any jungle tree/etc.",
        "&lt;specific tree/mushroom species&gt;, e.g. red mushroom/small jungle tree/big regular tree/etc."
      ],
      "description": [
        "A tree type represents a tree species or a huge mushroom species. These can be generated in a world with the <a href='./effects.html#EffTree'>generate tree</a> effect."
      ],
      "requirements": null,
      "examples": [
        "grow any regular tree at the block",
        "grow a huge red mushroom above the block"
      ]
    },
    {
      "id": "experience",
      "name": "Experience",
      "since": "2.0",
      "patterns": [
        "[&lt;number&gt;] ([e]xp|experience [point[s]])"
      ],
      "description": [
        "Experience points. Please note that Bukkit only allows to give XP, but not remove XP from players. You can however change a player's <a href='./expressions.html#ExprLevel'>level</a> and <a href='./expressions/#ExprLevelProgress'>level progress</a> freely."
      ],
      "requirements": null,
      "examples": [
        "give 10 xp to the player"
      ]
    },
    {
      "id": "gamerulevalue",
      "name": "Gamerule Value",
      "since": "2.5",
      "patterns": null,
      "description": [
        "A wrapper for the value of a gamerule for a world."
      ],
      "requirements": null,
      "examples": [
        ""
      ]
    },
    {
      "id": "queue",
      "name": "Queue",
      "since": "2.10",
      "patterns": null,
      "description": [
        "A queued list of values. Entries are removed from a queue when they are queried."
      ],
      "requirements": null,
      "examples": [
        "set {queue} to a new queue",
        "add \"hello\" to {queue}",
        "broadcast the 1st element of {queue}"
      ]
    },
    {
      "id": "config",
      "name": "Config",
      "since": "2.10",
      "patterns": null,
      "description": [
        "A configuration (or code) loaded by Skript, such as the config.sk or aliases.",
        "Configs can be reloaded or navigated to find options."
      ],
      "requirements": null,
      "examples": [
        "the skript config"
      ]
    },
    {
      "id": "node",
      "name": "Node",
      "since": "2.10",
      "patterns": null,
      "description": [
        "A node (entry) from a script config file.",
        "This may have navigable children."
      ],
      "requirements": null,
      "examples": [
        "the current script"
      ]
    },
    {
      "id": "script",
      "name": "Script",
      "since": "2.10",
      "patterns": null,
      "description": [
        "A script loaded by Skript.",
        "Disabled scripts will report as being empty since their content has not been loaded."
      ],
      "requirements": null,
      "examples": [
        "the current script"
      ]
    },
    {
      "id": "function",
      "name": "Function",
      "since": "2.10",
      "patterns": null,
      "description": [
        "A function loaded by Skript.",
        "This can be executed (with arguments) and may return a result."
      ],
      "requirements": null,
      "examples": [
        "run {_function} with arguments 1 and true",
        "set {_result} to the result of {_function}"
      ]
    },
    {
      "id": "valued",
      "name": "Any Valued Thing",
      "since": "2.10",
      "patterns": null,
      "description": [
        "Something that has a value."
      ],
      "requirements": null,
      "examples": [
        "the text of {node}"
      ]
    },
    {
      "id": "containing",
      "name": "Anything with Contents",
      "since": "2.10",
      "patterns": null,
      "description": [
        "Something that contains other things."
      ],
      "requirements": null,
      "examples": [
        "{a} contains {b}"
      ]
    },
    {
      "id": "projectile",
      "name": "Projectile",
      "since": "1.0",
      "patterns": [
        "arrow, fireball, snowball, thrown potion, etc."
      ],
      "description": [
        "A projectile, e.g. an arrow, snowball or thrown potion."
      ],
      "requirements": null,
      "examples": [
        "projectile is a snowball",
        "shoot an arrow at speed 5 from the player"
      ]
    },
    {
      "id": "block",
      "name": "Block",
      "since": "1.0",
      "patterns": null,
      "description": [
        "A block in a <a href='#world'>world</a>. It has a <a href='#location'>location</a> and a <a href='#itemstack'>type</a>, and can also have a <a href='#direction'>direction</a> (mostly a <a href='expressions.html#ExprFacing'>facing</a>), an <a href='#inventory'>inventory</a>, or other special properties."
      ],
      "requirements": null,
      "examples": [
        ""
      ]
    },
    {
      "id": "location",
      "name": "Location",
      "since": "1.0",
      "patterns": null,
      "description": [
        "A location in a <a href='#world'>world</a>. Locations are world-specific and even store a <a href='#direction'>direction</a>, e.g. if you save a location and later teleport to it you will face the exact same direction you did when you saved the location."
      ],
      "requirements": null,
      "examples": [
        "teleport player to location at 0, 69, 0",
        "set {home::%uuid of player%} to location of the player"
      ]
    },
    {
      "id": "vector",
      "name": "Vector",
      "since": "2.2-dev23",
      "patterns": [
        "vector(x, y, z)"
      ],
      "description": [
        "Vector is a collection of numbers. In Minecraft, 3D vectors are used to express velocities of entities."
      ],
      "requirements": null,
      "examples": [
        ""
      ]
    },
    {
      "id": "world",
      "name": "World",
      "since": "1.0, 2.2 (alternate syntax)",
      "patterns": [
        "<code>\"world_name\"</code>, e.g. \"world\""
      ],
      "description": [
        "One of the server's worlds. Worlds can be put into scripts by surrounding their name with double quotes, e.g. \"world_nether\", but this might not work reliably as <a href='#string'>text</a> uses the same syntax."
      ],
      "requirements": null,
      "examples": [
        "broadcast \"Hello!\" to the world \"world_nether\""
      ]
    },
    {
      "id": "inventory",
      "name": "Inventory",
      "since": "1.0",
      "patterns": null,
      "description": [
        "An inventory of a <a href='#player'>player</a> or <a href='#block'>block</a>. Inventories have many effects and conditions regarding the items contained.",
        "An inventory has a fixed amount of <a href='#slot'>slots</a> which represent a specific place in the inventory, e.g. the <a href='expressions.html#ExprArmorSlot'>helmet slot</a> for players (Please note that slot support is still very limited but will be improved eventually)."
      ],
      "requirements": null,
      "examples": [
        ""
      ]
    },
    {
      "id": "inventoryaction",
      "name": "Inventory Action",
      "since": "2.2-dev16",
      "patterns": [
        "drop stack from slot, swap items with hotbar, pickup all into bundle, place items from bundle, swap cursor stack, pickup single item, pickup some, drop all from cursor, move to other inventory, drop cursor stack, pickup all items into bundle, pickup from bundle, pickup all, place some into bundle, swap with hotbar, nothing, drop all from slot, swap cursor, drop cursor, place from bundle, pickup all items, drop slot item, place all, drop cursor item, drop slot stack, drop single item from slot, swap with cursor, place some, pickup one item, drop single item from cursor, pickup some items into bundle, collect items to cursor, unknown, clone stack, drop stack from cursor, drop one item from slot, pickup some into bundle, drop one item from cursor, unsupported, do nothing, place some items into bundle, drop one from cursor, pickup half, drop items from slot, swap stack with cursor, place all items, place all items into bundle, collect to cursor, pickup some items, drop slot, drop items from cursor, hotbar move and readd, shift move, custom, place all into bundle, pickup single, pickup items from bundle, place one item, hotbar swap items, drop one from slot, place some items, place one, pickup half stack, instant move, hotbar swap"
      ],
      "description": [
        "What player just did in inventory event. Note that when in creative game mode, most actions do not work correctly."
      ],
      "requirements": null,
      "examples": [
        ""
      ]
    },
    {
      "id": "clicktype",
      "name": "Click Type",
      "since": "2.2-dev16b, 2.2-dev35 (renamed to click type)",
      "patterns": [
        "lmb, number key, mmb, rmb, drop item, drop key, window border using left mouse button, unknown, window border using right mouse, shift+rmb, unsupported, shift+lmb, ctrl+q, swap shield, left mouse button, left mouse with shift, left mouse, 0-9, double click, double click using mouse, border using rmb, right mouse button, right mouse button with shift, border using lmb, middle mouse, drop key with control, window border using right mouse button, swap offhand, custom, q, right mouse with shift, middle mouse button, drop stack, left mouse button with shift, right mouse, creative action"
      ],
      "description": [
        "Click type, mostly for inventory events. Tells exactly which keys/buttons player pressed, assuming that default keybindings are used in client side."
      ],
      "requirements": null,
      "examples": [
        ""
      ]
    },
    {
      "id": "inventorytype",
      "name": "Inventory Type",
      "since": "2.2-dev32",
      "patterns": [
        "barrel inventory, a loom inventory, a blast furnace inventory, workbench inventory, ender chest inventory, loom inventory, bookshelf inventory, a workbench inventory, hopper inventory, decorated pot inventory, a merchant inventory, a hopper inventory, an ender chest inventory, new smithing table, a jukebox, beacon inventory, shulker box inventory, a barrel inventory, a shulker box inventory, lectern inventory, chest inventory, a villager inventory, a smoker inventory, a brewing stand inventory, a smithing inventory, chiseled bookshelf inventory, grindstone inventory, a crafter inventory, a crafting table inventory, a player inventory, furnace inventory, a creative inventory, blast furnace inventory, upgrade gear, a composter inventory, an enchanting table inventory, jukebox, a dropper inventory, a cartography table inventory, a upgrade gear, smoker inventory, composter inventory, a chest inventory, upgrade gear table, a upgrade gear table, dispenser inventory, player inventory, stonecutter inventory, a stonecutter inventory, a lectern inventory, merchant inventory, cartography table inventory, a new smithing table, a chiseled bookshelf inventory, a furnace inventory, anvil inventory, a bookshelf inventory, a dispenser inventory, a grindstone inventory, a decorated pot inventory, smithing inventory, dropper inventory, brewing stand inventory, villager inventory, enchanting table inventory, a beacon inventory, crafter inventory, creative inventory, crafting table inventory, an anvil inventory"
      ],
      "description": [
        "Minecraft has several different inventory types with their own use cases."
      ],
      "requirements": null,
      "examples": [
        ""
      ]
    },
    {
      "id": "player",
      "name": "Player",
      "since": "1.0",
      "patterns": [
        "Parsing an offline player as a player (online) will return nothing (none), for that case you would need to parse as offlineplayer which only returns nothing (none) if player doesn't exist in Minecraft databases (name not taken) otherwise it will return the player regardless of their online status."
      ],
      "description": [
        "A player. Depending on whether a player is online or offline several actions can be performed with them, though you won't get any errors when using effects that only work if the player is online (e.g. changing their inventory) on an offline player.",
        "You have two possibilities to use players as command arguments: &lt;player&gt; and &lt;offline player&gt;. The first requires that the player is online and also accepts only part of the name, while the latter doesn't require that the player is online, but the player's name has to be entered exactly."
      ],
      "requirements": null,
      "examples": [
        "set {_p} to \"Notch\" parsed as a player # returns <none> unless Notch is actually online or starts with Notch like Notchan",
        "set {_p} to \"N\" parsed as a player # returns Notch if Notch is online because their name starts with 'N' (case insensitive) however, it would return nothing if no player whose name starts with 'N' is online."
      ]
    },
    {
      "id": "offlineplayer",
      "name": "Offline Player",
      "since": "2.0 beta 8",
      "patterns": [
        "Parsing an offline player as a player (online) will return nothing (none), for that case you would need to parse as offlineplayer which only returns nothing (none) if player doesn't exist in Minecraft databases (name not taken) otherwise it will return the player regardless of their online status."
      ],
      "description": [
        "A player that is possibly offline. See <a href='#player'>player</a> for more information. Please note that while all effects and conditions that require a player can be used with an offline player as well, they will not work if the player is not actually online."
      ],
      "requirements": null,
      "examples": [
        "set {_p} to \"Notch\" parsed as an offlineplayer # returns Notch even if they're offline"
      ]
    },
    {
      "id": "gamemode",
      "name": "Game Mode",
      "since": "1.0",
      "patterns": [
        "adventure, survival, spectator, creative"
      ],
      "description": [
        "The game modes survival, creative, adventure and spectator."
      ],
      "requirements": null,
      "examples": [
        "player's gamemode is survival",
        "set the player argument's game mode to creative"
      ]
    },
    {
      "id": "potioneffect",
      "name": "Potion Effect",
      "since": "2.5.2",
      "patterns": [
        "speed of tier 1 for 10 seconds"
      ],
      "description": [
        "A potion effect, including the potion effect type, tier and duration."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "potioneffecttype",
      "name": "Potion Effect Type",
      "since": "",
      "patterns": [
        "absorption, bad luck, bad omen, blindness, conduit power, confusion, damage, damage resistance, darkness, dolphin's grace, dolphins grace, fast digging, fast mining, fire immunity, fire resistance, floating, glowing, haste, health, health boost, hero of the village, hunger, increase damage, increased damage, infested, instant damage, instant health, invisibility, jump, jump boost, levitation, luck, max health boost, maximum health boost, mining fatigue, nausea, night vision, oozing, poison, raid omen, reduce damage, reduced damage, regeneration, resistance, saturation, slow, slow digging, slow fall, slow falling, slow mining, slowness, speed, strength, swiftness, trial omen, unluck, water breathing, weakness, weaving, wind charged, wither, wither effect, wither potion effect"
      ],
      "description": [
        "A potion effect type, e.g. 'strength' or 'swiftness'."
      ],
      "requirements": null,
      "examples": [
        "apply swiftness 5 to the player",
        "apply potion of speed 2 to the player for 60 seconds",
        "remove invisibility from the victim"
      ]
    },
    {
      "id": "chunk",
      "name": "Chunk",
      "since": "2.0",
      "patterns": null,
      "description": [
        "A chunk is a cuboid of 16×16×128 (x×z×y) blocks. Chunks are spread on a fixed rectangular grid in their world."
      ],
      "requirements": null,
      "examples": [
        ""
      ]
    },
    {
      "id": "enchantment",
      "name": "Enchantment",
      "since": "1.4.6",
      "patterns": [
        "aqua affinity, bane of arthropods, binding curse, blast protection, breach, channeling, channelling, curse of binding, curse of vanishing, density, depth strider, efficiency, feather falling, fire aspect, fire protection, flame, fortune, frost walker, impaling, infinity, knockback, looting, loyalty, luck of the sea, lure, mending, multi-shot, multishot, piercing, power, projectile protection, protection, punch, quick charge, respiration, riptide, sharpness, silk touch, smite, soul speed, sweeping edge, swift sneak, thorns, unbreaking, vanishing curse, wind burst"
      ],
      "description": [
        "An enchantment, e.g. 'sharpness' or 'fortune'. Unlike <a href='#enchantmenttype'>enchantment type</a> this type has no level, but you usually don't need to use this type anyway.",
        "NOTE: Minecraft namespaces are supported, ex: 'minecraft:basalt_deltas'.",
        "As of Minecraft 1.21 this will also support custom enchantments using namespaces, ex: 'myenchants:explosive'."
      ],
      "requirements": null,
      "examples": [
        ""
      ]
    },
    {
      "id": "teleportcause",
      "name": "Teleport Cause",
      "since": "2.2-dev35",
      "patterns": [
        "consumable effect teleport causes, bed exit, nether portal, ender gateway, exiting bed, ender portal, command, unknown, plugin, dismounted, ender pearl, spectator, spectate, end gateway, exit bed, gateway, dismount, end portal"
      ],
      "description": [
        "The teleport cause in a <a href='events.html#teleport'>teleport</a> event."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "spawnreason",
      "name": "Spawn Reason",
      "since": "2.3",
      "patterns": [
        "dispense egg, egg, village defense, ocelot baby, silverfish trap, village invading, trap, dispensing egg, shoulder, drowned, metamorphosis, lightning, silverfish reveal, spell, built iron golem, natural, trial mob spawner, village invasion, frozen, mount, build wither, built wither, iron golem defense, ender pearl, creature spawner, reinforcements, build snowman, build iron golem, breeding, raid, ominous item spawner, infection, customized, potion effect, spawn egg, jockey, beehive, default, release from bucket, golem defense, patrol, slime split, infected, sheared, mob spawner, nether portal, trial spawner, shear, perching, custom, built snowman, chunk generation, breed, command, duplication, explosion, spawner, cured, enchantment, trial creature spawner, customised, piglin zombification"
      ],
      "description": [
        "The spawn reason in a <a href='events.html#spawn'>spawn</a> event."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "cachedservericon",
      "name": "Server Icon",
      "since": "2.3",
      "patterns": null,
      "description": [
        "A server icon that was loaded using the <a href='effects.html#EffLoadServerIcon'>load server icon</a> effect."
      ],
      "requirements": null,
      "examples": [
        ""
      ]
    },
    {
      "id": "FireworkType",
      "name": "Firework Type",
      "since": "2.4",
      "patterns": [
        "small, ball, star shaped, large, star, creeper face, small ball, large ball, burst, ball large, creeper"
      ],
      "description": [
        "The type of a <a href='#fireworkeffect'>fireworkeffect</a>."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "fireworkeffect",
      "name": "Firework Effect",
      "since": "2.4",
      "patterns": [
        "See <a href='/classes.html#FireworkType'>Firework Types</a>"
      ],
      "description": [
        "A configuration of effects that defines the firework when exploded",
        "which can be used in the <a href='effects.html#EffFireworkLaunch'>launch firework</a> effect.",
        "See the <a href='expressions.html#ExprFireworkEffect'>firework effect</a> expression for detailed patterns."
      ],
      "requirements": null,
      "examples": [
        "launch flickering trailing burst firework colored blue and green at player",
        "launch trailing flickering star colored purple, yellow, blue, green and red fading to pink at target entity",
        "launch ball large colored red, purple and white fading to light green and black at player's location with duration 1"
      ]
    },
    {
      "id": "difficulty",
      "name": "Difficulty",
      "since": "2.3",
      "patterns": [
        "normal, medium, hard, easy, peaceful"
      ],
      "description": [
        "The difficulty of a <a href='#world'>world</a>."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "resourcepackstate",
      "name": "Resource Pack State",
      "since": "2.4",
      "patterns": [
        "discarded, refused, rejected, failed reload, accepted, failed, failed to reload, failed to download, downloaded, successfully loaded, accept, fail, successfully load, refuse, declined, successfully install, success, reject, decline, successfully installed, download fail, invalid url"
      ],
      "description": [
        "The state in a <a href='events.html#resource_pack_request_action'>resource pack request response</a> event."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "soundcategory",
      "name": "Sound Category",
      "since": "2.4",
      "patterns": [
        "hostile creatures category, speech category, records category, friendly creature category, noteblock category, hostile creature category, note block category, voice category, ambient category, noteblocks category, note blocks category, weather category, block category, friendly mob category, jukebox category, hostile mob category, master category, master volume category, hostile category, record category, blocks category, environment category, jukeboxes category, player category, players category, hostile mobs category, friendly mobs category, music category, friendly creatures category, neutral category"
      ],
      "description": [
        "The category of a sound, they are used for sound options of Minecraft. See the <a href='effects.html#EffPlaySound'>play sound</a> and <a href='effects.html#EffStopSound'>stop sound</a> effects."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "gene",
      "name": "Gene",
      "since": "2.4",
      "patterns": [
        "normal, lazy, happy, worried, worrisome, aggressive, brown, brownish, savage, playful, wild, weak"
      ],
      "description": [
        "Represents a Panda's main or hidden gene. See <a href='https://minecraft.wiki/w/Panda#Genetics'>genetics</a> for more info."
      ],
      "requirements": [
        "Minecraft 1.14 or newer"
      ],
      "examples": null
    },
    {
      "id": "healreason",
      "name": "Heal Reason",
      "since": "2.5",
      "patterns": [
        "an ender crystal, magic, a magic regeneration, magic regeneration, fed, sated, a magic regen, regen potion, a wither spawn, peaceful, unknown, a regeneration potion, consuming, a wither effect, peaceful regeneration, wither summoning, healing potion, wither potion, an end crystal, satiated, regeneration potion, potion, satisfied, ingesting, withered, custom, a wither spawning, end crystal, eating, wither spawning, a wither summoning, wither effect, a plugin, a regen potion, plugin, withering, a potion, wither spawn, a healing potion, ender crystal, magic regen, wither, peaceful regen"
      ],
      "description": [
        "The health regain reason in a <a href='events.html#heal'>heal</a> event."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "CatType",
      "name": "Cat Type",
      "since": "2.4",
      "patterns": [
        "all black, black, british shorthair, calico, jellie, persian, ragdoll, red, siamese, tabby, white"
      ],
      "description": [
        "Represents the race/type of a cat entity.",
        "NOTE: Minecraft namespaces are supported, ex: 'minecraft:british_shorthair'."
      ],
      "requirements": [
        "Minecraft 1.14 or newer"
      ],
      "examples": null
    },
    {
      "id": "gamerule",
      "name": "Gamerule",
      "since": "2.5",
      "patterns": [
        "tntExplosionDropDecay, globalSoundEvents, enderPearlsVanishOnDeath, doFireTick, maxCommandChainLength, doVinesSpread, disableElytraMovementCheck, lavaSourceConversion, commandBlockOutput, forgiveDeadPlayers, playersNetherPortalCreativeDelay, doMobSpawning, maxEntityCramming, tntExplodes, allowFireTicksAwayFromPlayer, universalAnger, playersSleepingPercentage, snowAccumulationHeight, doImmediateRespawn, blockExplosionDropDecay, naturalRegeneration, doMobLoot, fallDamage, doEntityDrops, randomTickSpeed, playersNetherPortalDefaultDelay, spawnRadius, freezeDamage, sendCommandFeedback, doWardenSpawning, fireDamage, reducedDebugInfo, waterSourceConversion, projectilesCanBreakBlocks, announceAdvancements, drowningDamage, spawnChunkRadius, disableRaids, doWeatherCycle, mobExplosionDropDecay, doDaylightCycle, showDeathMessages, doTileDrops, doInsomnia, keepInventory, disablePlayerMovementCheck, doLimitedCrafting, mobGriefing, doTraderSpawning, commandModificationBlockLimit, logAdminCommands, minecartMaxSpeed, spectatorsGenerateChunks, doPatrolSpawning, maxCommandForkCount"
      ],
      "description": [
        "A gamerule"
      ],
      "requirements": [
        "Minecraft 1.13 or newer"
      ],
      "examples": null
    },
    {
      "id": "enchantmentoffer",
      "name": "Enchantment Offer",
      "since": "2.5",
      "patterns": null,
      "description": [
        "The enchantmentoffer in an enchant prepare event."
      ],
      "requirements": null,
      "examples": [
        "on enchant prepare:",
        "\tset enchant offer 1 to sharpness 1",
        "\tset the cost of enchant offer 1 to 10 levels"
      ]
    },
    {
      "id": "attributetype",
      "name": "Attribute Type",
      "since": "2.5",
      "patterns": [
        "armor, armor toughness, armour, armour toughness, attack damage, attack knockback, attack speed, block break speed, block interaction range, burning time, entity interaction range, explosion knockback resistance, fall damage multiplier, flying speed, follow range, generic armor, generic armor toughness, generic armour, generic armour toughness, generic attack damage, generic attack knockback, generic attack speed, generic burning time, generic explosion knockback resistance, generic fall damage multiplier, generic flying speed, generic follow range, generic gravity, generic jump strength, generic knockback resistance, generic luck, generic max absorption, generic max health, generic movement efficiency, generic movement speed, generic oxygen bonus, generic safe fall distance, generic scale, generic step height, generic tempt range, generic water movement efficiency, gravity, horse jump strength, jump strength, knockback resistance, luck, max absorption, max health, mining efficiency, movement efficiency, movement speed, oxygen bonus, player block break speed, player block interaction range, player entity interaction range, player mining efficiency, player sneaking speed, player submerged mining speed, player sweeping damage ratio, safe fall distance, scale, sneaking speed, spawn reinforcements, step height, submerged mining speed, sweeping damage ratio, tempt range, water movement efficiency, zombie spawn reinforcements"
      ],
      "description": [
        "Represents the type of an attribute. Note that this type does not contain any numerical values.See <a href='https://minecraft.wiki/w/Attribute#Attributes'>attribute types</a> for more info.",
        "NOTE: Minecraft namespaces are supported, ex: 'minecraft:generic.attack_damage'."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "environment",
      "name": "World Environment",
      "since": "2.7",
      "patterns": [
        "normal, nether, the end, the overworld, custom, the nether, end, overworld"
      ],
      "description": [
        "Represents the environment of a world."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "moonphase",
      "name": "Moon Phase",
      "since": "2.7",
      "patterns": [
        "last quarter, waning crescent, waxing gibbous, full moon, waning gibbous, waxing crescent, new moon, first quarter"
      ],
      "description": [
        "Represents the phase of a moon."
      ],
      "requirements": [
        "Paper 1.16+"
      ],
      "examples": null
    },
    {
      "id": "quitreason",
      "name": "Quit Reason",
      "since": "2.8.0",
      "patterns": [
        "disconnected, erroneous state, kicked, quit, timed out, erroneous"
      ],
      "description": [
        "Represents a quit reason from a <a href='/events.html#quit'>player quit server event</a>."
      ],
      "requirements": [
        "Paper 1.16.5+"
      ],
      "examples": null
    },
    {
      "id": "inventoryclosereason",
      "name": "Inventory Close Reasons",
      "since": "2.8.0",
      "patterns": [
        "disconnect, death, teleport, cannot use, new opened, unknown, can't use, unloaded, disconnected, plugin, can not use, open new, player"
      ],
      "description": [
        "The inventory close reason in an <a href='/events.html#inventory_close'>inventory close event</a>."
      ],
      "requirements": [
        "Paper"
      ],
      "examples": null
    },
    {
      "id": "transformreason",
      "name": "Transform Reason",
      "since": "2.8.0",
      "patterns": [
        "infection, magma slime split, villager infection, tadpole metamorphosis, drowning, creeper super charge, unknown, split, tadpole converting, metamorphosis, skeleton converting to stray, lightning, slime split, entity drowning, slime splitting, zombie drowning, zombie curing, skeleton freeze, entity freezing, zombie converting to drowned, curing, entity freeze, skeleton freezing, mooshroom shear, zombie cure, tadpole converting to frog, mooshroom shearing, magma slime splitting, piglin zombification"
      ],
      "description": [
        "Represents a transform reason of an <a href='events.html#entity transform'>entity transform event</a>."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "unleashreason",
      "name": "Unleash Reason",
      "since": "2.10",
      "patterns": [
        "player unleashed, distance, unleashed by player, player unleash, holder (gone|disappeared), unknown"
      ],
      "description": [
        "Represents an unleash reason of an unleash event."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "itemflag",
      "name": "Item Flag",
      "since": "2.10",
      "patterns": [
        "hide unbreakable, hide unbreakable status, hide destroys, hide additional tooltip, destroys hidden, hide enchants, stored enchantments hidden, hidden destroys, hidden stored enchants, dye hidden, stored enchants hidden, hidden enchants, hidden unbreakable status, hide armour trim, hidden stored enchantments, hide stored enchants, hide stored enchantments, hide attributes, hidden additional tooltip, hidden armor trim, hidden placed on, additional tooltip hidden, enchants hidden, enchantments hidden, attributes hidden, unbreakable status hidden, hidden dye color, hidden armour trim, unbreakable hidden, dye color hidden, hide enchantments, armour trim hidden, hidden unbreakable, hide dye color, hidden attributes, armor trim hidden, hide destroyable blocks, hide placed on, hidden dye, hide armor trim, hide breakable blocks, placed on hidden, hide dye"
      ],
      "description": [
        "Represents flags that may be applied to hide certain attributes of an item."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "entitypotioncause",
      "name": "Entity Potion Cause",
      "since": "2.10",
      "patterns": [
        "patrol captain, axolotl, death, removal by resurrection, beacon effect, potion drunk, illusion, unknown, drinking potion, expired, pillager captain, attack, villager trade, spawned spider, wither rose infliction, conversion, enter area effect cloud, conduit effect, command, food, drinking milk, plugin, converted, spider spawn, splash potion, warden, expiration, potion splash, dolphin boost, arrow infliction, turtle helmet effect"
      ],
      "description": [
        "Represents the cause of the action of a potion effect on an entity, e.g. arrow, command"
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "WolfVariant",
      "name": "Wolf Variant",
      "since": "2.10",
      "patterns": [
        "ashen, black, chestnut, pale, rusty, snowy, spotted, striped, woods"
      ],
      "description": [
        "Represents the variant of a wolf entity.",
        "NOTE: Minecraft namespaces are supported, ex: 'minecraft:ashen'."
      ],
      "requirements": [
        "Minecraft 1.21+"
      ],
      "examples": null
    },
    {
      "id": "experiencecooldownchangereason",
      "name": "Experience Cooldown Change Reason",
      "since": "2.10",
      "patterns": [
        "plugin, pickup orb, orb pickup"
      ],
      "description": [
        "Represents a change reason of an <a href='events.html#experience cooldown change event'>experience cooldown change event</a>."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "villagerprofession",
      "name": "Villager Profession",
      "since": "2.10",
      "patterns": [
        "armorer, armorer profession, armourer, armourer profession, butcher, butcher profession, cartographer, cartographer profession, cleric, cleric profession, farmer, farmer profession, fisherman, fisherman profession, fletcher, fletcher profession, leatherworker, leatherworker profession, librarian, librarian profession, mason, mason profession, nitwit, nitwit profession, no profession, none, none profession, shepherd, shepherd profession, toolsmith, toolsmith profession, unemployed, weaponsmith, weaponsmith profession"
      ],
      "description": [
        "Represents the different professions of villagers."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "entitysnapshot",
      "name": "Entity Snapshot",
      "since": "2.10",
      "patterns": null,
      "description": [
        "Represents a snapshot of an entity's data.",
        "This includes all of the data associated with an entity (its name, health, attributes, etc.), at the time this expression is used. Essentially, these are a way to create templates for entities.",
        "Individual attributes of a snapshot cannot be modified or retrieved."
      ],
      "requirements": [
        "Minecraft 1.20.2+"
      ],
      "examples": null
    },
    {
      "id": "worldborder",
      "name": "World Border",
      "since": "2.11",
      "patterns": null,
      "description": [
        "Represents the border of a world or player."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "bannerpattern",
      "name": "Banner Pattern",
      "since": "2.10",
      "patterns": null,
      "description": [
        "Represents a banner pattern."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "bannerpatterntype",
      "name": "Banner Pattern Type",
      "since": "2.10",
      "patterns": [
        "base, base banner pattern, border, border banner pattern, bordure banner pattern, bordure indented banner pattern, bottom left square banner pattern, bottom right square banner pattern, bottom stripe banner pattern, bottom triangle banner pattern, bricks, bricks banner pattern, center stripe banner pattern, circle, circle banner pattern, creeper, creeper banner pattern, creeper charged banner pattern, cross, cross banner pattern, curly border, curly border banner pattern, diagonal left, diagonal right, diagonal up left, diagonal up left banner pattern, diagonal up right, diagonal up right banner pattern, down left stripe banner pattern, down right stripe banner pattern, field masoned banner pattern, flow, flow banner pattern, flower, flower banner pattern, globe, globe banner pattern, gradient, gradient banner pattern, gradient up, gradient up banner pattern, guster, guster banner pattern, half horizontal, half horizontal bottom, half vertical, half vertical right, horizontal bottom half banner pattern, horizontal half banner pattern, left diagonal banner pattern, left stripe banner pattern, middle stripe banner pattern, mojang, mojang banner pattern, piglin, piglin banner pattern, rhombus, rhombus banner pattern, right diagonal banner pattern, right stripe banner pattern, right vertical half banner pattern, skull, skull banner pattern, small stripes, small stripes banner pattern, snout banner pattern, square bottom left, square bottom right, square top left, square top right, straight cross, straight cross banner pattern, stripe bottom, stripe center, stripe downleft, stripe downright, stripe left, stripe middle, stripe right, stripe top, tbottom triangles banner pattern, thing banner pattern, top left square banner pattern, top right square banner pattern, top stripe banner pattern, top triangle banner pattern, top triangles banner pattern, triangle bottom, triangle top, triangles bottom, triangles top, vertical half banner pattern"
      ],
      "description": [
        "Represents the various banner patterns that can be applied to a banner."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "teleportflag",
      "name": "Teleport Flag",
      "since": "2.10",
      "patterns": [
        "passengers, xyz velocity, z velocity, yaw velocity, inventory, pitch velocity, vehicle, opened inventory, open inventory, x velocity, passenger, pitch and yaw velocity, yaw and pitch velocity, directional velocity, y velocity"
      ],
      "description": [
        "Teleport Flags are settings to retain during a teleport."
      ],
      "requirements": [
        "Paper 1.19+"
      ],
      "examples": null
    },
    {
      "id": "vehicle",
      "name": "Vehicle",
      "since": "2.10.2",
      "patterns": null,
      "description": [
        "Represents a vehicle."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "equipmentslot",
      "name": "Equipment Slot",
      "since": "2.11",
      "patterns": [
        "off hand, chestplate slot, head slot, hand slot, main hand slot, boots slot, feet slot, body slot, body armour slot, leggings slot, helmet slot, off hand slot, saddle equipment slots, chestplate, legs slot, helmet, boots, tool slot, main hand, body armor slot, leggings, chest slot"
      ],
      "description": [
        "Represents an equipment slot of an entity."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "PigVariant",
      "name": "Pig Variant",
      "since": "INSERT VERSION",
      "patterns": [
        "cold, temperate, warm"
      ],
      "description": [
        "Represents the variant of a pig entity.",
        "NOTE: Minecraft namespaces are supported, ex: 'minecraft:warm'."
      ],
      "requirements": [
        "Minecraft 1.21.5+"
      ],
      "examples": null
    },
    {
      "id": "villagercareerchangereason",
      "name": "Villager Career Change Reason",
      "since": "INSERT VERSION",
      "patterns": [
        "losing job, employment"
      ],
      "description": [
        "Represents a reason why a villager changed its career."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "fishingstate",
      "name": "Fishing State",
      "since": "2.11",
      "patterns": [
        "lured, bobber in ground, fish escaped, entity caught, fishing, fish lured, fishing rod cast, reel in, caught fish, caught entity, fishing line cast, fish escape, fish bite, bite, rod cast, in ground, failed attempt, fish caught"
      ],
      "description": [
        "Represents the different states of a fishing event."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "display",
      "name": "Display Entity",
      "since": "2.10",
      "patterns": null,
      "description": [
        "A text, block or item display entity."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "billboard",
      "name": "Display Billboard",
      "since": "2.10",
      "patterns": [
        "vertical pivot, horizontal, middle, horizontal pivot, center pivot, center, fixed, vertical"
      ],
      "description": [
        "Represents the billboard setting of a display."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "textalignment",
      "name": "Display Text Alignment",
      "since": "2.10",
      "patterns": [
        "middle aligned, centered, right aligned, center aligned, left aligned"
      ],
      "description": [
        "Represents the text alignment setting of a text display."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "itemdisplaytransform",
      "name": "Item Display Transforms",
      "since": "2.10",
      "patterns": [
        "first person left handed, left handed in first person, right handed in third person, first person left hand, no transform, the ground, third person right hand, third person right handed, right handed in first person, menu, head, third person left hand, first person right handed, first person right hand, fixed position, left handed in third person, gui, ground, fixed, third person left handed"
      ],
      "description": [
        "Represents the transform setting of an item display."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "inputkey",
      "name": "Input Key",
      "since": "2.10",
      "patterns": [
        "left movement key, forward movement key, right movement key, backward key, left key, sprint key, forward key, right key, jumping key, sneaking key, jump key, sneak key, sprinting key, backward movement key"
      ],
      "description": [
        "Represents a movement input key that is pressed by a player."
      ],
      "requirements": [
        "Minecraft 1.21.3+"
      ],
      "examples": null
    },
    {
      "id": "minecrafttag",
      "name": "Minecraft Tag",
      "since": "2.10",
      "patterns": null,
      "description": [
        "A tag that classifies a material, or entity."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "loottable",
      "name": "Loot Table",
      "since": "2.10",
      "patterns": null,
      "description": [
        "Loot tables represent what items should be in naturally generated containers, what items should be dropped when killing a mob, or what items can be fished.",
        "You can find more information about this in https://minecraft.wiki/w/Loot_table"
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "lootcontext",
      "name": "Loot Context",
      "since": "2.10",
      "patterns": null,
      "description": [
        "Represents additional information a loot table can use to modify its generated loot.",
        "",
        "Some loot tables will require some values (i.e. looter, location, looted entity) in a loot context when generating loot whereas others may not.",
        "For example, the loot table of a simple dungeon chest will only require a location, whereas the loot table of a cow will require a looting player, looted entity, and location.",
        "You can find more information about this in https://minecraft.wiki/w/Loot_context"
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "money",
      "name": "Money",
      "since": "2.0",
      "patterns": [
        "&lt;number&gt; $ or $ &lt;number&gt;, where '$' is your server's currency, e.g. '10 rupees' or '£5.00'"
      ],
      "description": [
        "A certain amount of money. Please note that this differs from <a href='#number'>numbers</a> as it includes a currency symbol or name, but usually the two are interchangeable, e.g. you can both <code>add 100$ to the player's balance</code> and <code>add 100 to the player's balance</code>."
      ],
      "requirements": [
        "Vault",
        "an economy plugin that supports Vault"
      ],
      "examples": [
        "add 10£ to the player's account",
        "remove Fr. 9.95 from the player's money",
        "set the victim's money to 0",
        "increase the attacker's balance by the level of the victim * 100"
      ]
    },
    {
      "id": "region",
      "name": "Region",
      "since": "2.1",
      "patterns": [
        "\"region name\""
      ],
      "description": [
        "A region of a regions plugin. Skript currently supports WorldGuard, Factions, GriefPrevention and PreciousStones.",
        "Please note that some regions plugins do not have named regions, some use numerical ids to identify regions, and some may have regions with the same name in different worlds, thus using regions like \"region name\" in scripts may or may not work."
      ],
      "requirements": [
        "Supported regions plugin"
      ],
      "examples": [
        ""
      ]
    },
    {
      "id": "timespan",
      "name": "Timespan",
      "since": "1.0, 2.6.1 (weeks, months, years)",
      "patterns": [
        "&lt;number&gt; [minecraft/mc/real/rl/irl] ticks/seconds/minutes/hours/days/weeks/months/years [[,/and] &lt;more...&gt;]",
        "[]##:##[.####] ([]minutes:seconds[.milliseconds])"
      ],
      "description": [
        "A timespan is a difference of two different dates or times, e.g '10 minutes'. Timespans are always displayed as real life time, but can be defined as minecraft time, e.g. '5 minecraft days and 12 hours'.",
        "NOTE: Months always have the value of 30 days, and years of 365 days.",
        "See <a href='#date'>date</a> and <a href='#time'>time</a> for the other time types of Skript."
      ],
      "requirements": null,
      "examples": [
        "every 5 minecraft days:",
        "\twait a minecraft second and 5 ticks",
        "every 10 mc days and 12 hours:",
        "\thalt for 12.7 irl minutes, 12 hours and 120.5 seconds"
      ]
    },
    {
      "id": "enchantmenttype",
      "name": "Enchantment Type",
      "since": "1.4.6",
      "patterns": [
        "&lt;enchantment&gt; [&lt;level&gt;]"
      ],
      "description": [
        "An enchantment with an optional level, e.g. 'sharpness 2' or 'fortune'."
      ],
      "requirements": null,
      "examples": [
        "enchant the player's tool with sharpness 5",
        "helmet is enchanted with waterbreathing"
      ]
    },
    {
      "id": "executable",
      "name": "Executable",
      "since": "2.10",
      "patterns": null,
      "description": [
        "Something that can be executed (run) and may accept arguments, e.g. a function.",
        "This may also return a result."
      ],
      "requirements": null,
      "examples": [
        "run {_function} with arguments 1 and true"
      ]
    },
    {
      "id": "livingentity",
      "name": "Living Entity",
      "since": "1.0",
      "patterns": [
        "see <a href='#entity'>entity</a>, but ignore inanimate objects"
      ],
      "description": [
        "A living <a href='#entity'>entity</a>, i.e. a mob or <a href='#player'>player</a>, not inanimate entities like <a href='#projectile'>projectiles</a> or dropped items."
      ],
      "requirements": null,
      "examples": [
        "spawn 5 powered creepers",
        "shoot a zombie from the creeper"
      ]
    },
    {
      "id": "number",
      "name": "Number",
      "since": "1.0",
      "patterns": [
        "[-]###[.###] [e[+|-]###] [[in ](rad[ian][s]|deg[ree][s])]"
      ],
      "description": [
        "A number, e.g. 2.5, 3, -9812454, 30 degrees or 3.14 radians.",
        "Please note that many expressions only need integers, i.e. will discard any fractional parts of any numbers without producing an error.",
        "Radians will be converted to degrees."
      ],
      "requirements": null,
      "examples": [
        "set the player's health to 5.5",
        "set {_temp} to 2*{_temp} - 2.5",
        "set {_angle} to 3.14 in radians # will be converted to degrees"
      ]
    },
    {
      "id": "itemtype",
      "name": "Item Type",
      "since": "1.0",
      "patterns": [
        "[&lt;number&gt; [of]] [all/every] &lt;alias&gt; [of &lt;enchantment&gt; [&lt;level&gt;] [,/and &lt;more enchantments...&gt;]]"
      ],
      "description": [
        "An item type is an alias that can result in different items when added to an inventory, and unlike <a href='#itemstack'>items</a> they are well suited for checking whether an inventory contains a certain item or whether a certain item is of a certain type.",
        "An item type can also have one or more <a href='#enchantmenttype'>enchantments</a> with or without a specific level defined, and can optionally start with 'all' or 'every' to make this item type represent <i>all</i> types that the alias represents, including data ranges."
      ],
      "requirements": null,
      "examples": [
        "give 4 torches to the player",
        "add oak slab to the inventory of the block",
        "player's tool is a diamond sword of sharpness",
        "block is dirt or farmland"
      ]
    },
    {
      "id": "visualeffect",
      "name": "Visual Effect",
      "since": "2.1",
      "patterns": [
        "smoke, potion break, ender signal, mobspawner flames, arrow particles, jumping rabbit, hurt, wolf smoke, wolf hearts, wolf shaking, sheep eating, iron golem offering rose, witch magic, zombie turning to a villager, firework explosion, love hearts, squid rotation reset, entity poof, guardian target, block with shield, shield break, armor stand hit, hurt by thorns, iron golem sheathing rose, resurrection by totem, hurt by drowning, hurt by explosion, poof, large explosion, explosion emitter, firework, bubble, splash, water wake, underwater, critical hit, enchanted hit, smoke, large smoke, effect, instant effect, entity effect, witch, dripping water, dripping lava, angry villager, happy villager, mycelium, note, portal, enchant, flame, lava pop, cloud, dust, snowball, slime, heart, item, block, rain, elder guardian, dragon breath, end rod, damage indicator, sweep attack, falling dust, totem of undying, spit, squid ink, bubble pop, current down, bubble column up, nautilus, dolphin, sneeze, campfire cosy smoke, campfire signal smoke, composter, flash, falling lava, landing lava, falling water, dripping honey, falling honey, landing honey, falling nectar, soul fire flame, ash, crimson spore, warped spore, soul, dripping obsidian tear, falling obsidian tear, landing obsidian tear, reverse portal, white ash, dust color transition, vibration, falling spore blossom, spore blossom air, small flame, snowflake, dripping dripstone lava, falling dripstone lava, dripping dripstone water, falling dripstone water, glow squid ink, glow, wax on, wax off, electric spark, scrape, sonic boom, sculk soul, sculk charge, sculk charge pop, shriek, cherry leaves, egg crack, dust plume, white smoke, gust, small gust, large gust emitter, small gust emitter, trial spawner detection, ominous trial spawner detection, vault connection, infested, cobweb, dust pillar, ominous spawning, raid omen, block marker"
      ],
      "description": [
        "A visible effect, e.g. particles."
      ],
      "requirements": null,
      "examples": [
        "show wolf hearts on the clicked wolf",
        "play mob spawner flames at the targeted block to the player"
      ]
    },
    {
      "id": "named",
      "name": "Any Named Thing",
      "since": "2.10",
      "patterns": null,
      "description": [
        "Something that has a name (e.g. an item)."
      ],
      "requirements": null,
      "examples": [
        "{thing}'s name"
      ]
    },
    {
      "id": "numbered",
      "name": "Any Numbered/Sized Thing",
      "since": "2.10",
      "patterns": null,
      "description": [
        "Something that has an amount or size."
      ],
      "requirements": null,
      "examples": [
        "the size of {thing}",
        "the amount of {thing}"
      ]
    },
    {
      "id": "entity",
      "name": "Entity",
      "since": "1.0",
      "patterns": [
        "player, op, wolf, tamed ocelot, powered creeper, zombie, unsaddled pig, fireball, arrow, dropped item, item frame, etc."
      ],
      "description": [
        "An entity is something in a <a href='#world'>world</a> that's not a <a href='#block'>block</a>, e.g. a <a href='#player'>player</a>, a skeleton, or a zombie, but also <a href='#projectile'>projectiles</a> like arrows, fireballs or thrown potions, or special entities like dropped items, falling blocks or paintings."
      ],
      "requirements": null,
      "examples": [
        "entity is a zombie or creeper",
        "player is an op",
        "projectile is an arrow",
        "shoot a fireball from the player"
      ]
    },
    {
      "id": "blockdata",
      "name": "Block Data",
      "since": "2.5",
      "patterns": null,
      "description": [
        "Block data is the detailed information about a block, referred to in Minecraft as BlockStates, allowing for the manipulation of different aspects of the block, including shape, waterlogging, direction the block is facing, and so much more. Information regarding each block's optional data can be found on Minecraft's Wiki. Find the block you're looking for and scroll down to 'Block States'. Different states must be separated by a semicolon (see examples). The 'minecraft:' namespace is optional, as well as are underscores."
      ],
      "requirements": null,
      "examples": [
        "set block at player to campfire[lit=false]",
        "set target block of player to oak stairs[facing=north;waterlogged=true]",
        "set block at player to grass_block[snowy=true]",
        "set loop-block to minecraft:chest[facing=north]",
        "set block above player to oak_log[axis=y]",
        "set target block of player to minecraft:oak_leaves[distance=2;persistent=false]"
      ]
    },
    {
      "id": "commandsender",
      "name": "Command Sender",
      "since": "1.0",
      "patterns": [
        "use <a href='expressions.html#LitConsole'>the console</a> for the console",
        "see <a href='#player'>player</a> for players."
      ],
      "description": [
        "A player or the console."
      ],
      "requirements": null,
      "examples": [
        "command /push [&lt;player&gt;]:",
        "\ttrigger:",
        "\t\tif arg-1 is not set:",
        "\t\t\tif command sender is console:",
        "\t\t\t\tsend \"You can't push yourself as a console :\\\" to sender",
        "\t\t\t\tstop",
        "\t\t\tpush sender upwards with force 2",
        "\t\t\tsend \"Yay!\"",
        "\t\telse:",
        "\t\t\tpush arg-1 upwards with force 2",
        "\t\t\tsend \"Yay!\" to sender and arg-1"
      ]
    },
    {
      "id": "itemstack",
      "name": "Item",
      "since": "1.0",
      "patterns": [
        "<code>[&lt;number&gt; [of]] &lt;alias&gt; [of &lt;enchantment&gt; &lt;level&gt;]</code>, Where &lt;alias&gt; must be an alias that represents exactly one item (i.e cannot be a general alias like 'sword' or 'plant')"
      ],
      "description": [
        "An item, e.g. a stack of torches, a furnace, or a wooden sword of sharpness 2. Unlike <a href='#itemtype'>item type</a> an item can only represent exactly one item (e.g. an upside-down cobblestone stair facing west), while an item type can represent a whole range of items (e.g. any cobble stone stairs regardless of direction).",
        "You don't usually need this type except when you want to make a command that only accepts an exact item.",
        "Please note that currently 'material' is exactly the same as 'item', i.e. can have an amount & enchantments."
      ],
      "requirements": null,
      "examples": [
        "set {_item} to type of the targeted block",
        "{_item} is a torch"
      ]
    },
    {
      "id": "metadataholder",
      "name": "Metadata Holder",
      "since": "2.2-dev36",
      "patterns": null,
      "description": [
        "Something that can hold metadata (e.g. an entity or block)"
      ],
      "requirements": null,
      "examples": [
        "set metadata value \"super cool\" of player to true"
      ]
    },
    {
      "id": "entitydata",
      "name": "Entity Type",
      "since": "1.3",
      "patterns": [
        "<i>Detailed usage will be added eventually</i>"
      ],
      "description": [
        "The type of an <a href='#entity'>entity</a>, e.g. player, wolf, powered creeper, etc."
      ],
      "requirements": null,
      "examples": [
        "victim is a cow",
        "spawn a creeper"
      ]
    },
    {
      "id": "entitytype",
      "name": "Entity Type with Amount",
      "since": "1.3",
      "patterns": [
        "&lt;<a href='#number'>number</a>&gt; &lt;entity type&gt;"
      ],
      "description": [
        "An <a href='#entitydata'>entity type</a> with an amount, e.g. '2 zombies'. I might remove this type in the future and make a more general 'type' type, i.e. a type that has a number and a type."
      ],
      "requirements": null,
      "examples": [
        "spawn 5 creepers behind the player"
      ]
    },
    {
      "id": "classinfo",
      "name": "Type",
      "since": "2.0",
      "patterns": [
        "See the type name patterns of all types - including this one"
      ],
      "description": [
        "Represents a type, e.g. number, object, item type, location, block, world, entity type, etc.",
        "This is mostly used for expressions like 'event-&lt;type&gt;', '&lt;type&gt;-argument', 'loop-&lt;type&gt;', etc., e.g. event-world, number-argument and loop-player."
      ],
      "requirements": null,
      "examples": [
        "{variable} is a number # check whether the variable contains a number, e.g. -1 or 5.5",
        "{variable} is a type # check whether the variable contains a type, e.g. number or player",
        "{variable} is an object # will always succeed if the variable is set as everything is an object, even types.",
        "disable PvP in the event-world",
        "kill the loop-entity"
      ]
    },
    {
      "id": "damagecause",
      "name": "Damage Cause",
      "since": "2.0",
      "patterns": [
        "sweep attack, thorns, the void, magma, a lightning, drowning, dragonfire, an attack, drown, an entity attack, melt, freeze, falling block, contact, fire, campfire, an entity explosion, lightning, a fall, entity explosion, void, a lightning strike, suffocation, suicide, wither effect, a plugin, lightning strike, entity attack, a potion, a wither, sweeping, melting, a falling block, unknown, starvation, lava, fall, hot floor, attack, a block explosion, dryout, burn, hitting wall while flying, potion, world border, flying into a wall, cramming, poison, sonic boom, suffocate, custom, kill, killed, a fire, burning, a projectile, plugin, wither potion effect, block explosion, projectile, wither, dragon's breath"
      ],
      "description": [
        "The cause/type of a <a href='events.html#damage'>damage event</a>, e.g. lava, fall, fire, drowning, explosion, poison, etc.",
        "Please note that support for this type is very rudimentary, e.g. lava, fire and burning, as well as projectile and attack are considered different types."
      ],
      "requirements": null,
      "examples": [
        ""
      ]
    },
    {
      "id": "biome",
      "name": "Biome",
      "since": "1.4.4",
      "patterns": [
        "badlands, badlands forest, bamboo jungle, basalt deltas, beach, birch forest, black forest, cherry grove, cold beach, cold ocean, cold taiga, crimson forest, dark forest, deep cold ocean, deep dark, deep frozen ocean, deep lukewarm ocean, deep ocean, desert, dripstone caves, end barrens, end highlands, end midlands, eroded badlands, eroded mesa, flower forest, forest, frozen ocean, frozen peaks, frozen river, giant spruce taiga, giant tree taiga, gravelly mountains, grove, hell, ice plains spikes, ice plains with spikes, ice spikes, jagged peaks, jungle, jungle edge, lukewarm ocean, lush caves, mangrove swamp, marsh, meadow, mesa, mesa forest, mountains, mushroom fields, mushroom island, nether, nether wastes, ocean, old growth birch forest, old growth pine taiga, old growth spruce taiga, pale garden, plains, river, roofed forest, savanna, savanna plateau, sea, shattered savanna, sky, small end islands, snowy beach, snowy plains, snowy slopes, snowy taiga, snowy tundra, soul sand valley, sparse jungle, spiked ice plains, stone shore, stony peaks, stony shore, sunflower plains, swamp, swampland, taiga, tall birch forest, the end, the void, void, warm ocean, warped forest, windswept forest, windswept gravelly hills, windswept hills, windswept savanna, wooded badlands, wooded mesa, wooded mountains"
      ],
      "description": [
        "All possible biomes Minecraft uses to generate a world.",
        "NOTE: Minecraft namespaces are supported, ex: 'minecraft:basalt_deltas'."
      ],
      "requirements": null,
      "examples": [
        "biome at the player is desert"
      ]
    },
    {
      "id": "villagertype",
      "name": "Villager Type",
      "since": "2.10",
      "patterns": [
        "desert, jungle, plains, savanna, snow, swamp, taiga"
      ],
      "description": [
        "Represents the different types of villagers. These are usually the biomes a villager can be from."
      ],
      "requirements": null,
      "examples": null
    },
    {
      "id": "object",
      "name": "Object",
      "since": "1.0",
      "patterns": null,
      "description": [
        "The supertype of all types, meaning that if %object% is used in e.g. a condition it will accept all kinds of expressions."
      ],
      "requirements": null,
      "examples": [
        ""
      ]
    }
  ],
  "structures": [
    {
      "id": "StructAliases",
      "name": "Aliases",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Used for registering custom aliases for a script."
      ],
      "patterns": [
        "aliases"
      ],
      "examples": [
        "aliases:",
        "\tblacklisted items = TNT, bedrock, obsidian, mob spawner, lava, lava bucket",
        "\tshiny swords = golden sword, iron sword, diamond sword"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "StructCommand",
      "name": "Command",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Used for registering custom commands."
      ],
      "patterns": [
        "command <.+>"
      ],
      "examples": [
        "command /broadcast <string>:",
        "\tusage: A command for broadcasting a message to all players.",
        "\tpermission: skript.command.broadcast",
        "\tpermission message: You don't have permission to broadcast messages",
        "\taliases: /bc",
        "\texecutable by: players and console",
        "\tcooldown: 15 seconds",
        "\tcooldown message: You last broadcast a message %elapsed time% ago. You can broadcast another message in %remaining time%.",
        "\tcooldown bypass: skript.command.broadcast.admin",
        "\tcooldown storage: {cooldown::%player%}",
        "\ttrigger:",
        "\t\tbroadcast the argument"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "StructFunction",
      "name": "Function",
      "since": [
        "2.2, 2.7 (local functions)"
      ],
      "deprecated": false,
      "description": [
        "Functions are structures that can be executed with arguments/parameters to run code.",
        "They can also return a value to the trigger that is executing the function.",
        "Note that local functions come before global functions execution"
      ],
      "patterns": [
        "[local] function <.+>"
      ],
      "examples": [
        "function sayMessage(message: text):",
        "\tbroadcast {_message} # our message argument is available in '{_message}'",
        "",
        "local function giveApple(amount: number) :: item:",
        "\treturn {_amount} of apple",
        "",
        "function getPoints(p: player) returns number:",
        "\treturn {points::%{_p}%}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "StructOptions",
      "name": "Options",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Options are used for replacing parts of a script with something else.",
        "For example, an option may represent a message that appears in multiple locations.",
        "Take a look at the example below that showcases this."
      ],
      "patterns": [
        "options"
      ],
      "examples": [
        "options:",
        "\tno_permission: You're missing the required permission to execute this command!",
        "",
        "command /ping:",
        "\tpermission: command.ping",
        "\tpermission message: {@no_permission}",
        "\ttrigger:",
        "\t\tmessage \"Pong!\"",
        "",
        "command /pong:",
        "\tpermission: command.pong",
        "\tpermission message: {@no_permission}",
        "\ttrigger:",
        "\t\tmessage \"Ping!\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "StructUsing",
      "name": "Using Experimental Feature",
      "since": [
        "2.9.0"
      ],
      "deprecated": false,
      "description": [
        "Place at the top of a script file to enable an optional experimental feature.",
        "Experimental features may change behavior in Skript and may contain bugs. Use at your own discretion.",
        "A list of the available experimental features can be found in the changelog for your version of Skript."
      ],
      "patterns": [
        "using [[the] experiment] <.+>"
      ],
      "examples": [
        "using 1.21",
        "using the experiment my-cool-addon-feature"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "StructVariables",
      "name": "Variables",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Used for defining variables present within a script.",
        "This section is not required, but it ensures that a variable has a value if it doesn't exist when the script is loaded."
      ],
      "patterns": [
        "variables"
      ],
      "examples": [
        "variables:",
        "\t{joins} = 0",
        "\t{balance::%player%} = 0",
        "",
        "on join:",
        "\tadd 1 to {joins}",
        "\tmessage \"Your balance is %{balance::%player%}%\"",
        ""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    }
  ],
  "sections": [
    {
      "id": "EffSecShoot",
      "name": "Shoot",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Shoots a projectile (or any other entity) from a given entity or location."
      ],
      "patterns": [
        "shoot %entity types% [from %living entities/locations%] [(at|with) (speed|velocity) %number%] [%direction%]",
        "(make|let) %living entities/locations% shoot %entity types% [(at|with) (speed|velocity) %number%] [%direction%]"
      ],
      "examples": [
        "shoot arrow from all players at speed 2",
        "shoot a pig from all players:",
        "\tadd event-entity to {_projectiles::*}"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "EffSecSpawn",
      "name": "Spawn",
      "since": [
        "1.0, 2.6.1 (with section), 2.8.6 (dropped items), 2.10 (entity snapshots)"
      ],
      "deprecated": false,
      "description": [
        "Spawns entities. This can be used as an effect and as a section.",
        "",
        "If it is used as a section, the section is run before the entity is added to the world.",
        "You can modify the entity in this section, using for example 'event-entity' or 'cow'. ",
        "Do note that other event values, such as 'player', won't work in this section.",
        "",
        "If you're spawning a display and want it to be empty on initialization, like not having a block display be stone, set hidden config node 'spawn empty displays' to true.",
        "",
        "Note that when spawning an entity via entity snapshots, the code within the section will not run instantaneously as compared to spawning normally (via 'a zombie')."
      ],
      "patterns": [
        "(spawn|summon) %entity types/entity snapshots% [%directions% %locations%]",
        "(spawn|summon) %number% of %entity types/entity snapshots% [%directions% %locations%]"
      ],
      "examples": [
        "spawn 3 creepers at the targeted block",
        "spawn a ghast 5 meters above the player",
        "spawn a zombie at the player:",
        "\tset name of the zombie to \"\"",
        "",
        "spawn a block display of a ladder[waterlogged=true] at location above player:",
        "\tset billboard of event-display to center # allows the display to rotate around the center axis"
      ],
      "events": null,
      "requirements": [
        "Minecraft 1.20.2+ (entity snapshots)"
      ],
      "keywords": null
    },
    {
      "id": "SecCatchErrors",
      "name": "Catch Runtime Errors",
      "since": [
        "INSERT VERSION"
      ],
      "deprecated": false,
      "description": [
        "Catch any runtime errors produced by code within the section. This is an in progress feature."
      ],
      "patterns": [
        "catch [run[ ]time] error[s]"
      ],
      "examples": [
        "catch runtime errors:\n\tset worldborder center of {_border} to location(0, 0, NaN value)\nif last caught runtime errors contains \"Your location can't have a NaN value as one of its components\":\n\tset worldborder center of {_border} to location(0, 0, 0)\n"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "SecConditional",
      "name": "Conditionals",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Conditional sections",
        "if: executed when its condition is true",
        "else if: executed if all previous chained conditionals weren't executed, and its condition is true",
        "else: executed if all previous chained conditionals weren't executed",
        "",
        "parse if: a special case of 'if' condition that its code will not be parsed if the condition is not true",
        "else parse if: another special case of 'else if' condition that its code will not be parsed if all previous chained conditionals weren't executed, and its condition is true"
      ],
      "patterns": [
        "else",
        "else [parse] if <.+>",
        "else [parse] if (any|at least one [of])",
        "else [parse] if [all]",
        "[parse] if (any|at least one [of])",
        "[parse] if [all]",
        "[parse] if <.+>",
        "then [run]",
        "implicit:<.+>"
      ],
      "examples": [
        "if player's health is greater than or equal to 4:",
        "\tsend \"Your health is okay so far but be careful!\"",
        "",
        "else if player's health is greater than 2:",
        "\tsend \"You need to heal ASAP, your health is very low!\"",
        "",
        "else: # Less than 2 hearts",
        "\tsend \"You are about to DIE if you don't heal NOW. You have only %player's health% heart(s)!\"",
        "",
        "parse if plugin \"SomePluginName\" is enabled: # parse if %condition%",
        "\t# This code will only be executed if the condition used is met otherwise Skript will not parse this section therefore will not give any errors/info about this section",
        ""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "SecFilter",
      "name": "Filter",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "Filters a variable list based on the supplied conditions. Unlike the filter expression, this effect maintains the indices of the filtered list.",
        "It also supports filtering based on meeting any of the given criteria, rather than all, like multi-line if statements."
      ],
      "patterns": [
        "filter %~objects% to match [any|all]"
      ],
      "examples": [
        "set {_a::*} to integers between -10 and 10",
        "",
        "filter {_a::*} to match:",
        "\tinput is a number",
        "\tmod(input, 2) = 0",
        "\tinput > 0",
        "",
        "send {_a::*} # sends 2, 4, 6, 8, and 10"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "SecLoop",
      "name": "Loop",
      "since": [
        "1.0"
      ],
      "deprecated": false,
      "description": [
        "Loop sections repeat their code with multiple values.",
        "",
        "A loop will loop through all elements of the given expression, e.g. all players, worlds, items, etc. The conditions & effects inside the loop will be executed for every of those elements, which can be accessed with ‘loop-<what>’, e.g. <code>send \"hello\" to loop-player</code>. When a condition inside a loop is not fulfilled the loop will start over with the next element of the loop. You can however use <code>stop loop</code> to exit the loop completely and resume code execution after the end of the loop.",
        "",
        "<b>Loopable Values</b>",
        "All <a href=\"/expressions.html\">expressions</a> that represent more than one value, e.g. ‘all players’, ‘worlds’, etc., as well as list variables, can be looped. You can also use a list of expressions, e.g. <code>loop the victim and the attacker</code>, to execute the same code for only a few values.",
        "",
        "<b>List Variables</b>",
        "When looping list variables, you can also use <code>loop-index</code> in addition to <code>loop-value</code> inside the loop. <code>loop-value</code> is the value of the currently looped variable, and <code>loop-index</code> is the last part of the variable's name (the part where the list variable has its asterisk *)."
      ],
      "patterns": [
        "loop %objects%"
      ],
      "examples": [
        "loop all players:",
        "\tsend \"Hello %loop-player%!\" to loop-player",
        "",
        "loop items in player's inventory:",
        "\tif loop-item is dirt:",
        "\t\tset loop-item to air",
        "",
        "loop 10 times:",
        "\tsend title \"%11 - loop-value%\" and subtitle \"seconds left until the game begins\" to player for 1 second # 10, 9, 8 etc.",
        "\twait 1 second",
        "",
        "loop {Coins::*}:",
        "\tset {Coins::%loop-index%} to loop-value + 5 # Same as \"add 5 to {Coins::%loop-index%}\" where loop-index is the uuid of the player and loop-value is the number of coins for the player",
        "",
        "loop shuffled (integers between 0 and 8):",
        "\tif all:",
        "\t\tprevious loop-value = 1",
        "\t\tloop-value = 4",
        "\t\tnext loop-value = 8",
        "\tthen:",
        "\t\t kill all players"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "SecFor",
      "name": "For Each Loop (Experimental)",
      "since": [
        "2.10"
      ],
      "deprecated": false,
      "description": [
        "A specialised loop section run for each element in a list.\nUnlike the basic loop, this is designed for extracting the key & value from pairs.\nThe loop element's key/index and value can be stored in a variable for convenience.\n\nWhen looping a simple (non-indexed) set of values, e.g. all players, the index will be the loop counter number."
      ],
      "patterns": [
        "(for [each]|loop) [value] %~object% in %objects%",
        "(for [each]|loop) (key|index) %~object% in %objects%",
        "(for [each]|loop) [key|index] %~object%(,| and) [value] %~object% in %objects%"
      ],
      "examples": [
        "for each {_player} in players:",
        "\tsend \"Hello %{_player}%!\" to {_player}",
        "",
        "loop {_item} in {list of items::*}:",
        "\tbroadcast {_item}'s name",
        "",
        "for each key {_index} in {list of items::*}:",
        "\tbroadcast {_index}",
        "",
        "loop key {_index} and value {_value} in {list of items::*}:",
        "\tbroadcast \"%{_index}% = %{_value}%\"",
        "",
        "for each {_index}, {_value} in {my list::*}:",
        "\tbroadcast \"%{_index}% = %{_value}%\""
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    },
    {
      "id": "SecWhile",
      "name": "While Loop",
      "since": [
        "2.0, 2.6 (do while)"
      ],
      "deprecated": false,
      "description": [
        "While Loop sections are loops that will just keep repeating as long as a condition is met."
      ],
      "patterns": [
        "[do] while <.+>"
      ],
      "examples": [
        "while size of all players < 5:",
        "\tsend \"More players are needed to begin the adventure\" to all players",
        "\twait 5 seconds",
        "",
        "set {_counter} to 1",
        "do while {_counter} > 1: # false but will increase {_counter} by 1 then get out",
        "\tadd 1 to {_counter}",
        "",
        "# Be careful when using while loops with conditions that are almost ",
        "# always true for a long time without using 'wait %timespan%' inside it, ",
        "# otherwise it will probably hang and crash your server.",
        "while player is online:",
        "\tgive player 1 dirt",
        "\twait 1 second # without using a delay effect the server will crash"
      ],
      "events": null,
      "requirements": null,
      "keywords": null
    }
  ],
  "functions": [
    {
      "id": "floor",
      "name": "floor",
      "since": "2.2",
      "returnType": {
        "id": "long",
        "name": ""
      },
      "description": [
        "Rounds a number down, i.e. returns the closest integer smaller than or equal to the argument."
      ],
      "examples": [
        "floor(2.34) = 2",
        "floor(2) = 2",
        "floor(2.99) = 2"
      ],
      "patterns": [
        "floor(n: number)"
      ]
    },
    {
      "id": "uuid",
      "name": "uuid",
      "since": "2.11",
      "returnType": {
        "id": "uuid",
        "name": "UUID"
      },
      "description": [
        "Returns a UUID from the given string. The string must be in the format of a UUID."
      ],
      "examples": [
        "uuid(\"069a79f4-44e9-4726-a5be-fca90e38aaf5\")"
      ],
      "patterns": [
        "uuid(uuid: string)"
      ]
    },
    {
      "id": "factorial",
      "name": "factorial",
      "since": "2.11",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Get the factorial of a number.",
        "Getting the factorial of any number above 21 will return an approximation, not an exact value.",
        "Any number after 170 will always return Infinity.",
        "Should not be used to calculate permutations or combinations manually."
      ],
      "examples": [
        "factorial(0) = 1",
        "factorial(3) = 3*2*1 = 6",
        "factorial(5) = 5*4*3*2*1 = 120",
        "factorial(171) = Infinity"
      ],
      "patterns": [
        "factorial(number: number)"
      ]
    },
    {
      "id": "concat",
      "name": "concat",
      "since": "2.9.0",
      "returnType": {
        "id": "string",
        "name": "Text"
      },
      "description": [
        "Joins the provided texts (and other things) into a single text."
      ],
      "examples": [
        "concat(\"hello \", \"there\") # hello there",
        "concat(\"foo \", 100, \" bar\") # foo 100 bar"
      ],
      "patterns": [
        "concat(texts: objects)"
      ]
    },
    {
      "id": "asin",
      "name": "asin",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "The inverse of the <a href='#sin'>sine</a>, also called arcsin. Returns result in degrees, not radians. Only returns values from -90 to 90."
      ],
      "examples": [
        "asin(0) = 0",
        "asin(1) = 90",
        "asin(0.5) = 30"
      ],
      "patterns": [
        "asin(n: number)"
      ]
    },
    {
      "id": "tan",
      "name": "tan",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "The tangent function. This is basically <code><a href='#sin'>sin</a>(arg)/<a href='#cos'>cos</a>(arg)</code>. Uses degrees, not radians."
      ],
      "examples": [
        "tan(0) = 0",
        "tan(45) = 1",
        "tan(89.99) = 5729.5779"
      ],
      "patterns": [
        "tan(n: number)"
      ]
    },
    {
      "id": "isNaN",
      "name": "isNaN",
      "since": "2.8.0",
      "returnType": {
        "id": "boolean",
        "name": "Boolean"
      },
      "description": [
        "Returns true if the input is NaN (not a number)."
      ],
      "examples": [
        "isNaN(0) # false",
        "isNaN(0/0) # true",
        "isNaN(sqrt(-1)) # true"
      ],
      "patterns": [
        "isNaN(n: number)"
      ]
    },
    {
      "id": "world",
      "name": "world",
      "since": "2.2",
      "returnType": {
        "id": "world",
        "name": "World"
      },
      "description": [
        "Gets a world from its name."
      ],
      "examples": [
        "set {_nether} to world(\"%{_world}%_nether\")"
      ],
      "patterns": [
        "world(name: string)"
      ]
    },
    {
      "id": "permutations",
      "name": "permutations",
      "since": "2.11",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Get the number of possible ordered arrangements from 1 to 'options' with each arrangement having a size equal to 'selected'",
        "For example, permutations with 3 options and an arrangement size of 1, returns 3: (1), (2), (3)",
        "Permutations with 3 options and an arrangement size of 2 returns 6: (1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)",
        "Note that the bigger the 'options' and lower the 'selected' may result in approximations or even infinity values.",
        "Permutations differ from combinations in that permutations account for the arrangement of elements within the set, whereas combinations focus on unique sets and ignore the order of elements.",
        "Example: (1, 2) and (2, 1) are two distinct permutations because the positions of '1' and '2' are different, but they represent a single combination since order doesn't matter in combinations."
      ],
      "examples": [
        "permutations(10, 2) = 90",
        "permutations(10, 4) = 5040",
        "permutations(size of {some list::*}, 2)"
      ],
      "patterns": [
        "permutations(options: number, selected: number)"
      ]
    },
    {
      "id": "mod",
      "name": "mod",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Returns the modulo of the given arguments, i.e. the remainder of the division <code>d/m</code>, where d and m are the arguments of this function.",
        "The returned value is always positive. Returns NaN (not a number) if the second argument is zero."
      ],
      "examples": [
        "mod(3, 2) = 1",
        "mod(256436, 100) = 36",
        "mod(-1, 10) = 9"
      ],
      "patterns": [
        "mod(d: number, m: number)"
      ]
    },
    {
      "id": "log",
      "name": "log",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "A logarithm, with base 10 if none is specified. This is the inverse operation to exponentiation (for positive bases only), i.e. <code>log(base ^ exponent, base) = exponent</code> for any positive number 'base' and any number 'exponent'.",
        "Another useful equation is <code>base ^ log(a, base) = a</code> for any numbers 'base' and 'a'.",
        "Please note that due to how numbers are represented in computers, these equations do not hold for all numbers, as the computed values may slightly differ from the correct value.",
        "Returns NaN (not a number) if any of the arguments are negative."
      ],
      "examples": [
        "log(100) = 2 # 10^2 = 100",
        "log(16, 2) = 4 # 2^4 = 16"
      ],
      "patterns": [
        "log(n: number, base: number = 10)"
      ]
    },
    {
      "id": "location",
      "name": "location",
      "since": "2.2",
      "returnType": {
        "id": "location",
        "name": "Location"
      },
      "description": [
        "Creates a location from a world and 3 coordinates, with an optional yaw and pitch.",
        "If for whatever reason the world is not found, it will fallback to the server's main world."
      ],
      "examples": [
        "# TELEPORTING",
        "teleport player to location(1,1,1, world \"world\")",
        "teleport player to location(1,1,1, world \"world\", 100, 0)",
        "teleport player to location(1,1,1, world \"world\", yaw of player, pitch of player)",
        "teleport player to location(1,1,1, world of player)",
        "teleport player to location(1,1,1, world(\"world\"))",
        "teleport player to location({_x}, {_y}, {_z}, {_w}, {_yaw}, {_pitch})",
        "# SETTING BLOCKS",
        "set block at location(1,1,1, world \"world\") to stone",
        "set block at location(1,1,1, world \"world\", 100, 0) to stone",
        "set block at location(1,1,1, world of player) to stone",
        "set block at location(1,1,1, world(\"world\")) to stone",
        "set block at location({_x}, {_y}, {_z}, {_w}) to stone",
        "# USING VARIABLES",
        "set {_l1} to location(1,1,1)",
        "set {_l2} to location(10,10,10)",
        "set blocks within {_l1} and {_l2} to stone",
        "if player is within {_l1} and {_l2}:",
        "# OTHER",
        "kill all entities in radius 50 around location(1,65,1, world \"world\")",
        "delete all entities in radius 25 around location(50,50,50, world \"world_nether\")",
        "ignite all entities in radius 25 around location(1,1,1, world of player)"
      ],
      "patterns": [
        "location(x: number, y: number, z: number, world: world = event-world, yaw: number = 0, pitch: number = 0)"
      ]
    },
    {
      "id": "combinations",
      "name": "combinations",
      "since": "2.11",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Get the number of possible sets from 1 to 'options' with each set having a size equal to 'selected'",
        "For example, a combination with 3 options and a set size of 1, returns 3: (1), (2), (3)",
        "A combination of 3 options with a set size of 2 returns 3: (1, 2), (1, 3), (2, 3)",
        "Note that the bigger the 'options' and lower the 'selected' may result in approximations or even infinity values.",
        "Combinations differ from permutations in that combinations focus on unique sets, ignoring the order of elements, whereas permutations account for the arrangement of elements within the set.",
        "Example: (1, 2) and (2, 1) represent a single combination since order doesn't matter in combinations, but they are two distinct permutations because permutations consider the order."
      ],
      "examples": [
        "combinations(10, 8) = 45",
        "combinations(5, 3) = 10",
        "combinations(size of {some list::*}, 2)"
      ],
      "patterns": [
        "combinations(options: number, selected: number)"
      ]
    },
    {
      "id": "axisAngle",
      "name": "axisAngle",
      "since": "2.10",
      "returnType": {
        "id": "quaternion",
        "name": "Quaternion"
      },
      "description": [
        "Returns a quaternion from the given angle (in degrees) and axis (as a vector). This represents a rotation around the given axis by the given angle."
      ],
      "examples": [
        "axisangle(90, (vector from player's facing))"
      ],
      "patterns": [
        "axisAngle(angle: number, axis: vector)"
      ]
    },
    {
      "id": "ceiling",
      "name": "ceiling",
      "since": "2.2",
      "returnType": {
        "id": "long",
        "name": ""
      },
      "description": [
        "Alias of <a href='#ceil'>ceil</a>."
      ],
      "examples": [
        "ceiling(2.34) = 3",
        "ceiling(2) = 2",
        "ceiling(2.99) = 3"
      ],
      "patterns": [
        "ceiling(n: number)"
      ]
    },
    {
      "id": "product",
      "name": "product",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Calculates the product of a list of numbers."
      ],
      "examples": [
        "product(1) = 1",
        "product(2, 3, 4) = 24",
        "product({some list variable::*})",
        "product(2, {_v::*}, and the player's y-coordinate)"
      ],
      "patterns": [
        "product(ns: numbers)"
      ]
    },
    {
      "id": "sin",
      "name": "sin",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "The sine function. It starts at 0° with a value of 0, goes to 1 at 90°, back to 0 at 180°, to -1 at 270° and then repeats every 360°. Uses degrees, not radians."
      ],
      "examples": [
        "sin(90) = 1",
        "sin(60) = 0.866"
      ],
      "patterns": [
        "sin(n: number)"
      ]
    },
    {
      "id": "min",
      "name": "min",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Returns the minimum number from a list of numbers."
      ],
      "examples": [
        "min(1) = 1",
        "min(1, 2, 3, 4) = 1",
        "min({some list variable::*})"
      ],
      "patterns": [
        "min(ns: numbers)"
      ]
    },
    {
      "id": "abs",
      "name": "abs",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Returns the absolute value of the argument, i.e. makes the argument positive."
      ],
      "examples": [
        "abs(3) = 3",
        "abs(-2) = 2"
      ],
      "patterns": [
        "abs(n: number)"
      ]
    },
    {
      "id": "sum",
      "name": "sum",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Sums a list of numbers."
      ],
      "examples": [
        "sum(1) = 1",
        "sum(2, 3, 4) = 9",
        "sum({some list variable::*})",
        "sum(2, {_v::*}, and the player's y-coordinate)"
      ],
      "patterns": [
        "sum(ns: numbers)"
      ]
    },
    {
      "id": "root",
      "name": "root",
      "since": "2.11",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Calculates the <i>n</i>th root of a number."
      ],
      "examples": [
        "root(2, 4) = 2 # same as sqrt(4)",
        "root(4, 16) = 2",
        "root(-4, 16) = 0.5 # same as 16^(-1/4)"
      ],
      "patterns": [
        "root(n: number, number: number)"
      ]
    },
    {
      "id": "median",
      "name": "median",
      "since": "2.11",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Get the middle value of a sorted list of numbers. If the list has an even number of values, the median is the average of the two middle numbers.",
        "You cannot get the median of a set of numbers that includes NaN."
      ],
      "examples": [
        "median(1, 2, 3, 4, 5) = 3",
        "median(1, 2, 3, 4, 5, 6) = 3.5",
        "median(0, 123, 456, 789) = 289.5"
      ],
      "patterns": [
        "median(numbers: numbers)"
      ]
    },
    {
      "id": "rgb",
      "name": "rgb",
      "since": "2.5, 2.10 (alpha)",
      "returnType": {
        "id": "color",
        "name": "Color"
      },
      "description": [
        "Returns a RGB color from the given red, green and blue parameters. Alpha values can be added optionally, but these only take affect in certain situations, like text display backgrounds."
      ],
      "examples": [
        "dye player's leggings rgb(120, 30, 45)",
        "set the colour of a text display to rgb(10, 50, 100, 50)"
      ],
      "patterns": [
        "rgb(red: long, green: long, blue: long, alpha: long = 255)"
      ]
    },
    {
      "id": "offlineplayer",
      "name": "offlineplayer",
      "since": "2.8.0, 2.9.0 (prevent lookups)",
      "returnType": {
        "id": "offlineplayer",
        "name": "Offline Player"
      },
      "description": [
        "Returns a offline player from their name or UUID. This function will still return the player if they're online. If Paper 1.16.5+ is used, the 'allowLookup' parameter can be set to false to prevent this function from doing a web lookup for players who have not joined before. Lookups can cause lag spikes of up to multiple seconds, so use offline players with caution."
      ],
      "examples": [
        "set {_p} to offlineplayer(\"Notch\")",
        "set {_p} to offlineplayer(\"069a79f4-44e9-4726-a5be-fca90e38aaf5\")",
        "set {_p} to offlineplayer(\"Notch\", false)"
      ],
      "patterns": [
        "offlineplayer(nameOrUUID: string, allowLookups: boolean = true)"
      ]
    },
    {
      "id": "round",
      "name": "round",
      "since": "2.2, 2.7 (decimal placement)",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Rounds a number, i.e. returns the closest integer to the argument. Place a second argument to define the decimal placement."
      ],
      "examples": [
        "round(2.34) = 2",
        "round(2) = 2",
        "round(2.99) = 3",
        "round(2.5) = 3"
      ],
      "patterns": [
        "round(n: number, d: number = 0)"
      ]
    },
    {
      "id": "sqrt",
      "name": "sqrt",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "The square root, which is the inverse operation to squaring a number (for positive numbers only). This is the same as <code>(argument) ^ (1/2)</code> – other roots can be calculated via <code>number ^ (1/root)</code>, e.g. <code>set {_l} to {_volume}^(1/3)</code>.",
        "Returns NaN (not a number) if the argument is negative."
      ],
      "examples": [
        "sqrt(4) = 2",
        "sqrt(2) = 1.4142",
        "sqrt(-1) = NaN"
      ],
      "patterns": [
        "sqrt(n: number)"
      ]
    },
    {
      "id": "formatNumber",
      "name": "formatNumber",
      "since": "2.10",
      "returnType": {
        "id": "string",
        "name": "Text"
      },
      "description": [
        "Converts numbers to human-readable format. By default, '###,###' (e.g. '123,456,789') will be used for whole numbers and '###,###.##' (e.g. '123,456,789.00) will be used for decimal numbers. A hashtag '#' represents a digit, a comma ',' is used to separate numbers, and a period '.' is used for decimals. ",
        "Will return none if the format is invalid.",
        "For further reference, see this <a href=\"https://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html\" target=\"_blank\">article</a>."
      ],
      "examples": [
        "command /balance:",
        "\taliases: bal",
        "\texecutable by: players",
        "\ttrigger:",
        "\t\tset {_money} to formatNumber({money::%sender's uuid%})",
        "\t\tsend \"Your balance: %{_money}%\" to sender"
      ],
      "patterns": [
        "formatNumber(number: number, format: string = )"
      ]
    },
    {
      "id": "clamp",
      "name": "clamp",
      "since": "2.8.0",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Clamps one or more values between two numbers."
      ],
      "examples": [
        "clamp(5, 0, 10) = 5",
        "clamp(5.5, 0, 5) = 5",
        "clamp(0.25, 0, 0.5) = 0.25",
        "clamp(5, 7, 10) = 7",
        "clamp((5, 0, 10, 9, 13), 7, 10) = (7, 7, 10, 9, 10)",
        "set {_clamped::*} to clamp({_values::*}, 0, 10)"
      ],
      "patterns": [
        "clamp(values: numbers, min: number, max: number)"
      ]
    },
    {
      "id": "calcExperience",
      "name": "calcExperience",
      "since": "2.2-dev32",
      "returnType": {
        "id": "long",
        "name": ""
      },
      "description": [
        "Calculates the total amount of experience needed to achieve given level from scratch in Minecraft."
      ],
      "examples": null,
      "patterns": [
        "calcExperience(level: long)"
      ]
    },
    {
      "id": "player",
      "name": "player",
      "since": "2.8.0",
      "returnType": {
        "id": "player",
        "name": "Player"
      },
      "description": [
        "Returns an online player from their name or UUID, if player is offline function will return nothing.",
        "Setting 'getExactPlayer' parameter to true will return the player whose name is exactly equal to the provided name instead of returning a player that their name starts with the provided name."
      ],
      "examples": [
        "set {_p} to player(\"Notch\") # will return an online player whose name is or starts with 'Notch'",
        "set {_p} to player(\"Notch\", true) # will return the only online player whose name is 'Notch'",
        "set {_p} to player(\"069a79f4-44e9-4726-a5be-fca90e38aaf5\") # <none> if player is offline"
      ],
      "patterns": [
        "player(nameOrUUID: string, getExactPlayer: boolean = false)"
      ]
    },
    {
      "id": "exp",
      "name": "exp",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "The exponential function. You probably don't need this if you don't know what this is."
      ],
      "examples": [
        "exp(0) = 1",
        "exp(1) = 2.7183"
      ],
      "patterns": [
        "exp(n: number)"
      ]
    },
    {
      "id": "atan",
      "name": "atan",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "The inverse of the <a href='#tan'>tangent</a>, also called arctan. Returns result in degrees, not radians. Only returns values from -90 to 90."
      ],
      "examples": [
        "atan(0) = 0",
        "atan(1) = 45",
        "atan(10000) = 89.9943"
      ],
      "patterns": [
        "atan(n: number)"
      ]
    },
    {
      "id": "max",
      "name": "max",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Returns the maximum number from a list of numbers."
      ],
      "examples": [
        "max(1) = 1",
        "max(1, 2, 3, 4) = 4",
        "max({some list variable::*})"
      ],
      "patterns": [
        "max(ns: numbers)"
      ]
    },
    {
      "id": "mean",
      "name": "mean",
      "since": "2.11",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Get the mean (average) of a list of numbers.",
        "You cannot get the mean of a set of numbers that includes infinity or NaN."
      ],
      "examples": [
        "mean(1, 2, 3) = 2",
        "mean(0, 5, 10) = 5",
        "mean(13, 97, 376, 709) = 298.75"
      ],
      "patterns": [
        "mean(numbers: numbers)"
      ]
    },
    {
      "id": "quaternion",
      "name": "quaternion",
      "since": "2.10",
      "returnType": {
        "id": "quaternion",
        "name": "Quaternion"
      },
      "description": [
        "Returns a quaternion from the given W, X, Y and Z parameters. "
      ],
      "examples": [
        "quaternion(1, 5.6, 45.21, 10)"
      ],
      "patterns": [
        "quaternion(w: number, x: number, y: number, z: number)"
      ]
    },
    {
      "id": "cos",
      "name": "cos",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "The cosine function. This is basically the <a href='#sin'>sine</a> shifted by 90°, i.e. <code>cos(a) = sin(a + 90°)</code>, for any number a. Uses degrees, not radians."
      ],
      "examples": [
        "cos(0) = 1",
        "cos(90) = 0"
      ],
      "patterns": [
        "cos(n: number)"
      ]
    },
    {
      "id": "atan2",
      "name": "atan2",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "Similar to <a href='#atan'>atan</a>, but requires two coordinates and returns values from -180 to 180.",
        "The returned angle is measured counterclockwise in a standard mathematical coordinate system (x to the right, y to the top)."
      ],
      "examples": [
        "atan2(0, 1) = 0",
        "atan2(10, 0) = 90",
        "atan2(-10, 5) = -63.4349"
      ],
      "patterns": [
        "atan2(x: number, y: number)"
      ]
    },
    {
      "id": "ceil",
      "name": "ceil",
      "since": "2.2",
      "returnType": {
        "id": "long",
        "name": ""
      },
      "description": [
        "Rounds a number up, i.e. returns the closest integer larger than or equal to the argument."
      ],
      "examples": [
        "ceil(2.34) = 3",
        "ceil(2) = 2",
        "ceil(2.99) = 3"
      ],
      "patterns": [
        "ceil(n: number)"
      ]
    },
    {
      "id": "date",
      "name": "date",
      "since": "2.2",
      "returnType": {
        "id": "date",
        "name": "Date"
      },
      "description": [
        "Creates a date from a year, month, and day, and optionally also from hour, minute, second and millisecond.",
        "A time zone and DST offset can be specified as well (in minutes), if they are left out the server's time zone and DST offset are used (the created date will not retain this information)."
      ],
      "examples": [
        "date(2014, 10, 1) # 0:00, 1st October 2014",
        "date(1990, 3, 5, 14, 30) # 14:30, 5th May 1990",
        "date(1999, 12, 31, 23, 59, 59, 999, -3*60, 0) # almost year 2000 in parts of Brazil (-3 hours offset, no DST)"
      ],
      "patterns": [
        "date(year: number, month: number, day: number, hour: number = 0, minute: number = 0, second: number = 0, millisecond: number = 0, zone_offset: number = NaN, dst_offset: number = NaN)"
      ]
    },
    {
      "id": "ln",
      "name": "ln",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "The natural logarithm. You probably don't need this if you don't know what this is.",
        "Returns NaN (not a number) if the argument is negative."
      ],
      "examples": [
        "ln(1) = 0",
        "ln(exp(5)) = 5",
        "ln(2) = 0.6931"
      ],
      "patterns": [
        "ln(n: number)"
      ]
    },
    {
      "id": "acos",
      "name": "acos",
      "since": "2.2",
      "returnType": {
        "id": "number",
        "name": "Number"
      },
      "description": [
        "The inverse of the <a href='#cos'>cosine</a>, also called arccos. Returns result in degrees, not radians. Only returns values from 0 to 180."
      ],
      "examples": [
        "acos(0) = 90",
        "acos(1) = 0",
        "acos(0.5) = 30"
      ],
      "patterns": [
        "acos(n: number)"
      ]
    },
    {
      "id": "vector",
      "name": "vector",
      "since": "2.2-dev23",
      "returnType": {
        "id": "vector",
        "name": "Vector"
      },
      "description": [
        "Creates a new vector, which can be used with various expressions, effects and functions."
      ],
      "examples": [
        "vector(0, 0, 0)"
      ],
      "patterns": [
        "vector(x: number, y: number, z: number)"
      ]
    }
  ]
}